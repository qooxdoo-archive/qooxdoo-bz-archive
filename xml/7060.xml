<bug>
          <bug_id>7060</bug_id>
          
          <creation_ts>2012-11-29 18:45:00 +0100</creation_ts>
          <short_desc>Cold Cache: Speed up with pre-calculated &#39;dependencies.json&#39; File</short_desc>
          <delta_ts>2014-03-03 15:25:30 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>31545</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-11-29 18:45:31 +0100</bug_when>
            <thetext>One of the things that slows down cold-cache performance is dependency 
analysis. To mitigate this, at least for the framework a &#39;dependencies.json&#39; 
file could be distributed with the SDK.

The Generator could then evaluate that file in place of actually parsing the 
framework&#39;s class files when following dependencies. Invalidating the file 
against the class tree would be easy and fast. So a general strategy could be 
for any library to first check for a current &#39;dependencies.json&#39; file when 
looking for depencencies of the library&#39;s classes.

It is open whether the file would be updated automatically when classes change, 
or the user needs to run a dedicated Generator job.

A good path for the file would be the library&#39;s &#39;source&#39; folder, like 
&#39;source/dependencies.json&#39;.

An advantage of this file would be that it could survive cleansing of the cache.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31643</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-12-05 11:19:44 +0100</bug_when>
            <thetext>Made an initial commit, dependencies.json is generated to source/script by 
default.
The dependency information is the same as for the provider job.

But it breaks the static optimization for the qx.Website library (q-..min.js).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31740</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-12-14 16:12:10 +0100</bug_when>
            <thetext>dependencies.json is now skipped when doing &#39;statics&#39; optimization.

master: 2be8c486

Open: 
- add to Makefile.release so it goes into the SDK</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32192</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-02-08 14:04:39 +0100</bug_when>
            <thetext>(In reply to comment #2)
&gt; Open: 
&gt; - add to Makefile.release so it goes into the SDK

Further open:
- it appears that when running &#39;generate.py dependencies.json&#39;, 
dependencies.json is used! The job should probably be forceful, and discard any 
existing dependencies file!?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32650</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-04-29 15:02:04 +0200</bug_when>
            <thetext>I&#39;m leaving the cyclic re-use of dependencies.json information for generating a 
fresh dependencies.json (mentioned in the previous comment) for now. This could 
only be critical if people manipulate dependencies.json by hand, and then 
expect that the job overwrites their changes. But in this case they can just as 
well delete the file before running the job. And how likely is this?! The 
feature is experimental anyway.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33467</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-07-23 15:31:12 +0200</bug_when>
            <thetext>Integration into Makefile.release was done during 3.0 ramp-down (doh!).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38771</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:30 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>