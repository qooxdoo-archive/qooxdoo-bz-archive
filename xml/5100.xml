<bug>
          <bug_id>5100</bug_id>
          
          <creation_ts>2011-05-10 11:09:00 +0200</creation_ts>
          <short_desc>Add qxoo-source target and custom loader for server apps</short_desc>
          <delta_ts>2014-03-03 15:22:14 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>1.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.5</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="John Spackman">john.spackman</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>daniel.wagner</cc>
    
    <cc>derrell.lipman</cc>
    
    <cc>giesen.florian</cc>
    
    <cc>thron7</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>24410</commentid>
              <attachid>977</attachid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2011-05-10 11:09:52 +0200</bug_when>
            <thetext>Created attachment 977
Demo application

The current downloads for Qxoo are a single bundle of all relevant Qxoo files which makes debugging difficult and prevents using the generator for optimising the build of application (ie only the Qooxdoo files can be bundled, other libraries must be included by hand and are not optimised).

In the attached .zip file is a sample app &quot;qxootest&quot; which includes (a) an include file &quot;qxoo.json&quot; for config.json that adds &quot;qxoo-source&quot; and &quot;qxoo-build&quot; targets and (b) a custom loader for Rhino on oo.loader.tmpl.js.

The loader is based as closely as possible on the standard loader, with references to browser based stuff removed; it could probably be simplified further but for the purposes of getting this going I opted to only change the least amount.

A major difference between client apps and Qxoo is that the client app has a custom Application class which allows the generator to detect what classes are needed; i.e. in client apps the Application is the start of the dependency tree but there isn&#39;t a similar starting point for Qxoo apps.

To provide a starting point it is not possible to use the qx.application.* classes because of unwanted dependencies e.g. qx.application.Native has a #require for qx.core.Init which depends on  qx.event.handler.Application and others.  

There is minor requirement for startup and shutdown code usually provided by qx.core.Init that is useful (or required?) but the starting point can be defined with an explicit &quot;include&quot; in config.json.

However it would be potentially useful to provide a startup/shutdown framework for server apps, i.e. future-proofing as well as being consistent with client apps.  By removing the #require from qx.application.Native it could be the starting point, needing only a qx.core.ServerInit.js - i.e. two very small changes.

The attached .zip file includes sample ServerInit and ServerApplication classes.

To run the demo:
     ./generate qxoo-source
    java -cp js.jar  org.mozilla.javascript.tools.shell.Main  source/script/qx-oo.js</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24411</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-10 13:49:16 +0200</bug_when>
            <thetext>See related bug#5095.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24413</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2011-05-10 14:10:06 +0200</bug_when>
            <thetext>I just noticed that in &quot;qxoo.json&quot; the jobs-&gt;qxoo -&gt; extend key should be:

       &quot;extend&quot; : [ &quot;libraries&quot;, &quot;cache&quot; ]</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24467</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-12 14:04:28 +0200</bug_when>
            <thetext>I will continue this bug and close bug#5095 as duplicate, as John has already
provided so many relevant details, but with the goal of creating a &quot;server&quot;
skeleton (which is the original intend of 5095).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24469</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-12 14:06:11 +0200</bug_when>
            <thetext>*** Bug 5095 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24474</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-12 14:57:46 +0200</bug_when>
            <thetext>I&#39;ve added an initial (incomplete, not working) skeleton called &#39;shell&#39;. &#39;server&#39; as the name seemed to broad to me, &quot;non-browser&quot; too long, &quot;oo&quot; again too broad while at the same time failing the point, &quot;rhino&quot;, &quot;nodejs&quot; or anything else in this vein too specific. &#39;shell&#39; alludes to invoking the resulting application at the shell prompt. &#39;console&#39; comes to mind, too, but would be too easily confused with a browser console. &quot;There are two truely hard problems in programming; one is naming...&quot; :-).

With r27197.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24508</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-13 12:12:16 +0200</bug_when>
            <thetext>&#39;command-line&#39;?!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24523</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2011-05-14 16:21:39 +0200</bug_when>
            <thetext>(In reply to comment #6)
&gt; &#39;command-line&#39;?!

I quite liked &#39;server&#39; because the important distinction is that it&#39;s not the client; for me at least, &#39;shell&#39; and &#39;command-line&#39; are both misnomers because I&#39;m embedding rhino in a Tomcat webapp and there is no shell or command line.  

IMHO whether compiling for rhino, node.js (or other upcoming variants like node.js on spidermonkey) should be defined by the environment settings, just like client apps use the environment to detect gecko/chrome/msie...but only when they absolutely have to care.

&gt; the skeleton

Is it possible to integrate the jobs with the main generate jobs?  I&#39;d really like to keep a single config.json that can be used to generate client code as well as server code.  That might sound odd but I have a core reusable library which has code that can compile on client or server.

So far this all-in-one approach is working well for me, all-be-it with very limited testing; the only issue I&#39;ve found so far is that using &quot;extend&quot; : [ &quot;libraries&quot; ] is a mistake because the libraries all have uris but when on the server, uris must not be used or the loader does not know where to get the file from!  In practice this probably isn&#39;t an issue so I use a &quot;server-libraries&quot; job instead.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24526</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-15 13:40:13 +0200</bug_when>
            <thetext>(In reply to comment #7)
&gt; (In reply to comment #6)
&gt; &gt; &#39;command-line&#39;?!
&gt; 
&gt; I quite liked &#39;server&#39; because the important distinction is that it&#39;s not the
&gt; client; for me at least, &#39;shell&#39; and &#39;command-line&#39; are both misnomers because
&gt; I&#39;m embedding rhino in a Tomcat webapp and there is no shell or command line.  

We, on the other hand, are using Rhino and qxoo to run test scripts from cron, which has nothing to do with servers.

(BTW: How do you invoke your qxoo file with Rhino embedded in Tomcar? Is there some kind of programmatic open-this-file-and-run-it API in Rhino?!).

&gt; 
&gt; IMHO whether compiling for rhino, node.js (or other upcoming variants like
&gt; node.js on spidermonkey) should be defined by the environment settings, just
&gt; like client apps use the environment to detect gecko/chrome/msie...but only
&gt; when they absolutely have to care.

Maybe we get there eventually. But I, for my own part, am not experienced enough with these environment to be able to see yet what the right abstractions will be. One point of concern is the loader that is probably sufficiently different between e.g. Rhino and node.js. So you might not be able to cover all differences with environment settings. But environment settings can well be part of the solution, so that application code can branch based on their values.

&gt; 
&gt; &gt; the skeleton
&gt; 
&gt; Is it possible to integrate the jobs with the main generate jobs?

I think you&#39;re mixing concepts here. What is a skeleton? It&#39;s a bunch of files and a config. Our skeletons are application templates, to help the users get into the desired direction fast. Skeletons are an aid - no more, no less. You can make a skeleton whatever you like it to be, starting from any of them, by just tweaking files and the config. Skeletons are not a confinement :-).

Having said that, there will be e.g. &quot;build&quot; and &quot;source&quot; jobs with the server skeleton for sure. Is it that what you mean with &quot;integrate with the main generate jobs&quot;? Because I don&#39;t think we will just add new jobs (like &quot;source-server&quot;) with the existing skeletons like &#39;gui&#39;.

&gt; I&#39;d really
&gt; like to keep a single config.json that can be used to generate client code as
&gt; well as server code.

Then create one. This is within your scope as the app developer.

&gt; That might sound odd but I have a core reusable library
&gt; which has code that can compile on client or server.

Odd indeed. I would always maintain such code in its *own* (qooxdoo) library where it doesn&#39;t compile to neither client nor server, but is generic, and have separate client and server apps that include this library, and make the necessay settings for the respective platform. That would be a clean partitioning for me.



&gt; 
&gt; So far this all-in-one approach is working well for me, all-be-it with very
&gt; limited testing; the only issue I&#39;ve found so far is that using &quot;extend&quot; : [
&gt; &quot;libraries&quot; ] is a mistake because the libraries all have uris but when on the
&gt; server, uris must not be used or the loader does not know where to get the file
&gt; from!  In practice this probably isn&#39;t an issue so I use a &quot;server-libraries&quot;
&gt; job instead.

I&#39;m not quite getting this. Only very few of the configs that come with qooxdoo use the &#39;uri&#39; parameter on the &#39;library&#39; key (and most users don&#39;t need it anyway). One exception is the qxoo job, which I haven&#39;t written. But as the resulting .js file works in Rhino and node.js, I thought it is there for a reason (but maybe that&#39;s wrong). If you are using it for your own libraries then, yes, maybe you have to maintain two &#39;library&#39; entries for the same library on disk, one with and one without the &#39;uri&#39; param, depending on the job you are using it in. Which is fair use IMO.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24527</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-15 14:21:32 +0200</bug_when>
            <thetext>Daniel, please add your experiences from the Selenium jobs.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24530</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-05-16 09:02:25 +0200</bug_when>
            <thetext>I already used the qxoo stuff in web workers which is also a restricted, dom-less environment. But unfortunately, that is on the client side!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24546</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2011-05-16 12:07:24 +0200</bug_when>
            <thetext>(In reply to comment #8)
&gt; (In reply to comment #7)
&gt; &gt; (In reply to comment #6)
&gt; &gt; &gt; &#39;command-line&#39;?!
&gt; &gt; 
&gt; &gt; I quite liked &#39;server&#39; because the important distinction is that it&#39;s not the
&gt; &gt; client; for me at least, &#39;shell&#39; and &#39;command-line&#39; are both misnomers because
&gt; &gt; I&#39;m embedding rhino in a Tomcat webapp and there is no shell or command line.  
&gt; 
&gt; We, on the other hand, are using Rhino and qxoo to run test scripts from cron,
&gt; which has nothing to do with servers.

But the technology issues that code has to work with is the same, whether the computer running the scripts is designated as a server or just a workstation - the hardware and OS are the same, but when code runs in a browser the environment is significantly different.

&gt; (BTW: How do you invoke your qxoo file with Rhino embedded in Tomcar? Is there
&gt; some kind of programmatic open-this-file-and-run-it API in Rhino?!).

Yes - I get the feeling that was the original primary use, to be able to embed it inside Java.  The Rhino shell seems to be a bit of an afterthought and/or easy testing tool.

&gt; &gt; &gt; the skeleton
&gt; &gt; 
&gt; &gt; Is it possible to integrate the jobs with the main generate jobs?
&gt; 
&gt; I think you&#39;re mixing concepts here. What is a skeleton? It&#39;s a bunch of files
&gt; and a config. Our skeletons are application templates, to help the users get
&gt; into the desired direction fast. Skeletons are an aid - no more, no less. You
&gt; can make a skeleton whatever you like it to be, starting from any of them, by
&gt; just tweaking files and the config. Skeletons are not a confinement :-).

Yes the benefit of a skeleton is as a starting point for coding, ie the developer is expected to edit to suit and maintain it.  That&#39;s great if it needs to be different for each application but it depends on whether the config needs to be significantly tweaked each time.  

If the config for the server jobs is replicated in each skeleton-generated app but the config is the same, why wouldn&#39;t the jobs be in the common framework config files?  If the gui can do that (and allow adjustments via config.json) why not rhino/nodejs?  

Also, as our experience in these type of apps grows the common jobs can be adjusted without developers having to correct their config files by hand.

&gt; Having said that, there will be e.g. &quot;build&quot; and &quot;source&quot; jobs with the server
&gt; skeleton for sure. Is it that what you mean with &quot;integrate with the main
&gt; generate jobs&quot;? 

Yes, except that I expected the jobs to be defined in the framework config files and to be used by the skeleton, ie the same as for gui apps.

&gt; Because I don&#39;t think we will just add new jobs (like
&gt; &quot;source-server&quot;) with the existing skeletons like &#39;gui&#39;.

Sure, but just because a job is in the common framework doesn&#39;t mean you have to use it.  I&#39;ve never used the translation jobs for example because I don&#39;t need them, but if I ever do I&#39;ll be glad that they are there waiting for me.

The jobs could be kept in a separate file that&#39;s included by the skeleton&#39;s config.json, to keep config clean and separate but there&#39;s over 100 lines of config that appears to not need to change for each app.

&gt; &gt; I&#39;d really
&gt; &gt; like to keep a single config.json that can be used to generate client code as
&gt; &gt; well as server code.
&gt; 
&gt; Then create one. This is within your scope as the app developer.

That&#39;s what I&#39;ve done; the qxoo.json I uploaded is included into a standard config.json and the jobs work inline and don&#39;t conflict (AFAICT :-)

&gt; &gt; That might sound odd but I have a core reusable library
&gt; &gt; which has code that can compile on client or server.
&gt; 
&gt; Odd indeed. I would always maintain such code in its *own* (qooxdoo) library
&gt; where it doesn&#39;t compile to neither client nor server, but is generic, and have
&gt; separate client and server apps that include this library, and make the
&gt; necessay settings for the respective platform. That would be a clean
&gt; partitioning for me.

That&#39;s what I do - I have a library which is used by client and server apps (there&#39;s also an additional library for each website because a site can have multiple client apps) but the demo/testing app compiles and runs in the same place as the library, hence the library also has a config file.

&gt; &gt; So far this all-in-one approach is working well for me, all-be-it with very
&gt; &gt; limited testing; the only issue I&#39;ve found so far is that using &quot;extend&quot; : [
&gt; &gt; &quot;libraries&quot; ] is a mistake because the libraries all have uris but when on the
&gt; &gt; server, uris must not be used or the loader does not know where to get the file
&gt; &gt; from!  In practice this probably isn&#39;t an issue so I use a &quot;server-libraries&quot;
&gt; &gt; job instead.
&gt; 
&gt; I&#39;m not quite getting this. Only very few of the configs that come with qooxdoo
&gt; use the &#39;uri&#39; parameter on the &#39;library&#39; key (and most users don&#39;t need it
&gt; anyway). 

We keep the qooxdoo files in a separate virtual URI branch to the app for various reasons; if you specify that the library has a URI then the loader is not given the path to the source file, only the URI is given...so the loader only receives &quot;/public/qooxdoo..&quot; when it needs the path to the file in order to load it.

&gt; One exception is the qxoo job, which I haven&#39;t written. But as the
&gt; resulting .js file works in Rhino and node.js, I thought it is there for a
&gt; reason (but maybe that&#39;s wrong). If you are using it for your own libraries
&gt; then, yes, maybe you have to maintain two &#39;library&#39; entries for the same
&gt; library on disk, one with and one without the &#39;uri&#39; param, depending on the job
&gt; you are using it in. Which is fair use IMO.

I agree - adding the extend:libraries was not my best idea.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24556</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-16 16:38:22 +0200</bug_when>
            <thetext>(In reply to comment #11)
&gt; But the technology issues that code has to work with is the same, whether the
&gt; computer running the scripts is designated as a server or just a workstation -
&gt; the hardware and OS are the same, but when code runs in a browser the
&gt; environment is significantly different.

Totally agree. The question is just whether this is best communicated calling the skeleton &#39;server&#39;!?

&gt; Yes - I get the feeling that was the original primary use, to be able to embed
&gt; it inside Java.  The Rhino shell seems to be a bit of an afterthought and/or
&gt; easy testing tool.

What&#39;s the name of the class/method of the API?

&gt; Yes the benefit of a skeleton is as a starting point for coding, ie the
&gt; developer is expected to edit to suit and maintain it.  That&#39;s great if it
&gt; needs to be different for each application but it depends on whether the config
&gt; needs to be significantly tweaked each time.

Not only. The different qx.application class to derive the main app class from, and the different loader template are significant differences to merit an own skeleton.

&gt; If the config for the server jobs is replicated in each skeleton-generated app
&gt; but the config is the same, why wouldn&#39;t the jobs be in the common framework
&gt; config files?  If the gui can do that (and allow adjustments via config.json)
&gt; why not rhino/nodejs?

I don&#39;t mind adding jobs to base.json that are sufficiently generic. But base.json is already too big, so there are bugs that aim at stripping things out so they are separatly available. But about the stuff we are talking about here, I don&#39;t see a &#39;gui&#39; app supporting server build targets that require a different qx.application.* parent class *and* a different loader template. Well, at least not in the first step :).
  
&gt; Also, as our experience in these type of apps grows the common jobs can be
&gt; adjusted without developers having to correct their config files by hand.

Mh, maybe a dedicated tool/data/config/server.json?!

&gt; Yes, except that I expected the jobs to be defined in the framework config
&gt; files and to be used by the skeleton, ie the same as for gui apps.

Ok, I don&#39;t mind central definition. But probably ubiquity.

&gt; Sure, but just because a job is in the common framework doesn&#39;t mean you have
&gt; to use it.  I&#39;ve never used the translation jobs for example because I don&#39;t
&gt; need them, but if I ever do I&#39;ll be glad that they are there waiting for me.

Yea, but it would work if you did ;). Jobs that are available should at least work.

&gt; The jobs could be kept in a separate file that&#39;s included by the skeleton&#39;s
&gt; config.json, to keep config clean and separate but there&#39;s over 100 lines of
&gt; config that appears to not need to change for each app.

Sure, see above. (I&#39;m gradually realizing that the thing you might be concerned about is huge skeleton configs?!).

&gt; That&#39;s what I&#39;ve done; the qxoo.json I uploaded is included into a standard
&gt; config.json and the jobs work inline and don&#39;t conflict (AFAICT :-)

But as you already mentioned they wouldn&#39;t work on an Application.js that derives from qx.application.Standalone.

&gt; That&#39;s what I do - I have a library which is used by client and server apps
&gt; (there&#39;s also an additional library for each website because a site can have
&gt; multiple client apps) but the demo/testing app compiles and runs in the same
&gt; place as the library, hence the library also has a config file.

But that probably means you have also written client and server *classes* around it which exercise the core library classes?!

&gt; I agree - adding the extend:libraries was not my best idea.

No worries :).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24643</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2011-05-20 10:59:33 +0200</bug_when>
            <thetext>(sorry for the delay in replying...)

(In reply to comment #12)
&gt; (In reply to comment #11)

&gt; What&#39;s the name of the class/method of the API?

import org.mozilla.javascript.Context;
import org.mozilla.javascript.ContextFactory;

Context context = ContextFactory.getGlobal().enterContext();
try {
   Scriptable scope = context.initStandardObjects();
   Reader reader = .....
   Object result = context.evaluateReader(scope, reader, filename, lineNo, null);
} finally {
  Context.exit();
}

The docs are pretty good, although need reading a few times over if you&#39;re going to build it into a webserver, ie the quick way to get started isn&#39;t the best for performance or scalability.  Sun include a renamed version of Rhino in the JDK, but AFAICR it&#39;s v1.6 and the current release is 1.7.  I&#39;m using the current CVS head of Rhino because it has some really important bug fixes.

The docs are here: https://developer.mozilla.org/en/Rhino_documentation

&gt; But base.json is already too big
&gt; Mh, maybe a dedicated tool/data/config/server.json?!

Yes, I think that&#39;s a good idea

&gt; &gt; Sure, but just because a job is in the common framework doesn&#39;t mean you have
&gt; &gt; to use it.  I&#39;ve never used the translation jobs for example because I don&#39;t
&gt; &gt; need them, but if I ever do I&#39;ll be glad that they are there waiting for me.
&gt; 
&gt; Yea, but it would work if you did ;). Jobs that are available should at least
&gt; work.

Ah - do you mean that the developer would have to write their server equivalent of Application.js, hence the case for generating a new skeleton?  

Yes, ISWYM.  But if the config comes from a GUI skeleton and does not have a server Application.js the generator would fallback to the default implementation, which would have a do-nothing main().  It wouldn&#39;t break and the developer would have to know to run the generated source/qxoo.js to load the Qxoo &quot;core&quot; and then execute their own code, just as they do at present.

&gt; (I&#39;m gradually realizing that the thing you might be concerned
&gt; about is huge skeleton configs?!).

Yes, in part; the other thing is that by handing over all control to the developer by default we loose the ability to inject new framework code/features/bugfixes.

For example, there is custom startup and shutdown code in the Qx code and other libraries.  OK, there&#39;s only a tiny amount of that code right now but it could easily grow, either as libraries grow or as we learn more about writing non-client apps.

I guess I&#39;ve been assuming that there would be some kind of server init as part of the core Qx framework, and therefore it would follow that the config is in the core framework somewhere too - what do you think?

(from comment 8)
&gt;We, on the other hand, are using Rhino and qxoo to run test scripts from cron,
&gt;which has nothing to do with servers.

This is a big difference - for scripting, an &quot;application&quot; makes very little sense (and is probably more trouble than anything else), but that&#39;s not the case for long running server applications where stability and well-behaved code is key.

I&#39;m keen on this because I think Javascript on the server is the way of the future - node.js is already showing itself to be massively more scalable than &quot;traditional&quot; development, and while I&#39;m not using node.js yet that&#39;s only because V8 doesn&#39;t plug into Java.  Yes, we don&#39;t know much about the issues in server dev yet but Qxoo is essential and having an application framework provides a common base to start learning from and somewhere to accumulate that knowledge.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24644</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-20 13:01:04 +0200</bug_when>
            <thetext>(In reply to comment #13)
&gt; Ah - do you mean that the developer would have to write their server 
equivalent of Application.js, hence the case for generating a new skeleton?  

Yes.

&gt; 
&gt; Yes, ISWYM.  But if the config comes from a GUI skeleton and does not have a 
server Application.js the generator would fallback to the default 
&gt; implementation, which would have a do-nothing main().  It wouldn&#39;t break and 
the developer would have to know to run the generated source/qxoo.js 
&gt; to load the Qxoo &quot;core&quot; and then execute their own code, just as they do at 
present.

I&#39;m not sure I&#39;m getting fully what you mean. Let me sketch my current vision 
so you can match it against yours.

The server app developer would &#39;create-application.py -n servapp -t server&#39; 
(let&#39;s pretend we settled on &#39;server&#39; for this). It had a familiar skelton 
structure. It would contain source/class/servapp/Application.js which would be 
adapted for a server environment, so no &#39;alert()&#39; but rather &#39;console.log()&#39; or 
&#39;this.debug()&#39; or whatever works. The developer would then add code to this 
class, or add new classes.

At anyone time during this (also at the very beginning) he could run 
&#39;generate.py source&#39;. This would create a loader under source/script/servapp.js 
that would be specific to a server run time, like Rhino or node.js. It would as 
usual load all necessary classes from servapp and the qooxdoo SDK to make this 
app runnable. The developer should then be able to invoke something like

     java -cp js.jar org.mozilla.javascript.tools.shell.Main 
source/script/servapp.js

to run the app. Analogous reasoning applies to the build version.

That&#39;s the plan. So there will be a server-affine Application.js that serves as 
the main entry point for the application. It will derive from something like 
&quot;qx.application.Server&quot; (working name) which will make sure a server-suitable 
application infrastructure is defined, with the necessary life-cycle 
properties, as you described (Maybe that means the framework will provide 
additional classes for this in the background).

Particularly, there *won&#39;t* be a distinguished &quot;qxoo.js&quot; library anywhere in 
such an app. As with all qooxdoo apps, the server app will just pick and chose 
from the classes of the associated libraries, and will include them into the 
various builds. The selection of the right classes is just a matter of the 
appropriate config settings.

So the build will create a runnable app, not a static library (Which doesn&#39;t 
prevent you from making the servapp a lib if you so wish, which cannot run on 
its own; just delete the main() method and/or provide a custom loader; but that 
won&#39;t be the default case). Custom code and framework code go together into one 
application.

Does that make sense?

&gt; 
&gt; I guess I&#39;ve been assuming that there would be some kind of server init as 
part of the core Qx framework, and therefore it would follow that the config 
&gt; is in the core framework somewhere too - what do you think?

Yes, yes, there should be framework class support and default job configs, as 
described above.

&gt; &gt;We, on the other hand, are using Rhino and qxoo to run test scripts from 
cron,
&gt; &gt;which has nothing to do with servers.
&gt; 
&gt; This is a big difference - for scripting, an &quot;application&quot; makes very little 
sense (and is probably more trouble than anything else), but that&#39;s not the 
case 
&gt; for long running server applications where stability and well-behaved code is 
key.

I&#39;m not sure. As we want to cater for a variety of deployment scenarios on the 
server side, supporting apps that are started from the shell are important, and 
we already have a couple of use cases. And I don&#39;t think they deserve less 
stability and well-behaved code, but that&#39;s on the part of the developer :). 
Important for us is to provide a programming model that lets people create 
working code for these various scenarios fast. As you have a different 
deployment scenario (Tomcat) I would be interested to learn how a built qooxdoo 
server application should look like to be easily deployable for you.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24647</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-05-20 14:37:59 +0200</bug_when>
            <thetext>In my world, I will, later, be using &quot;server&quot; apps with rhino and node. What hasn&#39;t yet been discussed, but should be on the table as it broadens the scope of the discussion, is what I&#39;ve already done: *compiling* qooxdoo classes into .class files, and running them natively in the Java environment. Here, my &quot;loader&quot; comes in two parts. Firstly, I have a Makefile that compiles the appropriate (currently manually-selected) classes. Secondly, each of the qooxdoo classes needs to be instantiated initially. I therefore have a Makefile that contains entries like this:

qxoo_classes :=							\
	qxoo_classes/qx/Bootstrap.class				\
	qxoo_classes/qx/bom/client/OperatingSystem.class	\
	qxoo_classes/qx/bom/client/Locale.class			\
	qxoo_classes/qx/bom/client/Html.class			\
        ...


qxoo_classes/%.class : $(qxroot)/%.js
	echo &#39;window = Packages.main.Window().get(); &#39;			\
		&#39;navigator = window.navigator; &#39;			\
		&#39;qx = window.qx;&#39;					\
		&#39;qxvariants = window.qxvariants;&#39;			\
		&#39;rpcjs = window.rpcjs;&#39;					\
			| cat - $&lt; &gt; /tmp/$(notdir $&lt;)
	java -classpath							   \
	  &quot;$(classpath):$(shell find war/WEB-INF/lib			   \
			    -name &#39;*.jar&#39; -print0 | tr &#39;\0&#39; &#39;:&#39;)&quot;	   \
	  org.mozilla.javascript.tools.jsc.Main				   \
	  -extends java.lang.Object					   \
	  -d qxoo_classes						   \
	  -package $(basename $(shell echo $&lt; |				   \
			sed -e s,$(qxroot)/,, -e &#39;s,\.js,,&#39; -e &#39;s,/,.,g&#39;)) \
	  /tmp/$(notdir $&lt;)
	  rm -f /tmp/$(notdir $&lt;)

(All of that &#39;window =&#39; stuff is because there is no global object in this environment. I need to manually create an object to act as the global object, that can be retrieved and used in each class.)

and then the loader class that has a whole series of entries like this:

  ...

  classname = &quot;qx.Bootstrap&quot;;
  new Packages.qx.Bootstrap();

  classname = &quot;qx.bom.client.OperatingSystem&quot;;
  new Packages.qx.bom.client.OperatingSystem();

  classname = &quot;qx.bom.client.Locale&quot;;
  new Packages.qx.bom.client.Locale();

  classname = &quot;qx.bom.client.Html&quot;;
  new Packages.qx.bom.client.Html();

  ...

Ideally, both the Makefile or equivalent, and the Loader.js file would be automatically generated for me.

What&#39;s currently in that Loader.js file, BTW, is not what should be there. What _should_ be compiled into .class files is not the straight qooxdoo code, but rather the functions created by having already called qx.Class.define() et al. There&#39;s really no reason to have to do that work at run-time. It should be done at compile time. Obtaining the resulting function, though, in a form that can be compiled to .class files, may be somewhat non-trivial.

More food for thought.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24648</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-05-20 14:41:50 +0200</bug_when>
            <thetext>(In reply to comment #15)
&gt; Secondly, each of the qooxdoo classes needs to be instantiated initially.

That requires explanation. This is instantiating the *Java* class that represents the qooxdoo class, not the qooxdoo class itself. Doing that makes instantiating that qooxdoo class possible, by adding that qooxdoo class to the qx namespace, just as in a pure JavaScript implementation, loading the script would add that class to the namespace.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24649</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-20 15:32:03 +0200</bug_when>
            <thetext>(In reply to comment #15)

Derrell, this is massive :).

&gt; In my world, I will, later, be using &quot;server&quot; apps with rhino and node. What 
hasn&#39;t yet been discussed, but should be on the table as it broadens the 
&gt; scope of the discussion, is what I&#39;ve already done: *compiling* qooxdoo 
classes into .class files, and running them natively in the Java environment. 

Though I find this stuff interesting, I think we should focus this bug on 
supporting *JS* run times outside the browser. Compiling qooxdoo classes to 
Java (or any other language for that matter) should be the issue of other bugs. 
That fact that Rhino caters for both is not significant here IMO.

&gt; Ideally, both the Makefile or equivalent, and the Loader.js file would be 
automatically generated for me.

Maybe, if one day we have a generator API ready, you can do this yourself :). 
Even in its own bug, I&#39;m not sure it would get much support, it sounds rather 
specialized.

&gt; What&#39;s currently in that Loader.js file, BTW, is not what should be there. 
What _should_ be compiled into .class files is not the straight qooxdoo code, 
but 
&gt; rather the functions created by having already called qx.Class.define() et 
al. There&#39;s really no reason to have to do that work at run-time. It should be 
&gt; done at compile time. Obtaining the resulting function, though, in a form 
that can be compiled to .class files, may be somewhat non-trivial.

This is probably an interesting idea on its own, and apart from this bug.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24675</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-23 16:35:57 +0200</bug_when>
            <thetext>Another naming suggestion for the skeleton, from Martin:

  &quot;basic&quot;

I quite like it :).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24715</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2011-05-24 16:52:07 +0200</bug_when>
            <thetext>(In reply to comment #14)
&gt; Does that make sense?

Yep, that sounds great to me.

&gt; As you have a different 
&gt; deployment scenario (Tomcat) I would be interested to learn how a built qooxdoo 
&gt; server application should look like to be easily deployable for you.

That&#39;s evolving and I&#39;ll let you know it goes, but at the moment it&#39;s pretty simple - there is a generator that converts jssp files into javascript (ie code is between &lt;%...%&gt;) and can produce Qx classes or just plain javascript; the output is cached and executed when a url is requested.  It has to handle multiple Rhino scopes (one for each site, session, and request) and automatically run the generator

(In reply to comment #18)
&gt; Another naming suggestion for the skeleton, from Martin:
&gt;  &quot;basic&quot;

Hmm - not so keen, server apps aren&#39;t basic! :)

How about &quot;headless&quot;?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24717</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-24 21:20:44 +0200</bug_when>
            <thetext>What about &quot;core&quot;?!

(We&#39;re still thinking very much from the point of view of the framework, and what gets used of it in the custom app; this doesn&#39;t say much about the app itself).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24718</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-05-24 21:29:47 +0200</bug_when>
            <thetext>As long as it is well documented in the -t section when you run &quot;create-application.py --help&quot; I couldn&#39;t care less what it&#39;s called. I won&#39;t remember what it&#39;s called anyway, and will ask for the help page.

How about changing it to &quot;-t rhino-or-node-or-other-such-non-gui-environments&quot;
:-)

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24719</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-24 23:10:57 +0200</bug_when>
            <thetext>(In reply to comment #21)
&gt; As long as it is well documented in the -t section when you run
&gt; &quot;create-application.py --help&quot; I couldn&#39;t care less what it&#39;s called. I won&#39;t
&gt; remember what it&#39;s called anyway, and will ask for the help page.

How do you like the current explanation?

&gt; 
&gt; How about changing it to &quot;-t rhino-or-node-or-other-such-non-gui-environments&quot;

I was thinking about the exact same thing - if only we could provide tab-completion on skeleton types at the same time ;-).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24720</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-05-24 23:15:30 +0200</bug_when>
            <thetext>(In reply to comment #22)
&gt; (In reply to comment #21)
&gt; &gt; As long as it is well documented in the -t section when you run
&gt; &gt; &quot;create-application.py --help&quot; I couldn&#39;t care less what it&#39;s called. I won&#39;t
&gt; &gt; remember what it&#39;s called anyway, and will ask for the help page.
&gt; 
&gt; How do you like the current explanation?

The version I have checked out right now calls it &quot;shell&quot;, and the explanation is fine.

&gt; 
&gt; &gt; 
&gt; &gt; How about changing it to &quot;-t rhino-or-node-or-other-such-non-gui-environments&quot;
&gt; 
&gt; I was thinking about the exact same thing - if only we could provide
&gt; tab-completion on skeleton types at the same time ;-).

libreadline ?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24738</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-26 14:02:25 +0200</bug_when>
            <thetext>I&#39;m closing this as the basics are done. There might still be some rough edges 
which will show with usage. Also, the new skeleton name is still provisional, 
it currently goes with the name of &#39;basic&#39;. So, consider the whole thing 
experimental. &#39;source&#39; and &#39;build&#39; jobs work. The same should apply to rather 
neutral jobs like &#39;api&#39;, &#39;lint&#39; and &#39;pretty&#39;. There is currently no real 
support for the &#39;test&#39; job, as this skeleton would need a specific test runner 
that works with Node and Rhino.

  create-application.py -n foo -t basic
  cd foo
  generate.py source
  node source/script/foo.js

With r27412.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24911</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-06-06 12:51:51 +0200</bug_when>
            <thetext>New contenders for the skeleton name:

- &quot;nodom&quot;

- &quot;domless&quot;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24913</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2011-06-06 13:27:48 +0200</bug_when>
            <thetext>(In reply to comment #25)
&gt; New contenders for the skeleton name:
&gt; 
&gt; - &quot;nodom&quot;
&gt; 
&gt; - &quot;domless&quot;

Nice try but DOM is supported and ecmascript provides XML natively, it&#39;s implemented in Rhino and SpiderMonkey although not in V8 (AFAICT): http://en.wikipedia.org/wiki/ECMAScript_for_XML

The name should be just enough to distinguish it from a browser based gui app and not be specific to a single use-case; so far that gives:

  server
  non-browser
  console
  headless
  non-gui

Surely we can pick just one and run withit? I&#39;m not keen on &quot;basic&quot; because writing apps this way isn&#39;t a stepping stone to writing gui apps, but OTOH it&#39;s just a name and online docs are there for a reason :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24920</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-06-06 14:57:59 +0200</bug_when>
            <thetext>(In reply to comment #26)
&gt; Nice try but DOM is supported and ecmascript provides XML natively, it&#39;s
&gt; implemented in Rhino and SpiderMonkey although not in V8 (AFAICT):
&gt; http://en.wikipedia.org/wiki/ECMAScript_for_XML

DOM != XML, FAIK. If we talk about DOM, it&#39;s more about e.g. if there is a global &#39;document&#39; object.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24921</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-06-06 15:06:22 +0200</bug_when>
            <thetext>(In reply to comment #25)
&gt; New contenders for the skeleton name:
&gt; 
&gt; - &quot;nodom&quot;
&gt; 
&gt; - &quot;domless&quot;

I like &quot;domless&quot; which nicely describes the Rhino and Node environments that do not have the browser DOM.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24922</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2011-06-06 15:16:05 +0200</bug_when>
            <thetext>(In reply to comment #27)
&gt; (In reply to comment #26)
&gt; &gt; Nice try but DOM is supported and ecmascript provides XML natively, it&#39;s
&gt; &gt; implemented in Rhino and SpiderMonkey although not in V8 (AFAICT):
&gt; &gt; http://en.wikipedia.org/wiki/ECMAScript_for_XML
&gt; 
&gt; DOM != XML, FAIK. If we talk about DOM, it&#39;s more about e.g. if there is a
&gt; global &#39;document&#39; object.

DOM != global document object.   DOM is available in Rhino either by exposing the Java implementation or by using jsdom, whereas the global document object is a browser concept to access the parsed html.  

For example, jQuery is available as a node package that uses DOM to manipulate XML on the server; I&#39;ve not tried it but take a look at http://blog.nodejitsu.com/jsdom-jquery-in-5-lines-on-nodejs</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37600</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:22:14 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="0" isprivate="0" isurl="0">
            <attachid>977</attachid>
            <date>2011-05-10 11:09:00 +0200</date>
            <delta_ts>2011-05-10 11:09:52 +0200</delta_ts>
            <desc>Demo application</desc>
            <filename>qxootest.zip</filename>
            <type>application/zip</type>
            <size>56470</size>
            <attacher>john.spackman</attacher>
            
              <data encoding="base64">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
wQhHhLFmLbPaCSqJ7+EjoNWgjOONqynv0C2Qb3LPrs6oWc3XjJwfRhS1mxdyY8rEWXa75UWLqIHN
f2wH/ckV3w9QSwcIZjMuWfMAAADZAQAAUEsDBAoAAAAAACqgjT4AAAAAAAAAAAAAAAAQABAAcXhv
b3Rlc3Qvc291cmNlL1VYDAAbAMlN//KlTfYBFABQSwMECgAAAAAA1GSTPgAAAAAAAAAAAAAAABUA
EABxeG9vdGVzdC9zb3VyY2UvLnN2bi9VWAwArPfITT90rU32ARQAUEsDBBQACAAIANRkkz4AAAAA
AAAAAAAAAAAcABAAcXhvb3Rlc3Qvc291cmNlLy5zdm4vZW50cmllc1VYDABnAMlNP3StTfYBFACl
kMtOxDAMRffW/ErTOEmbpt/Bqru8+oA2KUkGjfh6ykyFBEJiwV1Y91qWfGykAG5JICTjkN9CX9dH
Je8++LxkYuNWDw9fH/6rPyWd8xz33SfivLlOk09/DxSfi9NF16+3GD9DneM1Wf/7YjjEKGJFRYX8
CVVPsWecSNl0shlAtErBc5wDybu2L5sO8F0Ndk1Ljai0xLGyTphKuW6sEBVFJa1GI+AC2aZlL/cv
XMCuB/fpkz/xHnEJzt/IXLYVxmX18JOv6UXbN5zQuwYYGTpuhFXITKcol3wc1bGZOdQdN+5/x51i
Uh5oJemQV12WGE7YD1BLBwhXcXkA8gAAANgBAABQSwMECgAAAAAAKqCNPgAAAAAAAAAAAAAAAB8A
EABxeG9vdGVzdC9zb3VyY2UvLnN2bi9wcm9wLWJhc2UvVVgMAKz3yE3/8qVN9gEUAFBLAwQKAAAA
AAAqoI0+AAAAAAAAAAAAAAAAGwAQAHF4b290ZXN0L3NvdXJjZS8uc3ZuL3Byb3BzL1VYDACs98hN
//KlTfYBFABQSwMECgAAAAAAK6CNPgAAAAAAAAAAAAAAAB8AEABxeG9vdGVzdC9zb3VyY2UvLnN2
bi90ZXh0LWJhc2UvVVgMAKz3yE0B86VN9gEUAFBLAwQUAAgACAAqoI0+AAAAAAAAAAAAAAAAMgAQ
AHF4b290ZXN0L3NvdXJjZS8uc3ZuL3RleHQtYmFzZS9pbmRleC5odG1sLnN2bi1iYXNlVVgMAGcA
yU0A86VN9gEUADVQMRKCMBDsfcV5Pdw4NqIJjVprYWMZ8RQcSJCcgr+XEK12dm93Z+fUfHfYns7H
PZTS1PlMBYChqa3XWIq0a6K+79N+mbruTossy2gIHgymdW3sXSNbDEk213wGoBoWAyGb8PNVvTVu
nRW2kpw+LSMUkWkUHoRC1waK0nSeRb/klqwQaOqRSmrOn4Nzwl4URR4uvuiqVkDGvl/Nw7xNVBF8
V2iMhP7p9OExVxTVcSzFterirp9RnyCo0xO+UEsHCFJlE5G8AAAAFQEAAFBLAwQKAAAAAADUZJM+
AAAAAAAAAAAAAAAAGQAQAHF4b290ZXN0L3NvdXJjZS8uc3ZuL3RtcC9VWAwArPfITT90rU32ARQA
UEsDBAoAAAAAACqgjT4AAAAAAAAAAAAAAAAjABAAcXhvb3Rlc3Qvc291cmNlLy5zdm4vdG1wL3By
b3AtYmFzZS9VWAwArPfITf/ypU32ARQAUEsDBAoAAAAAACqgjT4AAAAAAAAAAAAAAAAfABAAcXhv
b3Rlc3Qvc291cmNlLy5zdm4vdG1wL3Byb3BzL1VYDACs98hN//KlTfYBFABQSwMECgAAAAAAK6CN
PgAAAAAAAAAAAAAAACMAEABxeG9vdGVzdC9zb3VyY2UvLnN2bi90bXAvdGV4dC1iYXNlL1VYDACs
98hNAfOlTfYBFABQSwMECgAAAAAAKqCNPgAAAAAAAAAAAAAAABYAEABxeG9vdGVzdC9zb3VyY2Uv
Y2xhc3MvVVgMABsAyU3/8qVN9gEUAFBLAwQKAAAAAADUZJM+AAAAAAAAAAAAAAAAGwAQAHF4b290
ZXN0L3NvdXJjZS9jbGFzcy8uc3ZuL1VYDACs98hNP3StTfYBFABQSwMEFAAIAAgA1GSTPgAAAAAA
AAAAAAAAACIAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvLnN2bi9lbnRyaWVzVVgMAGcAyU0/dK1N
9gEUAIWQywrCMBBF90N/JY9p06bpd7jqLk3Sh4+kJq2IX29VFATBuxjOvVyYYZAD2CmCkHkB6eIb
xrZJb867NCVqwom1L2Ybf/Ih6pTGMM8uUuu6dRhc/F9YXFqsXjQ7X0N4GJbCGo1j5ri1f6+HTTlH
JFwQLHaoGo5NXlApy1qWLYhKKdiH0dM0a3M4aQ/fKrEuK94JoiX2xFjREWXrniAqjkoajZ2ADN4n
Pb+RwR1QSwcIxKBWPawAAAAYAQAAUEsDBAoAAAAAACqgjT4AAAAAAAAAAAAAAAAlABAAcXhvb3Rl
c3Qvc291cmNlL2NsYXNzLy5zdm4vcHJvcC1iYXNlL1VYDACs98hN//KlTfYBFABQSwMECgAAAAAA
KqCNPgAAAAAAAAAAAAAAACEAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvLnN2bi9wcm9wcy9VWAwA
rPfITf/ypU32ARQAUEsDBAoAAAAAACqgjT4AAAAAAAAAAAAAAAAlABAAcXhvb3Rlc3Qvc291cmNl
L2NsYXNzLy5zdm4vdGV4dC1iYXNlL1VYDACs98hN//KlTfYBFABQSwMECgAAAAAA1GSTPgAAAAAA
AAAAAAAAAB8AEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvLnN2bi90bXAvVVgMAKz3yE0/dK1N9gEU
AFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAAAAAAKQAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy8uc3Zu
L3RtcC9wcm9wLWJhc2UvVVgMAKz3yE3/8qVN9gEUAFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAAAAAA
JQAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy8uc3ZuL3RtcC9wcm9wcy9VWAwArPfITf/ypU32ARQA
UEsDBAoAAAAAACqgjT4AAAAAAAAAAAAAAAApABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzLy5zdm4v
dG1wL3RleHQtYmFzZS9VWAwArPfITf/ypU32ARQAUEsDBAoAAAAAAKxQqj4AAAAAAAAAAAAAAAAf
ABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L1VYDAAbAMlN0//ITfYBFABQSwMECgAA
AAAArFCqPgAAAAAAAAAAAAAAACQAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvLnN2
bi9VWAwArPfITdP/yE32ARQAUEsDBBQACAAIAKxQqj4AAAAAAAAAAAAAAAArABAAcXhvb3Rlc3Qv
c291cmNlL2NsYXNzL3F4b290ZXN0Ly5zdm4vZW50cmllc1VYDABnAMlN0//ITfYBFADNkT9PwzAQ
xXerXyWxr/HfbIwsLDB1c+xLm5LEIU4rxKfHCaVqUaUOMPAGyz6d7d97B4wQ34yEq3VB4rEvKU1r
/oE9xibmLnR087WnaX+ub0cb4y4MA465x+qw3eJ4v2HCOHk7Wfr2HsJ8oDEcRofUtan7XL3NQZLW
DCBjPIPiBUzJoFwXuVJCK7EhXBpD9mHX53Gw7rWzPbmWAC0kq3hmFdSZ87zKjNd1BmAYGOUsVJys
yEIwR7IiT3ZqjpjvI6mbFuc3rPeEcKyFxUpiYWxhmXCWO+YNrzgoCxovP3VhaND/l2TpM45HHB+G
oW1cMhf62dwy+2R8hx2enMemO7RLw6lw8+J3Kh5bnPBqOrpkohQyZ4s29zP71WhPktKcUR/7Zrpk
/EknS67OdLWWrk4xCFMrzw1CZS1KzcFJzhXzf0JXgIaE9wlQSwcIrRBh5EcBAAByAwAAUEsDBAoA
AAAAACqgjT4AAAAAAAAAAAAAAAAuABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0Ly5z
dm4vcHJvcC1iYXNlL1VYDACs98hN//KlTfYBFABQSwMECgAAAAAAKqCNPgAAAAAAAAAAAAAAACoA
EABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvLnN2bi9wcm9wcy9VWAwArPfITf/ypU32
ARQAUEsDBAoAAAAAAKxQqj4AAAAAAAAAAAAAAAAuABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4
b290ZXN0Ly5zdm4vdGV4dC1iYXNlL1VYDACs98hN0//ITfYBFABQSwMEFAAIAAgArFCqPgAAAAAA
AAAAAAAAAEAAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvLnN2bi90ZXh0LWJhc2Uv
TmF0aXZlLmpzLnN2bi1iYXNlVVgMAGcAyU3T/8hN9gEUALWRTU/DMAyGz8mviHrqqiq9wwnQDhwm
pO2IOKSpyzLlq4k7FdD+O84uIE0IiY+cIr/2Y/v1tMg7q3KWA4zGQ11NSwgIGeUO0hHSTYzWaIUm
+KoVb5zBguAHcSWmReqQQD70B9DYcmZctODAI4mPRVYftfL+E0g8tZwzHXzGNOuSPs5eF6VelRYM
9ybLXmWoVXqeCzKvrikek/FYV8aLy+FKwqlwu4Yz0YjmD98ZuFlvbtfb3b/AO5rbgeshZXKjWNB1
gnaFNCoNwgHuw0BRp2j3C7tKMriIL/Q/W/BFNR1YWfMKPydoG/IvyingaAb8DkGX5Cc66DtQSwcI
B+9aOvcAAACdAgAAUEsDBBQACAAIACqgjT4AAAAAAAAAAAAAAABLABAAcXhvb3Rlc3Qvc291cmNl
L2NsYXNzL3F4b290ZXN0Ly5zdm4vdGV4dC1iYXNlL1NlcnZlckFwcGxpY2F0aW9uLmpzLnN2bi1i
YXNlVVgMAGcAyU0A86VN9gEUALWRTU/DMAyGz8mviHrqqiq9wwnQDhwmpO2IOKSpyzLlq4k7FdD+
O84uIE0IiY+cIr/2Y/v1tMg7q3KWA4zGQ11NSwgIGeUO0hHSTYzWaIUm+KoVb5zBguAHcSWmReqQ
QD70B9DYcmZctODAI4mPRVYftfL+E0g8tZwzHXzGNOuSPs5eF6VelRYM9ybLXmWoVXqeCzKvrike
k/FYV8aLy+FKwqlwu4Yz0YjmD98ZuFlvbtfb3b/AO5rbgeshZXKjWNB1gnaFNCoNwgHuw0BRp2j3
C7tKMriIL/Q/W/BFNR1YWfMKPydoG/IvyingaAb8DkGX5Cc66DtQSwcIB+9aOvcAAACdAgAAUEsD
BBQACAAIACqgjT4AAAAAAAAAAAAAAABEABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0
Ly5zdm4vdGV4dC1iYXNlL1NlcnZlckluaXQuanMuc3ZuLWJhc2VVWAwAZwDJTQDzpU32ARQAtVZR
T+NGEH73r5j6oU1oWMOpDxU5qnI5ipByXAVIfTw59sTedr1rdtcJhst/7+zaThwgKKI0IiTezHwz
883szEQHcPBOryAAgDul7lOl4BBsjiBxCahjUHNY4gxSXKBQZYHSeuHc2vIkilodpnTmjyeqrDXP
cnvingA+HB39ckj/foXjH4/hUlrUEi2cXYzgAnURy3rUQS2XS3ZcyfSYpeixpjxBabBFml78OT3p
y2aycmYj0YiZSGSlYLktRKNw/kQeE8FLg17HvVOVVC4cE2EpDhfHR6zMy0b1BtFzML2cnF/dnMOc
CwQu/Vmp1d+Y2J8MWFUeCkcLpFzTkdI1zJUmqmzMhWE+iLPK5kqbNogDgp7FxvJYwl+OCg2DZelP
hkHwXtmEgygIIsoq2bvNuQH6c66THYRExMZ4P2Mh4O7+kDIelyWxGFuupIGBQb0gx5x0Ogwc2N09
mzg1ysycSxyEd/dKWTSW3XjZS8ltOAoeKciIrL5bWfpXm5Lbs9vLyc3/AO7IAjCWwk8MuEQ9epNR
Z/oArtFWWjYkckmikjJoMV1fmR6BrFXqdH/XXhkeicREaWRfZ65+VpQZ7Ou1wAl2AJH/zNCe9YRO
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
FAAIAAgA1GSTPgAAAAAAAAAAAAAAADYAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3Qv
c2ltdWxhdGlvbi8uc3ZuL2VudHJpZXNVWAwAZwDJTT90rU32ARQApY7LTsQwDEX3Fr+Sh5ukabrm
D2DVnfPoTIe2KU2LEF9PeWgECIkFZ2HZV1fyQQkQhxW0rRSUp7kV4pj8Jc2pDIWHPInuYxfHfs1P
K5VyzsuSVh6T30+ntP5d2FLZIm0kHp9zfjtEyfsakgjj0f6SDtM+0jbk+XclOKgkIpOaobpH10ps
K8WtNY01HejaObjk88zLQuFhohm+Y7AxtfSakcWehag9c7HpGaKT6Gwg9Bpu4DZN+e7qwi8F+mFM
8PO9aXXdGsXlOx340Ci0CrWx6NGamIyTRD1SLUNqzP/cP8GqcofiK1BLBwi0uz725QAAAMABAABQ
SwMECgAAAAAAKqCNPgAAAAAAAAAAAAAAADkAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rl
c3Qvc2ltdWxhdGlvbi8uc3ZuL3Byb3AtYmFzZS9VWAwArPfITf/ypU32ARQAUEsDBAoAAAAAACqg
jT4AAAAAAAAAAAAAAAA1ABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3NpbXVsYXRp
b24vLnN2bi9wcm9wcy9VWAwArPfITf/ypU32ARQAUEsDBAoAAAAAACugjT4AAAAAAAAAAAAAAAA5
ABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3NpbXVsYXRpb24vLnN2bi90ZXh0LWJh
c2UvVVgMAKz3yE0B86VN9gEUAFBLAwQUAAgACAAqoI0+AAAAAAAAAAAAAAAAUwAQAHF4b290ZXN0
L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC9zaW11bGF0aW9uLy5zdm4vdGV4dC1iYXNlL0RlbW9TaW11
bGF0aW9uLmpzLnN2bi1iYXNlVVgMAGcAyU0A86VN9gEUALVTwY6bMBC98xVTThCloEo9ZVWp2+ze
2t1WpOrZgQlYMTaxx11WUf69Y0OyUrftKUVBZMybmffmDeUCFle6kgQA1mZ4trLtaBXDz7JG7XAK
bj11xjoOrtUSFmWSlNwaFrDppINaCeegwd5oR1YQOujME5Dhs53UCE72XvF5A1ITWlGTNBoYRw52
xsKz8RZCOTEMStYivC6gQgTqEHqhvVAR2CAJqVgMY48fldR76IiGVVlOoOJgzNgYUxjblu+K9+Ug
WnRlgz9RmaFHTeXMxdiio16dQqVwh2IEstXG4nc98W6yCzhPgurDWKyD1mJ6n6WH0Zggo5iBgfcd
z6G6hOkSjsEHHAl1Ayt46e+1pGLD2WvhcMkY/vXYb9E6YIWcx/ZBuYiPt9e7Yj2AzX21qf5LbZ5U
eMz0F7DusN6D3IGAJ9m0yHN2MFh07Adkg7AEZhetvnv8kp/Tw1w/eSKjv87QFey8jruT5RFynKUQ
b2HBvqClB0MPXqksHnGrFyeyPMQ/IoFHG0HsX/eBTfWy4O3qi6ldmi8hnf6e+WpDZ8Jv0vwmtj0t
f1PJm7tnidspU7Db9UU4x4rZwdaMMJjBgR9e65wq/Fsls/k2VqhQS9+zpMMYs/4q5eb1iO4P/KW4
LCXrkdezIit1m/2xunS3gfZsQJbnZ+3JdCen/OYXUEsHCO94Mmr9AQAAzQQAAFBLAwQKAAAAAADU
ZJM+AAAAAAAAAAAAAAAAMwAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC9zaW11bGF0
aW9uLy5zdm4vdG1wL1VYDACs98hNP3StTfYBFABQSwMECgAAAAAAKqCNPgAAAAAAAAAAAAAAAD0A
EABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3Qvc2ltdWxhdGlvbi8uc3ZuL3RtcC9wcm9w
LWJhc2UvVVgMAKz3yE3/8qVN9gEUAFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAAAAAAOQAQAHF4b290
ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC9zaW11bGF0aW9uLy5zdm4vdG1wL3Byb3BzL1VYDACs
98hN//KlTfYBFABQSwMECgAAAAAAK6CNPgAAAAAAAAAAAAAAAD0AEABxeG9vdGVzdC9zb3VyY2Uv
Y2xhc3MvcXhvb3Rlc3Qvc2ltdWxhdGlvbi8uc3ZuL3RtcC90ZXh0LWJhc2UvVVgMAKz3yE0B86VN
9gEUAFBLAwQUAAgACADbhY0+AAAAAAAAAAAAAAAAOwAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9x
eG9vdGVzdC9zaW11bGF0aW9uL0RlbW9TaW11bGF0aW9uLmpzVVgMAGcAyU1txaVN9gEUALVTwY6b
MBC98xVTThCloEo9ZVWp2+ze2t1WpOrZgQlYMTaxx11WUf69Y0OyUrftKUVBZMybmffmDeUCFle6
kgQA1mZ4trLtaBXDz7JG7XAKbj11xjoOrtUSFmWSlNwaFrDppINaCeegwd5oR1YQOujME5Dhs53U
CE72XvF5A1ITWlGTNBoYRw52xsKz8RZCOTEMStYivC6gQgTqEHqhvVAR2CAJqVgMY48fldR76IiG
VVlOoOJgzNgYUxjblu+K9+UgWnRlgz9RmaFHTeXMxdiio16dQqVwh2IEstXG4nc98W6yCzhPgurD
WKyD1mJ6n6WH0Zggo5iBgfcdz6G6hOkSjsEHHAl1Ayt46e+1pGLD2WvhcMkY/vXYb9E6YIWcx/ZB
uYiPt9e7Yj2AzX21qf5LbZ5UeMz0F7DusN6D3IGAJ9m0yHN2MFh07Adkg7AEZhetvnv8kp/Tw1w/
eSKjv87QFey8jruT5RFynKUQb2HBvqClB0MPXqksHnGrFyeyPMQ/IoFHG0HsX/eBTfWy4O3qi6ld
mi8hnf6e+WpDZ8Jv0vwmtj0tf1PJm7tnidspU7Db9UU4x4rZwdaMMJjBgR9e65wq/Fsls/k2VqhQ
S9+zpMMYs/4q5eb1iO4P/KW4LCXrkdezIit1m/2xunS3gfZsQJbnZ+3JdCen/OYXUEsHCO94Mmr9
AQAAzQQAAFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAAAAAAJAAQAHF4b290ZXN0L3NvdXJjZS9jbGFz
cy9xeG9vdGVzdC90ZXN0L1VYDAAbAMlN//KlTfYBFABQSwMECgAAAAAA1GSTPgAAAAAAAAAAAAAA
ACkAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvdGVzdC8uc3ZuL1VYDACs98hNP3St
TfYBFABQSwMEFAAIAAgA1GSTPgAAAAAAAAAAAAAAADAAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3Mv
cXhvb3Rlc3QvdGVzdC8uc3ZuL2VudHJpZXNVWAwAZwDJTT90rU32ARQApY7JTsQwEETvLX7FS8d7
znzCnHJzvGRmmMQhziDE1+MBBAIhceAdStWlkrqQA8TTBtJ0AurT0jPWlL6kJdVTpaHMbHj3rPnP
fNp8rceyrmmjMY3XaUrb34U91T363bPH51JuB6vluoXEwqW1v9Kb/D4GGh1HJFwSFAd0Pce+E9QY
ZY0aQGrn4FyOC62rDw+zX+A7Cq3SfJTEG8wkRDkSF20miI6jM8HjKOEO7tNcDm0FPVfIp0uCn49V
L3WvBOVvDOB1jlpgxBCyN0l4mU3S0cqOWxWs/t/qD1AJ3sa9AlBLBwg0ERqA3wAAALQBAABQSwME
CgAAAAAAKqCNPgAAAAAAAAAAAAAAADMAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3Qv
dGVzdC8uc3ZuL3Byb3AtYmFzZS9VWAwArPfITf/ypU32ARQAUEsDBAoAAAAAACqgjT4AAAAAAAAA
AAAAAAAvABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3Rlc3QvLnN2bi9wcm9wcy9V
WAwArPfITf/ypU32ARQAUEsDBAoAAAAAACugjT4AAAAAAAAAAAAAAAAzABAAcXhvb3Rlc3Qvc291
cmNlL2NsYXNzL3F4b290ZXN0L3Rlc3QvLnN2bi90ZXh0LWJhc2UvVVgMAKz3yE0B86VN9gEUAFBL
AwQUAAgACAAqoI0+AAAAAAAAAAAAAAAARwAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVz
dC90ZXN0Ly5zdm4vdGV4dC1iYXNlL0RlbW9UZXN0LmpzLnN2bi1iYXNlVVgMAGcAyU0A86VN9gEU
ALVTTW/bMAy9+1dwObmZZzfoTmnWocg6rMBOay7DsINi0bFQWXL1kcYr+t9Lyt7aYd1OXYDYJiU+
ko+P1RzmL/TLMgBY235wateGZTI/qxqNx9E4j6G1zpPxUilhXmVZRalhDptWeai18B4kdtb44ERA
D629hWDJ1yiDEI0KQO7gobEOBhsdiL7XqhZBWVMSEoNdHLCOAWFVW4lnOzTIYGU/pNhVldwM+/MI
RDpx0ZD9FBEYThgJtkcDlLxxtoNVCGd8v1JG4qFsQ6dXFfmm9JsWoUNiS3oIrQhQWxOEMmTgVL1w
CIqaFKZ+vHurQkuVMMRY+dNqe0cUHEr4aiPUwkDtMBVuCGuriC03gIndluq3TcqSgBKlxKNW15Sb
SbYGSy5xSDBbBOt2wqgfKKkiSu9wF7Vw0zBaRQS5uh2KBKdKCo5emR2NBHtKZkSHvhc15WCeBDXr
HHmskXyrURqBma1DpJ65xYmI1OZEZGKPRqolOh5ild0cyjUXUI6Tz2c3B2v5apkeH0gjG/qYFdkd
iRMPASn5EihM4r5knZR8vhYeC5Zvh0yNhyV9cwRANU+vNy/3S3gAm4urzdV/wSZeAKbix+qJw09I
vLKevO3oobpeTyqbblTpzZ6r8XAJTTQ1yzs/Smd3U+Wsj5L14sLFTRTa528LOHm9KGCW9tO3NmoJ
Bvc0+EYo/Wp2dPpn7EeKxLzhJ0WuSWXpm7VGQsD3v6Lu02j+0U1n2ZJ7XhP5l6bOp+PHriA/gt/6
2pOcBbyDk9Mnji05xDPVX0o0gdZf56KALTVwDs5y9QMJfABL2h1VD8xIUFrz0tCNZ7m4NF+E2WF+
UgDRuDgmPN7gLtJ+Eh/XSvKaEMtpG0dmeSdj8EoifFsUi+Pvj4Rl/L8n6wFQSwcI80+RQZ4CAAD6
BQAAUEsDBAoAAAAAANRkkz4AAAAAAAAAAAAAAAAtABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4
b290ZXN0L3Rlc3QvLnN2bi90bXAvVVgMAKz3yE0/dK1N9gEUAFBLAwQKAAAAAAAqoI0+AAAAAAAA
AAAAAAAANwAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC90ZXN0Ly5zdm4vdG1wL3By
b3AtYmFzZS9VWAwArPfITf/ypU32ARQAUEsDBAoAAAAAACqgjT4AAAAAAAAAAAAAAAAzABAAcXhv
b3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3Rlc3QvLnN2bi90bXAvcHJvcHMvVVgMAKz3yE3/
8qVN9gEUAFBLAwQKAAAAAAAroI0+AAAAAAAAAAAAAAAANwAQAHF4b290ZXN0L3NvdXJjZS9jbGFz
cy9xeG9vdGVzdC90ZXN0Ly5zdm4vdG1wL3RleHQtYmFzZS9VWAwArPfITQHzpU32ARQAUEsDBBQA
CAAIANuFjT4AAAAAAAAAAAAAAAAvABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3Rl
c3QvRGVtb1Rlc3QuanNVWAwAZwDJTW3FpU32ARQAtVNNb9swDL37V3A5uZlnN+hOadahyDqswE5r
LsOwg2LRsVBZcvWRxiv630vK3tph3U5dgNgmJT6Sj4/VHOYv9MsyAFjbfnBq14ZlMj+rGo3H0TiP
obXOk/FSKWFeZVlFqWEOm1Z5qLXwHiR21vjgREAPrb2FYMnXKIMQjQpA7uChsQ4GGx2IvteqFkFZ
UxISg10csI4BYVVbiWc7NMhgZT+k2FWV3Az78whEOnHRkP0UERhOGAm2RwOUvHG2g1UIZ3y/Ukbi
oWxDp1cV+ab0mxahQ2JLegitCFBbE4QyZOBUvXAIipoUpn68e6tCS5UwxFj502p7RxQcSvhqI9TC
QO0wFW4Ia6uILTeAid2W6rdNypKAEqXEo1bXlJtJtgZLLnFIMFsE63bCqB8oqSJK73AXtXDTMFpF
BLm6HYoEp0oKjl6ZHY0Ee0pmRIe+FzXlYJ4ENesceayRfKtRGoGZrUOknrnFiYjU5kRkYo9GqiU6
HmKV3RzKNRdQjpPPZzcHa/lqmR4fSCMb+pgV2R2JEw8BKfkSKEzivmSdlHy+Fh4Llm+HTI2HJX1z
BEA1T683L/dLeACbi6vN1X/BJl4ApuLH6onDT0i8sp687eihul5PKptuVOnNnqvxcAlNNDXLOz9K
Z3dT5ayPkvXiwsVNFNrnbws4eb0oYJb207c2agkG9zT4Rij9anZ0+mfsR4rEvOEnRa5JZembtUZC
wPe/ou7TaP7RTWfZknteE/mXps6n48euID+C3/rak5wFvIOT0yeOLTnEM9VfSjSB1l/nooAtNXAO
znL1Awl8AEvaHVUPzEhQWvPS0I1nubg0X4TZYX5SANG4OCY83uAu0n4SH9dK8poQy2kbR2Z5J2Pw
SiJ8WxSL4++PhGX8vyfrAVBLBwjzT5FBngIAAPoFAABQSwMECgAAAAAAKqCNPgAAAAAAAAAAAAAA
ACUAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvdGhlbWUvVVgMABsAyU3/8qVN9gEU
AFBLAwQKAAAAAADUZJM+AAAAAAAAAAAAAAAAKgAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9v
dGVzdC90aGVtZS8uc3ZuL1VYDACs98hNP3StTfYBFABQSwMEFAAIAAgA1GSTPgAAAAAAAAAAAAAA
ADEAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvdGhlbWUvLnN2bi9lbnRyaWVzVVgM
AGcAyU0/dK1N9gEUAK2SwW7bMAyG78JexbYoiZLoW9FhT9BTbrREJWkTK7PdoejTT9mGDRsGLMDy
H4SfBAF9+EnQSuXjolwwVq1f5nEY2tu/yyzrce1TPQ+7735o/md/v/C6HurlIkufZXrd72X598Am
65Z54+HzW63XYljr65JkSKc2/au7HeQsf6dRTUYDdNp1YJ+ARg2jsX0IGAPulPNE6rke5n69cHo5
86x+F0JEryfXcYDSpeymjnIsHQBpoJAYJqc+qE913vrnVZXjSdSfn+Lo/Ii219+0U8maAkjgCbKm
WND5KXojiJpQrPwf8Q8Zgsb1UVJdeDvW+Wa6kAl1MMngJMTChTOmCM1mISJ3FzqrqdE91lNdbgaj
UMgV441l44RDAl+YA1qnycrEd4rtus6Hdoi88JzkZjodisnGZiTPEmmKErINFLG0XZdMd4zt6Xrv
t8eW2YBNuniwzohNFLMB55P2gs7eJzbnTAP7ClBLBwiNKq62ZQEAAB4EAABQSwMECgAAAAAAKqCN
PgAAAAAAAAAAAAAAADQAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvdGhlbWUvLnN2
bi9wcm9wLWJhc2UvVVgMAKz3yE3/8qVN9gEUAFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAAAAAAMAAQ
AHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC90aGVtZS8uc3ZuL3Byb3BzL1VYDACs98hN
//KlTfYBFABQSwMECgAAAAAAK6CNPgAAAAAAAAAAAAAAADQAEABxeG9vdGVzdC9zb3VyY2UvY2xh
c3MvcXhvb3Rlc3QvdGhlbWUvLnN2bi90ZXh0LWJhc2UvVVgMAKz3yE0B86VN9gEUAFBLAwQUAAgA
CAAqoI0+AAAAAAAAAAAAAAAASgAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC90aGVt
ZS8uc3ZuL3RleHQtYmFzZS9BcHBlYXJhbmNlLmpzLnN2bi1iYXNlVVgMAGcAyU0A86VN9gEUAK2O
MQrDMBRD93+KT6bWBGd3p9C1Yy9gErX2ENuxXXApuXudBEoPEG1PSEidYHGQiJj56sM72qfJasOb
HeASduhf2fiYKhw1yaIjmou8G0yQIx7W4dTMxfuMlGXe7D4E6KjdgKalTz2CkuFGVlybe2TyI6L7
S7brYf3DxKry2l1oOV++UEsHCIrsOy6DAAAANQEAAFBLAwQUAAgACAAqoI0+AAAAAAAAAAAAAAAA
RQAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC90aGVtZS8uc3ZuL3RleHQtYmFzZS9D
b2xvci5qcy5zdm4tYmFzZVVYDABnAMlNAPOlTfYBFACtjjEOwyAMRXefwsqUoojsdKqyduwNglOQ
GtyAK1FVuXshXCGe/rP99f+oUJ00AIg48fsb/dOJOfDuZwqJGtw+4jimAmdFohoBtqwfjlbSlhYf
qO+2zCyURMuxnvjFsRvgVzpQFgoWDRZTu65sKYb2NNSac1UJTZHVscN+uf4BUEsHCG2yOXZ/AAAA
JgEAAFBLAwQUAAgACAAqoI0+AAAAAAAAAAAAAAAASgAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9x
eG9vdGVzdC90aGVtZS8uc3ZuL3RleHQtYmFzZS9EZWNvcmF0aW9uLmpzLnN2bi1iYXNlVVgMAGcA
yU0A86VN9gEUAK2OsQ7CMAxEd3+F1QmiKt3DhGBk5AdQY0iG2jQxUhDqv5O2EuIDets73emuM2g2
EgAinuT5TvER1C14iT1xphWOLw2ScoWtJtF0AGOx10ADWU/3yLRrxiKilNXqYp+pl3TTKNy08KlH
qCixR4e1uUYG8ZT4L9nOh/0PM7rKc3eCaX/4AlBLBwg6rVP6hAAAADUBAABQSwMEFAAIAAgAKqCN
PgAAAAAAAAAAAAAAAEQAEABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvdGhlbWUvLnN2
bi90ZXh0LWJhc2UvRm9udC5qcy5zdm4tYmFzZVVYDABnAMlNAPOlTfYBFACtjjEOwjAMRXefwuoE
UZXuYUJITIzcgLgkQ2OauFIQ6t1x0yvU03/2t/4fDJqDBgARb/z55vgO4ho+4otSoR2uiwTOReGo
SDQDwFztM9BE1tMYE526uTILFbHS1ndO0vXw0wpUhZJHh/qzHyf2lFPz9FvJUUVBp2rzr7CeL39Q
SwcI6QiXtX4AAAAjAQAAUEsDBBQACAAIACqgjT4AAAAAAAAAAAAAAABFABAAcXhvb3Rlc3Qvc291
cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lLy5zdm4vdGV4dC1iYXNlL1RoZW1lLmpzLnN2bi1iYXNl
VVgMAGcAyU0A86VN9gEUAK2OMQ6DMAxF95zCYmoRCjudEFWnjlwgCgYilRiCK1FV3L2BIIaykin/
vxc7aQzxSUcIACio/zjTtJyt8Wk02hFDyN/ckht9OGslxKkQwyTLFjuUFdbG4iUaJiLGkSWv9Qqj
RHz9HzpkBZm/LAFA04scZPD3oljqZDUq1OQUG7JH7b6z4NZk+Wg9fBu40duUjSxZlso2FLjqe1RO
WY3HKfnOvDqL+Xr7AVBLBwgaqX5EqAAAALoBAABQSwMECgAAAAAA1GSTPgAAAAAAAAAAAAAAAC4A
EABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvdGhlbWUvLnN2bi90bXAvVVgMAKz3yE0/
dK1N9gEUAFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAAAAAAOAAQAHF4b290ZXN0L3NvdXJjZS9jbGFz
cy9xeG9vdGVzdC90aGVtZS8uc3ZuL3RtcC9wcm9wLWJhc2UvVVgMAKz3yE3/8qVN9gEUAFBLAwQK
AAAAAAAqoI0+AAAAAAAAAAAAAAAANAAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC90
aGVtZS8uc3ZuL3RtcC9wcm9wcy9VWAwArPfITf/ypU32ARQAUEsDBAoAAAAAACugjT4AAAAAAAAA
AAAAAAA4ABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lLy5zdm4vdG1wL3Rl
eHQtYmFzZS9VWAwArPfITQHzpU32ARQAUEsDBBQACAAIANuFjT4AAAAAAAAAAAAAAAAyABAAcXhv
b3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lL0FwcGVhcmFuY2UuanNVWAwAZwDJTW3F
pU32ARQArY4xCsMwFEP3f4pPptYEZ3en0LVjL2AStfYQ27FdcCm5e50ESg8QbU9ISJ1gcZCImPnq
wzvap8lqw5sd4BJ26F/Z+JgqHDXJoiOai7wbTJAjHtbh1MzF+4yUZd7sPgToqN2ApqVPPYKS4UZW
XJt7ZPIjovtLtuth/cPEqvLaXWg5X75QSwcIiuw7LoMAAAA1AQAAUEsDBBQACAAIANuFjT4AAAAA
AAAAAAAAAAAtABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lL0NvbG9yLmpz
VVgMAGcAyU1txaVN9gEUAK2OMQ7DIAxFd5/CypSiiOx0qrJ27A2CU5Aa3IArUVW5eyFcIZ7+s/31
/6hQnTQAiDjx+xv904k58O5nCoka3D7iOKYCZ0WiGgG2rB+OVtKWFh+o77bMLJREy7Ge+MWxG+BX
OlAWChYNFlO7rmwphvY01JpzVQlNkdWxw365/gFQSwcIbbI5dn8AAAAmAQAAUEsDBBQACAAIANuF
jT4AAAAAAAAAAAAAAAAyABAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lL0Rl
Y29yYXRpb24uanNVWAwAZwDJTW3FpU32ARQArY6xDsIwDER3f4XVCaIq3cOEYGTkB1BjSIbaNDFS
EOq/k7YS4gN62zvd6a4zaDYSACKe5PlO8RHULXiJPXGmFY4vDZJyha0m0XQAY7HXQANZT/fItGvG
IqKU1epin6mXdNMo3LTwqUeoKLFHh7W5RgbxlPgv2c6H/Q8zuspzd4Jpf/gCUEsHCDqtU/qEAAAA
NQEAAFBLAwQUAAgACADbhY0+AAAAAAAAAAAAAAAALAAQAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9x
eG9vdGVzdC90aGVtZS9Gb250LmpzVVgMAGcAyU1txaVN9gEUAK2OMQ7CMAxFd5/C6gRRle5hQkhM
jNyAuCRDY5q4UhDq3XHTK9TTf/a3/h8MmoMGABFv/Pnm+A7iGj7ii1KhHa6LBM5F4ahINAPAXO0z
0ETW0xgTnbq5MgsVsdLWd07S9fDTClSFkkeH+rMfJ/aUU/P0W8lRRUGnavOvsJ4vf1BLBwjpCJe1
fgAAACMBAABQSwMEFAAIAAgA24WNPgAAAAAAAAAAAAAAAC0AEABxeG9vdGVzdC9zb3VyY2UvY2xh
c3MvcXhvb3Rlc3QvdGhlbWUvVGhlbWUuanNVWAwAZwDJTW3FpU32ARQArY4xDoMwDEX3nMJiahEK
O50QVaeOXCAKBiKVGIIrUVXcvYEghrKSKf+/FztpDPFJRwgAKKj/ONO0nK3xaTTaEUPI39ySG304
ayXEqRDDJMsWO5QV1sbiJRomIsaRJa/1CqNEfP0fOmQFmb8sAUDTixxk8PeiWOpkNSrU5BQbskft
vrPg1mT5aD18G7jR25SNLFmWyjYUuOp7VE5Zjccp+c68Oov5evsBUEsHCBqpfkSoAAAAugEAAFBL
AwQUAAgACADbhY0+AAAAAAAAAAAAAAAAGgAQAHF4b290ZXN0L3NvdXJjZS9pbmRleC5odG1sVVgM
AGcAyU1txaVN9gEUADVQMRKCMBDsfcV5Pdw4NqIJjVprYWMZ8RQcSJCcgr+XEK12dm93Z+fUfHfY
ns7HPZTS1PlMBYChqa3XWIq0a6K+79N+mbruTossy2gIHgymdW3sXSNbDEk213wGoBoWAyGb8PNV
vTVunRW2kpw+LSMUkWkUHoRC1waK0nSeRb/klqwQaOqRSmrOn4Nzwl4URR4uvuiqVkDGvl/Nw7xN
VBF8V2iMhP7p9OExVxTVcSzFterirp9RnyCo0xO+UEsHCFJlE5G8AAAAFQEAAFBLAwQKAAAAAAAq
oI0+AAAAAAAAAAAAAAAAGQAQAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9VWAwAGwDJTf/ypU32
ARQAUEsDBAoAAAAAANRkkz4AAAAAAAAAAAAAAAAeABAAcXhvb3Rlc3Qvc291cmNlL3Jlc291cmNl
Ly5zdm4vVVgMAKz3yE0/dK1N9gEUAFBLAwQUAAgACADUZJM+AAAAAAAAAAAAAAAAJQAQAHF4b290
ZXN0L3NvdXJjZS9yZXNvdXJjZS8uc3ZuL2VudHJpZXNVWAwAZwDJTT90rU32ARQAhZDNDoIwEITv
G16lPwstpTyHJ26lLT8aKbZgjE8vSjQxMXEOk28me5gscgA3RhAqLyBdp5qxzendTz6NidpwZs3O
bONP30eT0hDm2UfqfLv2vY//DxafFmcWwy63EJ6BpbBG61n0O/xeAJtyjki4IFgcUNcc67ygSslK
yQZEqTUcwzDRNBt7OpsJviWxkiVvBTEKO2KdaIl2VUcQNUetrMFWQAbvVa+HZPAAUEsHCIfbVr2r
AAAAGwEAAFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAAAAAAKAAQAHF4b290ZXN0L3NvdXJjZS9yZXNv
dXJjZS8uc3ZuL3Byb3AtYmFzZS9VWAwArPfITf/ypU32ARQAUEsDBAoAAAAAACqgjT4AAAAAAAAA
AAAAAAAkABAAcXhvb3Rlc3Qvc291cmNlL3Jlc291cmNlLy5zdm4vcHJvcHMvVVgMAKz3yE3/8qVN
9gEUAFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAAAAAAKAAQAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJj
ZS8uc3ZuL3RleHQtYmFzZS9VWAwArPfITf/ypU32ARQAUEsDBAoAAAAAANRkkz4AAAAAAAAAAAAA
AAAiABAAcXhvb3Rlc3Qvc291cmNlL3Jlc291cmNlLy5zdm4vdG1wL1VYDACs98hNP3StTfYBFABQ
SwMECgAAAAAAKqCNPgAAAAAAAAAAAAAAACwAEABxeG9vdGVzdC9zb3VyY2UvcmVzb3VyY2UvLnN2
bi90bXAvcHJvcC1iYXNlL1VYDACs98hN//KlTfYBFABQSwMECgAAAAAAKqCNPgAAAAAAAAAAAAAA
ACgAEABxeG9vdGVzdC9zb3VyY2UvcmVzb3VyY2UvLnN2bi90bXAvcHJvcHMvVVgMAKz3yE3/8qVN
9gEUAFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAAAAAALAAQAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJj
ZS8uc3ZuL3RtcC90ZXh0LWJhc2UvVVgMAKz3yE3/8qVN9gEUAFBLAwQKAAAAAAAqoI0+AAAAAAAA
AAAAAAAAIgAQAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9xeG9vdGVzdC9VWAwAGwDJTf/ypU32
ARQAUEsDBAoAAAAAANRkkz4AAAAAAAAAAAAAAAAnABAAcXhvb3Rlc3Qvc291cmNlL3Jlc291cmNl
L3F4b290ZXN0Ly5zdm4vVVgMAKz3yE0/dK1N9gEUAFBLAwQUAAgACADUZJM+AAAAAAAAAAAAAAAA
LgAQAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9xeG9vdGVzdC8uc3ZuL2VudHJpZXNVWAwAZwDJ
TT90rU32ARQAlY7LTsQwDEX3Fr+SV5s0Sb+DVXduHm2BaTJJByG+ngwvCTQS4iysm9iyj+AAfisg
dddDfd5Hxlqlr2EPdavUpRObPjJr+ft/KVjrmnIOhfowX5YllL8HjlAPjwey80tK1wer6VJcYCV8
hq/GbRVodFwIwiUR/b2wIxdj11OtldFqAjlYCw9p3WnN6B5PuMNPlDBq4LMkqEUkzsuZWG8iEcJy
YbVDMUu4g6sBzfsCcXsK8PuqGqUalab8nQlMMH0MMVrT9nl0gzYYEa1tOt647r/KK1aSS8oVbtFJ
bZriG1BLBwjeZi0j3wAAALgBAABQSwMECgAAAAAAK6CNPgAAAAAAAAAAAAAAADEAEABxeG9vdGVz
dC9zb3VyY2UvcmVzb3VyY2UvcXhvb3Rlc3QvLnN2bi9wcm9wLWJhc2UvVVgMAKz3yE0B86VN9gEU
AFBLAwQUAAgACAAqoI0+AAAAAAAAAAAAAAAAQgAQAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9x
eG9vdGVzdC8uc3ZuL3Byb3AtYmFzZS90ZXN0LnBuZy5zdm4tYmFzZVVYDABnAMlN//KlTfYBFADz
VjA05iouy7PKzcxN1S2pLEjlClMwMuFKLCjIyUxOLMnMz9PPTy5JLdEtLilKTczlcvVz4QIAUEsH
CP8xJow3AAAANQAAAFBLAwQKAAAAAAAroI0+AAAAAAAAAAAAAAAALQAQAHF4b290ZXN0L3NvdXJj
ZS9yZXNvdXJjZS9xeG9vdGVzdC8uc3ZuL3Byb3BzL1VYDACs98hNAfOlTfYBFABQSwMECgAAAAAA
K6CNPgAAAAAAAAAAAAAAADEAEABxeG9vdGVzdC9zb3VyY2UvcmVzb3VyY2UvcXhvb3Rlc3QvLnN2
bi90ZXh0LWJhc2UvVVgMAKz3yE0B86VN9gEUAFBLAwQUAAgACAAqoI0+AAAAAAAAAAAAAAAAQgAQ
AHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9xeG9vdGVzdC8uc3ZuL3RleHQtYmFzZS90ZXN0LnBu
Zy5zdm4tYmFzZVVYDABnAMlNAPOlTfYBFAABrglR9olQTkcNChoKAAAADUlIRFIAAAAgAAAAIAgG
AAAAc3p69AAAAARzQklUCAgICHwIZIgAAAAJcEhZcwAACToAAAk6AfBkkkoAAAAZdEVYdFNvZnR3
YXJlAHd3dy5pbmtzY2FwZS5vcmeb7jwaAAAJK0lEQVRYhcWXe4xU1R3HP+feO3dmdh67O7Ozsy9Y
lt1ld1HQwKogsZaqVLFRoCgJNKW01pi2JsamplUatWkrSUFM7RtbY9XWmiparURiTDRdBAEFBHZ5
ue/3zu7s7Lzvvef0j13W1aVK9I+e5Je59yZzvp/z+33PSyil+H824/P+ceXKh412tyvi0qzUmdce
THzefsTFZqB+9SMRze3a4HabG8vCwcriYIFZXOg3MrmcjCcy9vDoRHI8mW1Jp9N/7HjtJ+8qxUV1
/JkAQiAa1+74aW119K4vX9EQDYf8WsaCnJVGqTGkjOI2DfweA8e2OPVh/8TeltYz4+n4+o5/bW3/
QgA1N22bFwgWvLhu1ZKmaCTlSWfaCBZ04hKDuN1nKSo0sFUVLcfvw5EKKSXFfpPyYje79x4aPNcV
29764j3bPxdAw7pH762vLr1v3aql0XhqmALjBaQzylDyS5QHXiBclKG0pJRY6gqOnP0Klq1jOxJI
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
l7000Ljq2khp+e3aeDKomx2GxzQNy7alZVlWJpPPZJMjh8Y797+aaN93FshPRW6G+ASQVTOO4rOO
5es3ra+PFIb/pmma9+iR9+9oaTnQBZiAawrYOF9HlzfktjITFlgzU2tPhTUFkAXSQF4pNcu5n3oz
EkKIKbHz4jMhBB9NRDVVU3tG5ABHfcbd76Ivp/8DblL9C9zx/wuOk61hJwmRcQAAAABJRU5ErkJg
glBLBwhzEuNnswkAAK4JAABQSwMECgAAAAAA1GSTPgAAAAAAAAAAAAAAACsAEABxeG9vdGVzdC9z
b3VyY2UvcmVzb3VyY2UvcXhvb3Rlc3QvLnN2bi90bXAvVVgMAKz3yE0/dK1N9gEUAFBLAwQKAAAA
AAAqoI0+AAAAAAAAAAAAAAAANQAQAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9xeG9vdGVzdC8u
c3ZuL3RtcC9wcm9wLWJhc2UvVVgMAKz3yE3/8qVN9gEUAFBLAwQKAAAAAAAqoI0+AAAAAAAAAAAA
AAAAMQAQAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9xeG9vdGVzdC8uc3ZuL3RtcC9wcm9wcy9V
WAwArPfITf/ypU32ARQAUEsDBAoAAAAAACugjT4AAAAAAAAAAAAAAAA1ABAAcXhvb3Rlc3Qvc291
cmNlL3Jlc291cmNlL3F4b290ZXN0Ly5zdm4vdG1wL3RleHQtYmFzZS9VWAwArPfITQHzpU32ARQA
UEsDBBQACAAIAL2FjT4AAAAAAAAAAAAAAAAqABAAcXhvb3Rlc3Qvc291cmNlL3Jlc291cmNlL3F4
b290ZXN0L3Rlc3QucG5nVVgMAGcAyU01xaVN9gEUAAGuCVH2iVBORw0KGgoAAAANSUhEUgAAACAA
AAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAJOgAACToB8GSSSgAAABl0RVh0
U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAkrSURBVFiFxZd7jFTVHcc/5947d2Z2Hrs7
s7OzL1iW3WV3UdDAqiCxlqpUsVGgKAk0pbTWmLYmxqamVRq1aStJQUztG1tj1daaKlqtRGJMNF0E
AQUEdnm57/fO7uzsvO+95/SPXdbVpUr0j57kl7n3JnO+n/P7fc9LKKX4fzbj8/5x5cqHjXa3K+LS
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
3EEhHy/E263Bsp0Jfv41ozajsVy+M0FvndK6N345DjhyCrFTUpMJ/dBhiP+T/gSlOdReAVBLBwiK
Ojmv3gAAAKoBAABQSwMECgAAAAAAKqCNPgAAAAAAAAAAAAAAACsAEABxeG9vdGVzdC9zb3VyY2Uv
dHJhbnNsYXRpb24vLnN2bi9wcm9wLWJhc2UvVVgMAKz3yE3/8qVN9gEUAFBLAwQKAAAAAAAqoI0+
AAAAAAAAAAAAAAAAJwAQAHF4b290ZXN0L3NvdXJjZS90cmFuc2xhdGlvbi8uc3ZuL3Byb3BzL1VY
DACs98hN//KlTfYBFABQSwMECgAAAAAAK6CNPgAAAAAAAAAAAAAAACsAEABxeG9vdGVzdC9zb3Vy
Y2UvdHJhbnNsYXRpb24vLnN2bi90ZXh0LWJhc2UvVVgMAKz3yE0B86VN9gEUAFBLAwQUAAgACAAq
oI0+AAAAAAAAAAAAAAAAPgAQAHF4b290ZXN0L3NvdXJjZS90cmFuc2xhdGlvbi8uc3ZuL3RleHQt
YmFzZS9yZWFkbWUudHh0LnN2bi1iYXNlVVgMAGcAyU0A86VN9gEUAE3MMQ6AIAxG4Z1T/Ju6cBov
gIihhLSkQAy3t6P7996ZqeMmTXGILrxUK6LwCMQYGrjXMEgYu29y4KGaOoRjwpIJnYZycttPbihy
wWoDiqZSbO2d+wBQSwcIkXvzZFUAAABpAAAAUEsDBAoAAAAAANRkkz4AAAAAAAAAAAAAAAAlABAA
cXhvb3Rlc3Qvc291cmNlL3RyYW5zbGF0aW9uLy5zdm4vdG1wL1VYDACs98hNP3StTfYBFABQSwME
CgAAAAAAKqCNPgAAAAAAAAAAAAAAAC8AEABxeG9vdGVzdC9zb3VyY2UvdHJhbnNsYXRpb24vLnN2
bi90bXAvcHJvcC1iYXNlL1VYDACs98hN//KlTfYBFABQSwMECgAAAAAAKqCNPgAAAAAAAAAAAAAA
ACsAEABxeG9vdGVzdC9zb3VyY2UvdHJhbnNsYXRpb24vLnN2bi90bXAvcHJvcHMvVVgMAKz3yE3/
8qVN9gEUAFBLAwQKAAAAAAAroI0+AAAAAAAAAAAAAAAALwAQAHF4b290ZXN0L3NvdXJjZS90cmFu
c2xhdGlvbi8uc3ZuL3RtcC90ZXh0LWJhc2UvVVgMAKz3yE0B86VN9gEUAFBLAwQUAAgACAC9hY0+
AAAAAAAAAAAAAAAAJgAQAHF4b290ZXN0L3NvdXJjZS90cmFuc2xhdGlvbi9yZWFkbWUudHh0VVgM
AGcAyU01xaVN9gEUAE3MMQ6AIAxG4Z1T/Ju6cBovgIihhLSkQAy3t6P7996ZqeMmTXGILrxUK6Lw
CMQYGrjXMEgYu29y4KGaOoRjwpIJnYZycttPbihywWoDiqZSbO2d+wBQSwcIkXvzZFUAAABpAAAA
UEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAAAAkADAAAAAAAAAAAQO1BAAAAAHF4b290ZXN0L1VY
CAAbAMlN//KlTVBLAQIVAwoAAAAAANRkkz4AAAAAAAAAAAAAAAAOAAwAAAAAAAAAAEDtQTcAAABx
eG9vdGVzdC8uc3ZuL1VYCACs98hNP3StTVBLAQIVAxQACAAIANRkkz6RXQGNsgEAAMIEAAAVAAwA
AAAAAAAAAEAkgXMAAABxeG9vdGVzdC8uc3ZuL2VudHJpZXNVWAgAZwDJTT90rU1QSwECFQMKAAAA
AAAroI0+AAAAAAAAAAAAAAAAGAAMAAAAAAAAAABA7UF4AgAAcXhvb3Rlc3QvLnN2bi9wcm9wLWJh
c2UvVVgIAKz3yE0B86VNUEsBAhUDFAAIAAgAKqCNPimLi8ogAAAAHgAAACwADAAAAAAAAAAAQCSB
vgIAAHF4b290ZXN0Ly5zdm4vcHJvcC1iYXNlL2dlbmVyYXRlLnB5LnN2bi1iYXNlVVgIAGcAyU3/
8qVNUEsBAhUDCgAAAAAAK6CNPgAAAAAAAAAAAAAAABQADAAAAAAAAAAAQO1BSAMAAHF4b290ZXN0
Ly5zdm4vcHJvcHMvVVgIAKz3yE0B86VNUEsBAhUDCgAAAAAAK6CNPgAAAAAAAAAAAAAAABgADAAA
AAAAAAAAQO1BigMAAHF4b290ZXN0Ly5zdm4vdGV4dC1iYXNlL1VYCACs98hNAfOlTVBLAQIVAxQA
CAAIACqgjT6wDoDXtwEAAIgDAAAsAAwAAAAAAAAAAEAkgdADAABxeG9vdGVzdC8uc3ZuL3RleHQt
YmFzZS9jb25maWcuanNvbi5zdm4tYmFzZVVYCABnAMlNAPOlTVBLAQIVAxQACAAIACqgjT4+oWj/
xQMAAEoIAAAsAAwAAAAAAAAAAEAkgfEFAABxeG9vdGVzdC8uc3ZuL3RleHQtYmFzZS9nZW5lcmF0
ZS5weS5zdm4tYmFzZVVYCABnAMlNAPOlTVBLAQIVAxQACAAIACqgjT5pzS/6SQEAAKkCAAAuAAwA
AAAAAAAAAEAkgSAKAABxeG9vdGVzdC8uc3ZuL3RleHQtYmFzZS9NYW5pZmVzdC5qc29uLnN2bi1i
YXNlVVgIAGcAyU0A86VNUEsBAhUDFAAIAAgAKqCNPoDmhV0qBQAAYA4AADIADAAAAAAAAAAAQCSB
1QsAAHF4b290ZXN0Ly5zdm4vdGV4dC1iYXNlL29vLmxvYWRlci50bXBsLmpzLnN2bi1iYXNlVVgI
AGcAyU0A86VNUEsBAhUDFAAIAAgAKqCNPhQD9QsxAgAAQwcAACoADAAAAAAAAAAAQCSBbxEAAHF4
b290ZXN0Ly5zdm4vdGV4dC1iYXNlL3F4b28uanNvbi5zdm4tYmFzZVVYCABnAMlNAPOlTVBLAQIV
AxQACAAIACqgjT5mMy5Z8wAAANkBAAArAAwAAAAAAAAAAEAkgQgUAABxeG9vdGVzdC8uc3ZuL3Rl
eHQtYmFzZS9yZWFkbWUudHh0LnN2bi1iYXNlVVgIAGcAyU0A86VNUEsBAhUDCgAAAAAA1GSTPgAA
AAAAAAAAAAAAABIADAAAAAAAAAAAQO1BZBUAAHF4b290ZXN0Ly5zdm4vdG1wL1VYCACs98hNP3St
TVBLAQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAAcAAwAAAAAAAAAAEDtQaQVAABxeG9vdGVzdC8u
c3ZuL3RtcC9wcm9wLWJhc2UvVVgIAKz3yE3/8qVNUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAA
ABgADAAAAAAAAAAAQO1B7hUAAHF4b290ZXN0Ly5zdm4vdG1wL3Byb3BzL1VYCACs98hN//KlTVBL
AQIVAwoAAAAAACugjT4AAAAAAAAAAAAAAAAcAAwAAAAAAAAAAEDtQTQWAABxeG9vdGVzdC8uc3Zu
L3RtcC90ZXh0LWJhc2UvVVgIAKz3yE0B86VNUEsBAhUDFAAIAAgAMIaNPrAOgNe3AQAAiAMAABQA
DAAAAAAAAAAAQKSBfhYAAHF4b290ZXN0L2NvbmZpZy5qc29uVVgIAGcAyU0LxqVNUEsBAhUDFAAI
AAgA24WNPj6haP/FAwAASggAABQADAAAAAAAAAAAQO2BhxgAAHF4b290ZXN0L2dlbmVyYXRlLnB5
VVgIAGcAyU1txaVNUEsBAhUDFAAIAAgA24WNPmnNL/pJAQAAqQIAABYADAAAAAAAAAAAQKSBnhwA
AHF4b290ZXN0L01hbmlmZXN0Lmpzb25VWAgAZwDJTW3FpU1QSwECFQMUAAgACACrko0+gOaFXSoF
AABgDgAAGgAMAAAAAAAAAABApIE7HgAAcXhvb3Rlc3Qvb28ubG9hZGVyLnRtcGwuanNVWAgAZwDJ
TZHbpU1QSwECFQMUAAgACADQUKo+9kiacTACAAA4BwAAEgAMAAAAAAAAAABApIG9IwAAcXhvb3Rl
c3QvcXhvby5qc29uVVgIAGcAyU0YAMlNUEsBAhUDFAAIAAgAvYWNPmYzLlnzAAAA2QEAABMADAAA
AAAAAAAAQKSBPSYAAHF4b290ZXN0L3JlYWRtZS50eHRVWAgAZwDJTTXFpU1QSwECFQMKAAAAAAAq
oI0+AAAAAAAAAAAAAAAAEAAMAAAAAAAAAABA7UGBJwAAcXhvb3Rlc3Qvc291cmNlL1VYCAAbAMlN
//KlTVBLAQIVAwoAAAAAANRkkz4AAAAAAAAAAAAAAAAVAAwAAAAAAAAAAEDtQb8nAABxeG9vdGVz
dC9zb3VyY2UvLnN2bi9VWAgArPfITT90rU1QSwECFQMUAAgACADUZJM+V3F5APIAAADYAQAAHAAM
AAAAAAAAAABAJIECKAAAcXhvb3Rlc3Qvc291cmNlLy5zdm4vZW50cmllc1VYCABnAMlNP3StTVBL
AQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAAfAAwAAAAAAAAAAEDtQU4pAABxeG9vdGVzdC9zb3Vy
Y2UvLnN2bi9wcm9wLWJhc2UvVVgIAKz3yE3/8qVNUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAA
ABsADAAAAAAAAAAAQO1BmykAAHF4b290ZXN0L3NvdXJjZS8uc3ZuL3Byb3BzL1VYCACs98hN//Kl
TVBLAQIVAwoAAAAAACugjT4AAAAAAAAAAAAAAAAfAAwAAAAAAAAAAEDtQeQpAABxeG9vdGVzdC9z
b3VyY2UvLnN2bi90ZXh0LWJhc2UvVVgIAKz3yE0B86VNUEsBAhUDFAAIAAgAKqCNPlJlE5G8AAAA
FQEAADIADAAAAAAAAAAAQCSBMSoAAHF4b290ZXN0L3NvdXJjZS8uc3ZuL3RleHQtYmFzZS9pbmRl
eC5odG1sLnN2bi1iYXNlVVgIAGcAyU0A86VNUEsBAhUDCgAAAAAA1GSTPgAAAAAAAAAAAAAAABkA
DAAAAAAAAAAAQO1BXSsAAHF4b290ZXN0L3NvdXJjZS8uc3ZuL3RtcC9VWAgArPfITT90rU1QSwEC
FQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAAIwAMAAAAAAAAAABA7UGkKwAAcXhvb3Rlc3Qvc291cmNl
Ly5zdm4vdG1wL3Byb3AtYmFzZS9VWAgArPfITf/ypU1QSwECFQMKAAAAAAAqoI0+AAAAAAAAAAAA
AAAAHwAMAAAAAAAAAABA7UH1KwAAcXhvb3Rlc3Qvc291cmNlLy5zdm4vdG1wL3Byb3BzL1VYCACs
98hN//KlTVBLAQIVAwoAAAAAACugjT4AAAAAAAAAAAAAAAAjAAwAAAAAAAAAAEDtQUIsAABxeG9v
dGVzdC9zb3VyY2UvLnN2bi90bXAvdGV4dC1iYXNlL1VYCACs98hNAfOlTVBLAQIVAwoAAAAAACqg
jT4AAAAAAAAAAAAAAAAWAAwAAAAAAAAAAEDtQZMsAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvVVgI
ABsAyU3/8qVNUEsBAhUDCgAAAAAA1GSTPgAAAAAAAAAAAAAAABsADAAAAAAAAAAAQO1B1ywAAHF4
b290ZXN0L3NvdXJjZS9jbGFzcy8uc3ZuL1VYCACs98hNP3StTVBLAQIVAxQACAAIANRkkz7EoFY9
rAAAABgBAAAiAAwAAAAAAAAAAEAkgSAtAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvLnN2bi9lbnRy
aWVzVVgIAGcAyU0/dK1NUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAAACUADAAAAAAAAAAAQO1B
LC4AAHF4b290ZXN0L3NvdXJjZS9jbGFzcy8uc3ZuL3Byb3AtYmFzZS9VWAgArPfITf/ypU1QSwEC
FQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAAIQAMAAAAAAAAAABA7UF/LgAAcXhvb3Rlc3Qvc291cmNl
L2NsYXNzLy5zdm4vcHJvcHMvVVgIAKz3yE3/8qVNUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAA
ACUADAAAAAAAAAAAQO1Bzi4AAHF4b290ZXN0L3NvdXJjZS9jbGFzcy8uc3ZuL3RleHQtYmFzZS9V
WAgArPfITf/ypU1QSwECFQMKAAAAAADUZJM+AAAAAAAAAAAAAAAAHwAMAAAAAAAAAABA7UEhLwAA
cXhvb3Rlc3Qvc291cmNlL2NsYXNzLy5zdm4vdG1wL1VYCACs98hNP3StTVBLAQIVAwoAAAAAACqg
jT4AAAAAAAAAAAAAAAApAAwAAAAAAAAAAEDtQW4vAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvLnN2
bi90bXAvcHJvcC1iYXNlL1VYCACs98hN//KlTVBLAQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAAl
AAwAAAAAAAAAAEDtQcUvAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvLnN2bi90bXAvcHJvcHMvVVgI
AKz3yE3/8qVNUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAAACkADAAAAAAAAAAAQO1BGDAAAHF4
b290ZXN0L3NvdXJjZS9jbGFzcy8uc3ZuL3RtcC90ZXh0LWJhc2UvVVgIAKz3yE3/8qVNUEsBAhUD
CgAAAAAArFCqPgAAAAAAAAAAAAAAAB8ADAAAAAAAAAAAQO1BbzAAAHF4b290ZXN0L3NvdXJjZS9j
bGFzcy9xeG9vdGVzdC9VWAgAGwDJTdP/yE1QSwECFQMKAAAAAACsUKo+AAAAAAAAAAAAAAAAJAAM
AAAAAAAAAABA7UG8MAAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0Ly5zdm4vVVgIAKz3
yE3T/8hNUEsBAhUDFAAIAAgArFCqPq0QYeRHAQAAcgMAACsADAAAAAAAAAAAQCSBDjEAAHF4b290
ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC8uc3ZuL2VudHJpZXNVWAgAZwDJTdP/yE1QSwECFQMK
AAAAAAAqoI0+AAAAAAAAAAAAAAAALgAMAAAAAAAAAABA7UG+MgAAcXhvb3Rlc3Qvc291cmNlL2Ns
YXNzL3F4b290ZXN0Ly5zdm4vcHJvcC1iYXNlL1VYCACs98hN//KlTVBLAQIVAwoAAAAAACqgjT4A
AAAAAAAAAAAAAAAqAAwAAAAAAAAAAEDtQRozAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rl
c3QvLnN2bi9wcm9wcy9VWAgArPfITf/ypU1QSwECFQMKAAAAAACsUKo+AAAAAAAAAAAAAAAALgAM
AAAAAAAAAABA7UFyMwAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0Ly5zdm4vdGV4dC1i
YXNlL1VYCACs98hN0//ITVBLAQIVAxQACAAIAKxQqj4H71o69wAAAJ0CAABAAAwAAAAAAAAAAEAk
gc4zAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvLnN2bi90ZXh0LWJhc2UvTmF0aXZl
LmpzLnN2bi1iYXNlVVgIAGcAyU3T/8hNUEsBAhUDFAAIAAgAKqCNPgfvWjr3AAAAnQIAAEsADAAA
AAAAAAAAQCSBQzUAAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC8uc3ZuL3RleHQtYmFz
ZS9TZXJ2ZXJBcHBsaWNhdGlvbi5qcy5zdm4tYmFzZVVYCABnAMlNAPOlTVBLAQIVAxQACAAIACqg
jT4ah30LNQQAAG0MAABEAAwAAAAAAAAAAEAkgcM2AABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhv
b3Rlc3QvLnN2bi90ZXh0LWJhc2UvU2VydmVySW5pdC5qcy5zdm4tYmFzZVVYCABnAMlNAPOlTVBL
AQIVAwoAAAAAAKxQqj4AAAAAAAAAAAAAAAAoAAwAAAAAAAAAAEDtQXo7AABxeG9vdGVzdC9zb3Vy
Y2UvY2xhc3MvcXhvb3Rlc3QvLnN2bi90bXAvVVgIAKz3yE3T/8hNUEsBAhUDCgAAAAAAKqCNPgAA
AAAAAAAAAAAAADIADAAAAAAAAAAAQO1B0DsAAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVz
dC8uc3ZuL3RtcC9wcm9wLWJhc2UvVVgIAKz3yE3/8qVNUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAA
AAAAAC4ADAAAAAAAAAAAQO1BMDwAAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC8uc3Zu
L3RtcC9wcm9wcy9VWAgArPfITf/ypU1QSwECFQMKAAAAAAAroI0+AAAAAAAAAAAAAAAAMgAMAAAA
AAAAAABA7UGMPAAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0Ly5zdm4vdG1wL3RleHQt
YmFzZS9VWAgArPfITQHzpU1QSwECFQMUAAgACAC0UKo+L/rg7wYBAAD1AgAAKAAMAAAAAAAAAABA
pIHsPAAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L05hdGl2ZS5qc1VYCABnAMlN5P/I
TVBLAQIVAxQACAAIANiYjT4ah30LNQQAAG0MAAAsAAwAAAAAAAAAAECkgVg+AABxeG9vdGVzdC9z
b3VyY2UvY2xhc3MvcXhvb3Rlc3QvU2VydmVySW5pdC5qc1VYCABnAMlNN+alTVBLAQIVAwoAAAAA
ACqgjT4AAAAAAAAAAAAAAAAqAAwAAAAAAAAAAEDtQfdCAABxeG9vdGVzdC9zb3VyY2UvY2xhc3Mv
cXhvb3Rlc3Qvc2ltdWxhdGlvbi9VWAgAGwDJTf/ypU1QSwECFQMKAAAAAADUZJM+AAAAAAAAAAAA
AAAALwAMAAAAAAAAAABA7UFPQwAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3NpbXVs
YXRpb24vLnN2bi9VWAgArPfITT90rU1QSwECFQMUAAgACADUZJM+tLs+9uUAAADAAQAANgAMAAAA
AAAAAABAJIGsQwAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3NpbXVsYXRpb24vLnN2
bi9lbnRyaWVzVVgIAGcAyU0/dK1NUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAAADkADAAAAAAA
AAAAQO1BBUUAAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC9zaW11bGF0aW9uLy5zdm4v
cHJvcC1iYXNlL1VYCACs98hN//KlTVBLAQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAA1AAwAAAAA
AAAAAEDtQWxFAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3Qvc2ltdWxhdGlvbi8uc3Zu
L3Byb3BzL1VYCACs98hN//KlTVBLAQIVAwoAAAAAACugjT4AAAAAAAAAAAAAAAA5AAwAAAAAAAAA
AEDtQc9FAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3Qvc2ltdWxhdGlvbi8uc3ZuL3Rl
eHQtYmFzZS9VWAgArPfITQHzpU1QSwECFQMUAAgACAAqoI0+73gyav0BAADNBAAAUwAMAAAAAAAA
AABAJIE2RgAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3NpbXVsYXRpb24vLnN2bi90
ZXh0LWJhc2UvRGVtb1NpbXVsYXRpb24uanMuc3ZuLWJhc2VVWAgAZwDJTQDzpU1QSwECFQMKAAAA
AADUZJM+AAAAAAAAAAAAAAAAMwAMAAAAAAAAAABA7UHESAAAcXhvb3Rlc3Qvc291cmNlL2NsYXNz
L3F4b290ZXN0L3NpbXVsYXRpb24vLnN2bi90bXAvVVgIAKz3yE0/dK1NUEsBAhUDCgAAAAAAKqCN
PgAAAAAAAAAAAAAAAD0ADAAAAAAAAAAAQO1BJUkAAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9v
dGVzdC9zaW11bGF0aW9uLy5zdm4vdG1wL3Byb3AtYmFzZS9VWAgArPfITf/ypU1QSwECFQMKAAAA
AAAqoI0+AAAAAAAAAAAAAAAAOQAMAAAAAAAAAABA7UGQSQAAcXhvb3Rlc3Qvc291cmNlL2NsYXNz
L3F4b290ZXN0L3NpbXVsYXRpb24vLnN2bi90bXAvcHJvcHMvVVgIAKz3yE3/8qVNUEsBAhUDCgAA
AAAAK6CNPgAAAAAAAAAAAAAAAD0ADAAAAAAAAAAAQO1B90kAAHF4b290ZXN0L3NvdXJjZS9jbGFz
cy9xeG9vdGVzdC9zaW11bGF0aW9uLy5zdm4vdG1wL3RleHQtYmFzZS9VWAgArPfITQHzpU1QSwEC
FQMUAAgACADbhY0+73gyav0BAADNBAAAOwAMAAAAAAAAAABApIFiSgAAcXhvb3Rlc3Qvc291cmNl
L2NsYXNzL3F4b290ZXN0L3NpbXVsYXRpb24vRGVtb1NpbXVsYXRpb24uanNVWAgAZwDJTW3FpU1Q
SwECFQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAAJAAMAAAAAAAAAABA7UHYTAAAcXhvb3Rlc3Qvc291
cmNlL2NsYXNzL3F4b290ZXN0L3Rlc3QvVVgIABsAyU3/8qVNUEsBAhUDCgAAAAAA1GSTPgAAAAAA
AAAAAAAAACkADAAAAAAAAAAAQO1BKk0AAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC90
ZXN0Ly5zdm4vVVgIAKz3yE0/dK1NUEsBAhUDFAAIAAgA1GSTPjQRGoDfAAAAtAEAADAADAAAAAAA
AAAAQCSBgU0AAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC90ZXN0Ly5zdm4vZW50cmll
c1VYCABnAMlNP3StTVBLAQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAAzAAwAAAAAAAAAAEDtQc5O
AABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3QvdGVzdC8uc3ZuL3Byb3AtYmFzZS9VWAgA
rPfITf/ypU1QSwECFQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAALwAMAAAAAAAAAABA7UEvTwAAcXhv
b3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3Rlc3QvLnN2bi9wcm9wcy9VWAgArPfITf/ypU1Q
SwECFQMKAAAAAAAroI0+AAAAAAAAAAAAAAAAMwAMAAAAAAAAAABA7UGMTwAAcXhvb3Rlc3Qvc291
cmNlL2NsYXNzL3F4b290ZXN0L3Rlc3QvLnN2bi90ZXh0LWJhc2UvVVgIAKz3yE0B86VNUEsBAhUD
FAAIAAgAKqCNPvNPkUGeAgAA+gUAAEcADAAAAAAAAAAAQCSB7U8AAHF4b290ZXN0L3NvdXJjZS9j
bGFzcy9xeG9vdGVzdC90ZXN0Ly5zdm4vdGV4dC1iYXNlL0RlbW9UZXN0LmpzLnN2bi1iYXNlVVgI
AGcAyU0A86VNUEsBAhUDCgAAAAAA1GSTPgAAAAAAAAAAAAAAAC0ADAAAAAAAAAAAQO1BEFMAAHF4
b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC90ZXN0Ly5zdm4vdG1wL1VYCACs98hNP3StTVBL
AQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAA3AAwAAAAAAAAAAEDtQWtTAABxeG9vdGVzdC9zb3Vy
Y2UvY2xhc3MvcXhvb3Rlc3QvdGVzdC8uc3ZuL3RtcC9wcm9wLWJhc2UvVVgIAKz3yE3/8qVNUEsB
AhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAAADMADAAAAAAAAAAAQO1B0FMAAHF4b290ZXN0L3NvdXJj
ZS9jbGFzcy9xeG9vdGVzdC90ZXN0Ly5zdm4vdG1wL3Byb3BzL1VYCACs98hN//KlTVBLAQIVAwoA
AAAAACugjT4AAAAAAAAAAAAAAAA3AAwAAAAAAAAAAEDtQTFUAABxeG9vdGVzdC9zb3VyY2UvY2xh
c3MvcXhvb3Rlc3QvdGVzdC8uc3ZuL3RtcC90ZXh0LWJhc2UvVVgIAKz3yE0B86VNUEsBAhUDFAAI
AAgA24WNPvNPkUGeAgAA+gUAAC8ADAAAAAAAAAAAQKSBllQAAHF4b290ZXN0L3NvdXJjZS9jbGFz
cy9xeG9vdGVzdC90ZXN0L0RlbW9UZXN0LmpzVVgIAGcAyU1txaVNUEsBAhUDCgAAAAAAKqCNPgAA
AAAAAAAAAAAAACUADAAAAAAAAAAAQO1BoVcAAHF4b290ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVz
dC90aGVtZS9VWAgAGwDJTf/ypU1QSwECFQMKAAAAAADUZJM+AAAAAAAAAAAAAAAAKgAMAAAAAAAA
AABA7UH0VwAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lLy5zdm4vVVgIAKz3
yE0/dK1NUEsBAhUDFAAIAAgA1GSTPo0qrrZlAQAAHgQAADEADAAAAAAAAAAAQCSBTFgAAHF4b290
ZXN0L3NvdXJjZS9jbGFzcy9xeG9vdGVzdC90aGVtZS8uc3ZuL2VudHJpZXNVWAgAZwDJTT90rU1Q
SwECFQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAANAAMAAAAAAAAAABA7UEgWgAAcXhvb3Rlc3Qvc291
cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lLy5zdm4vcHJvcC1iYXNlL1VYCACs98hN//KlTVBLAQIV
AwoAAAAAACqgjT4AAAAAAAAAAAAAAAAwAAwAAAAAAAAAAEDtQYJaAABxeG9vdGVzdC9zb3VyY2Uv
Y2xhc3MvcXhvb3Rlc3QvdGhlbWUvLnN2bi9wcm9wcy9VWAgArPfITf/ypU1QSwECFQMKAAAAAAAr
oI0+AAAAAAAAAAAAAAAANAAMAAAAAAAAAABA7UHgWgAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4
b290ZXN0L3RoZW1lLy5zdm4vdGV4dC1iYXNlL1VYCACs98hNAfOlTVBLAQIVAxQACAAIACqgjT6K
7DsugwAAADUBAABKAAwAAAAAAAAAAEAkgUJbAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rl
c3QvdGhlbWUvLnN2bi90ZXh0LWJhc2UvQXBwZWFyYW5jZS5qcy5zdm4tYmFzZVVYCABnAMlNAPOl
TVBLAQIVAxQACAAIACqgjT5tsjl2fwAAACYBAABFAAwAAAAAAAAAAEAkgU1cAABxeG9vdGVzdC9z
b3VyY2UvY2xhc3MvcXhvb3Rlc3QvdGhlbWUvLnN2bi90ZXh0LWJhc2UvQ29sb3IuanMuc3ZuLWJh
c2VVWAgAZwDJTQDzpU1QSwECFQMUAAgACAAqoI0+Oq1T+oQAAAA1AQAASgAMAAAAAAAAAABAJIFP
XQAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lLy5zdm4vdGV4dC1iYXNlL0Rl
Y29yYXRpb24uanMuc3ZuLWJhc2VVWAgAZwDJTQDzpU1QSwECFQMUAAgACAAqoI0+6QiXtX4AAAAj
AQAARAAMAAAAAAAAAABAJIFbXgAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1l
Ly5zdm4vdGV4dC1iYXNlL0ZvbnQuanMuc3ZuLWJhc2VVWAgAZwDJTQDzpU1QSwECFQMUAAgACAAq
oI0+Gql+RKgAAAC6AQAARQAMAAAAAAAAAABAJIFbXwAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4
b290ZXN0L3RoZW1lLy5zdm4vdGV4dC1iYXNlL1RoZW1lLmpzLnN2bi1iYXNlVVgIAGcAyU0A86VN
UEsBAhUDCgAAAAAA1GSTPgAAAAAAAAAAAAAAAC4ADAAAAAAAAAAAQO1BhmAAAHF4b290ZXN0L3Nv
dXJjZS9jbGFzcy9xeG9vdGVzdC90aGVtZS8uc3ZuL3RtcC9VWAgArPfITT90rU1QSwECFQMKAAAA
AAAqoI0+AAAAAAAAAAAAAAAAOAAMAAAAAAAAAABA7UHiYAAAcXhvb3Rlc3Qvc291cmNlL2NsYXNz
L3F4b290ZXN0L3RoZW1lLy5zdm4vdG1wL3Byb3AtYmFzZS9VWAgArPfITf/ypU1QSwECFQMKAAAA
AAAqoI0+AAAAAAAAAAAAAAAANAAMAAAAAAAAAABA7UFIYQAAcXhvb3Rlc3Qvc291cmNlL2NsYXNz
L3F4b290ZXN0L3RoZW1lLy5zdm4vdG1wL3Byb3BzL1VYCACs98hN//KlTVBLAQIVAwoAAAAAACug
jT4AAAAAAAAAAAAAAAA4AAwAAAAAAAAAAEDtQaphAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhv
b3Rlc3QvdGhlbWUvLnN2bi90bXAvdGV4dC1iYXNlL1VYCACs98hNAfOlTVBLAQIVAxQACAAIANuF
jT6K7DsugwAAADUBAAAyAAwAAAAAAAAAAECkgRBiAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhv
b3Rlc3QvdGhlbWUvQXBwZWFyYW5jZS5qc1VYCABnAMlNbcWlTVBLAQIVAxQACAAIANuFjT5tsjl2
fwAAACYBAAAtAAwAAAAAAAAAAECkgQNjAABxeG9vdGVzdC9zb3VyY2UvY2xhc3MvcXhvb3Rlc3Qv
dGhlbWUvQ29sb3IuanNVWAgAZwDJTW3FpU1QSwECFQMUAAgACADbhY0+Oq1T+oQAAAA1AQAAMgAM
AAAAAAAAAABApIHtYwAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lL0RlY29y
YXRpb24uanNVWAgAZwDJTW3FpU1QSwECFQMUAAgACADbhY0+6QiXtX4AAAAjAQAALAAMAAAAAAAA
AABApIHhZAAAcXhvb3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lL0ZvbnQuanNVWAgA
ZwDJTW3FpU1QSwECFQMUAAgACADbhY0+Gql+RKgAAAC6AQAALQAMAAAAAAAAAABApIHJZQAAcXhv
b3Rlc3Qvc291cmNlL2NsYXNzL3F4b290ZXN0L3RoZW1lL1RoZW1lLmpzVVgIAGcAyU1txaVNUEsB
AhUDFAAIAAgA24WNPlJlE5G8AAAAFQEAABoADAAAAAAAAAAAQKSB3GYAAHF4b290ZXN0L3NvdXJj
ZS9pbmRleC5odG1sVVgIAGcAyU1txaVNUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAAABkADAAA
AAAAAAAAQO1B8GcAAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9VWAgAGwDJTf/ypU1QSwECFQMK
AAAAAADUZJM+AAAAAAAAAAAAAAAAHgAMAAAAAAAAAABA7UE3aAAAcXhvb3Rlc3Qvc291cmNlL3Jl
c291cmNlLy5zdm4vVVgIAKz3yE0/dK1NUEsBAhUDFAAIAAgA1GSTPofbVr2rAAAAGwEAACUADAAA
AAAAAAAAQCSBg2gAAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS8uc3ZuL2VudHJpZXNVWAgAZwDJ
TT90rU1QSwECFQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAAKAAMAAAAAAAAAABA7UGRaQAAcXhvb3Rl
c3Qvc291cmNlL3Jlc291cmNlLy5zdm4vcHJvcC1iYXNlL1VYCACs98hN//KlTVBLAQIVAwoAAAAA
ACqgjT4AAAAAAAAAAAAAAAAkAAwAAAAAAAAAAEDtQedpAABxeG9vdGVzdC9zb3VyY2UvcmVzb3Vy
Y2UvLnN2bi9wcm9wcy9VWAgArPfITf/ypU1QSwECFQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAAKAAM
AAAAAAAAAABA7UE5agAAcXhvb3Rlc3Qvc291cmNlL3Jlc291cmNlLy5zdm4vdGV4dC1iYXNlL1VY
CACs98hN//KlTVBLAQIVAwoAAAAAANRkkz4AAAAAAAAAAAAAAAAiAAwAAAAAAAAAAEDtQY9qAABx
eG9vdGVzdC9zb3VyY2UvcmVzb3VyY2UvLnN2bi90bXAvVVgIAKz3yE0/dK1NUEsBAhUDCgAAAAAA
KqCNPgAAAAAAAAAAAAAAACwADAAAAAAAAAAAQO1B32oAAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJj
ZS8uc3ZuL3RtcC9wcm9wLWJhc2UvVVgIAKz3yE3/8qVNUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAA
AAAAACgADAAAAAAAAAAAQO1BOWsAAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS8uc3ZuL3RtcC9w
cm9wcy9VWAgArPfITf/ypU1QSwECFQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAALAAMAAAAAAAAAABA
7UGPawAAcXhvb3Rlc3Qvc291cmNlL3Jlc291cmNlLy5zdm4vdG1wL3RleHQtYmFzZS9VWAgArPfI
Tf/ypU1QSwECFQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAAIgAMAAAAAAAAAABA7UHpawAAcXhvb3Rl
c3Qvc291cmNlL3Jlc291cmNlL3F4b290ZXN0L1VYCAAbAMlN//KlTVBLAQIVAwoAAAAAANRkkz4A
AAAAAAAAAAAAAAAnAAwAAAAAAAAAAEDtQTlsAABxeG9vdGVzdC9zb3VyY2UvcmVzb3VyY2UvcXhv
b3Rlc3QvLnN2bi9VWAgArPfITT90rU1QSwECFQMUAAgACADUZJM+3mYtI98AAAC4AQAALgAMAAAA
AAAAAABAJIGObAAAcXhvb3Rlc3Qvc291cmNlL3Jlc291cmNlL3F4b290ZXN0Ly5zdm4vZW50cmll
c1VYCABnAMlNP3StTVBLAQIVAwoAAAAAACugjT4AAAAAAAAAAAAAAAAxAAwAAAAAAAAAAEDtQdlt
AABxeG9vdGVzdC9zb3VyY2UvcmVzb3VyY2UvcXhvb3Rlc3QvLnN2bi9wcm9wLWJhc2UvVVgIAKz3
yE0B86VNUEsBAhUDFAAIAAgAKqCNPv8xJow3AAAANQAAAEIADAAAAAAAAAAAQCSBOG4AAHF4b290
ZXN0L3NvdXJjZS9yZXNvdXJjZS9xeG9vdGVzdC8uc3ZuL3Byb3AtYmFzZS90ZXN0LnBuZy5zdm4t
YmFzZVVYCABnAMlN//KlTVBLAQIVAwoAAAAAACugjT4AAAAAAAAAAAAAAAAtAAwAAAAAAAAAAEDt
Qe9uAABxeG9vdGVzdC9zb3VyY2UvcmVzb3VyY2UvcXhvb3Rlc3QvLnN2bi9wcm9wcy9VWAgArPfI
TQHzpU1QSwECFQMKAAAAAAAroI0+AAAAAAAAAAAAAAAAMQAMAAAAAAAAAABA7UFKbwAAcXhvb3Rl
c3Qvc291cmNlL3Jlc291cmNlL3F4b290ZXN0Ly5zdm4vdGV4dC1iYXNlL1VYCACs98hNAfOlTVBL
AQIVAxQACAAIACqgjT5zEuNnswkAAK4JAABCAAwAAAAAAAAAAEAkgalvAABxeG9vdGVzdC9zb3Vy
Y2UvcmVzb3VyY2UvcXhvb3Rlc3QvLnN2bi90ZXh0LWJhc2UvdGVzdC5wbmcuc3ZuLWJhc2VVWAgA
ZwDJTQDzpU1QSwECFQMKAAAAAADUZJM+AAAAAAAAAAAAAAAAKwAMAAAAAAAAAABA7UHceQAAcXhv
b3Rlc3Qvc291cmNlL3Jlc291cmNlL3F4b290ZXN0Ly5zdm4vdG1wL1VYCACs98hNP3StTVBLAQIV
AwoAAAAAACqgjT4AAAAAAAAAAAAAAAA1AAwAAAAAAAAAAEDtQTV6AABxeG9vdGVzdC9zb3VyY2Uv
cmVzb3VyY2UvcXhvb3Rlc3QvLnN2bi90bXAvcHJvcC1iYXNlL1VYCACs98hN//KlTVBLAQIVAwoA
AAAAACqgjT4AAAAAAAAAAAAAAAAxAAwAAAAAAAAAAEDtQZh6AABxeG9vdGVzdC9zb3VyY2UvcmVz
b3VyY2UvcXhvb3Rlc3QvLnN2bi90bXAvcHJvcHMvVVgIAKz3yE3/8qVNUEsBAhUDCgAAAAAAK6CN
PgAAAAAAAAAAAAAAADUADAAAAAAAAAAAQO1B93oAAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9x
eG9vdGVzdC8uc3ZuL3RtcC90ZXh0LWJhc2UvVVgIAKz3yE0B86VNUEsBAhUDFAAIAAgAvYWNPnMS
42ezCQAArgkAACoADAAAAAAAAAAAQKSBWnsAAHF4b290ZXN0L3NvdXJjZS9yZXNvdXJjZS9xeG9v
dGVzdC90ZXN0LnBuZ1VYCABnAMlNNcWlTVBLAQIVAwoAAAAAAFpLqj4AAAAAAAAAAAAAAAAXAAwA
AAAAAAAAAEDtQXWFAABxeG9vdGVzdC9zb3VyY2Uvc2NyaXB0L1VYCAAbAMlNy/bITVBLAQIVAwoA
AAAAAFpLqj4AAAAAAAAAAAAAAAAcAAwAAAAAAAAAAEDtQbqFAABxeG9vdGVzdC9zb3VyY2Uvc2Ny
aXB0Ly5zdm4vVVgIAKz3yE3L9shNUEsBAhUDFAAIAAgAWkuqPu7Dvv0EAQAARgIAACMADAAAAAAA
AAAAQCSBBIYAAHF4b290ZXN0L3NvdXJjZS9zY3JpcHQvLnN2bi9lbnRyaWVzVVgIAGcAyU3L9shN
UEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAAACYADAAAAAAAAAAAQO1BaYcAAHF4b290ZXN0L3Nv
dXJjZS9zY3JpcHQvLnN2bi9wcm9wLWJhc2UvVVgIAK72yE3/8qVNUEsBAhUDCgAAAAAAKqCNPgAA
AAAAAAAAAAAAACIADAAAAAAAAAAAQO1BvYcAAHF4b290ZXN0L3NvdXJjZS9zY3JpcHQvLnN2bi9w
cm9wcy9VWAgArvbITf/ypU1QSwECFQMKAAAAAAAroI0+AAAAAAAAAAAAAAAAJgAMAAAAAAAAAABA
7UENiAAAcXhvb3Rlc3Qvc291cmNlL3NjcmlwdC8uc3ZuL3RleHQtYmFzZS9VWAgArPfITQHzpU1Q
SwECFQMUAAgACAAqoI0+g0bpOG8HAAAcFwAANwAMAAAAAAAAAABAJIFhiAAAcXhvb3Rlc3Qvc291
cmNlL3NjcmlwdC8uc3ZuL3RleHQtYmFzZS9xeC1vby5qcy5zdm4tYmFzZVVYCABnAMlNAPOlTVBL
AQIVAxQACAAIACqgjT5A5PYwZAEAAFECAAA6AAwAAAAAAAAAAEAkgUWQAABxeG9vdGVzdC9zb3Vy
Y2Uvc2NyaXB0Ly5zdm4vdGV4dC1iYXNlL3F4b290ZXN0LmpzLnN2bi1iYXNlVVgIAGcAyU0A86VN
UEsBAhUDCgAAAAAAWkuqPgAAAAAAAAAAAAAAACAADAAAAAAAAAAAQO1BIZIAAHF4b290ZXN0L3Nv
dXJjZS9zY3JpcHQvLnN2bi90bXAvVVgIAKz3yE3L9shNUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAA
AAAAACoADAAAAAAAAAAAQO1Bb5IAAHF4b290ZXN0L3NvdXJjZS9zY3JpcHQvLnN2bi90bXAvcHJv
cC1iYXNlL1VYCACu9shN//KlTVBLAQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAAmAAwAAAAAAAAA
AEDtQceSAABxeG9vdGVzdC9zb3VyY2Uvc2NyaXB0Ly5zdm4vdG1wL3Byb3BzL1VYCACu9shN//Kl
TVBLAQIVAwoAAAAAACugjT4AAAAAAAAAAAAAAAAqAAwAAAAAAAAAAEDtQRuTAABxeG9vdGVzdC9z
b3VyY2Uvc2NyaXB0Ly5zdm4vdG1wL3RleHQtYmFzZS9VWAgArvbITQHzpU1QSwECFQMUAAgACADT
UKo+0/V321cHAAC+FQAAHwAMAAAAAAAAAABApIFzkwAAcXhvb3Rlc3Qvc291cmNlL3NjcmlwdC9x
eC1vby5qc1VYCABnAMlNHQDJTVBLAQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAAcAAwAAAAAAAAA
AEDtQSebAABxeG9vdGVzdC9zb3VyY2UvdHJhbnNsYXRpb24vVVgIABsAyU3/8qVNUEsBAhUDCgAA
AAAA1GSTPgAAAAAAAAAAAAAAACEADAAAAAAAAAAAQO1BcZsAAHF4b290ZXN0L3NvdXJjZS90cmFu
c2xhdGlvbi8uc3ZuL1VYCACs98hNP3StTVBLAQIVAxQACAAIANRkkz6KOjmv3gAAAKoBAAAoAAwA
AAAAAAAAAEAkgcCbAABxeG9vdGVzdC9zb3VyY2UvdHJhbnNsYXRpb24vLnN2bi9lbnRyaWVzVVgI
AGcAyU0/dK1NUEsBAhUDCgAAAAAAKqCNPgAAAAAAAAAAAAAAACsADAAAAAAAAAAAQO1BBJ0AAHF4
b290ZXN0L3NvdXJjZS90cmFuc2xhdGlvbi8uc3ZuL3Byb3AtYmFzZS9VWAgArPfITf/ypU1QSwEC
FQMKAAAAAAAqoI0+AAAAAAAAAAAAAAAAJwAMAAAAAAAAAABA7UFdnQAAcXhvb3Rlc3Qvc291cmNl
L3RyYW5zbGF0aW9uLy5zdm4vcHJvcHMvVVgIAKz3yE3/8qVNUEsBAhUDCgAAAAAAK6CNPgAAAAAA
AAAAAAAAACsADAAAAAAAAAAAQO1Bsp0AAHF4b290ZXN0L3NvdXJjZS90cmFuc2xhdGlvbi8uc3Zu
L3RleHQtYmFzZS9VWAgArPfITQHzpU1QSwECFQMUAAgACAAqoI0+kXvzZFUAAABpAAAAPgAMAAAA
AAAAAABAJIELngAAcXhvb3Rlc3Qvc291cmNlL3RyYW5zbGF0aW9uLy5zdm4vdGV4dC1iYXNlL3Jl
YWRtZS50eHQuc3ZuLWJhc2VVWAgAZwDJTQDzpU1QSwECFQMKAAAAAADUZJM+AAAAAAAAAAAAAAAA
JQAMAAAAAAAAAABA7UHcngAAcXhvb3Rlc3Qvc291cmNlL3RyYW5zbGF0aW9uLy5zdm4vdG1wL1VY
CACs98hNP3StTVBLAQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAAvAAwAAAAAAAAAAEDtQS+fAABx
eG9vdGVzdC9zb3VyY2UvdHJhbnNsYXRpb24vLnN2bi90bXAvcHJvcC1iYXNlL1VYCACs98hN//Kl
TVBLAQIVAwoAAAAAACqgjT4AAAAAAAAAAAAAAAArAAwAAAAAAAAAAEDtQYyfAABxeG9vdGVzdC9z
b3VyY2UvdHJhbnNsYXRpb24vLnN2bi90bXAvcHJvcHMvVVgIAKz3yE3/8qVNUEsBAhUDCgAAAAAA
K6CNPgAAAAAAAAAAAAAAAC8ADAAAAAAAAAAAQO1B5Z8AAHF4b290ZXN0L3NvdXJjZS90cmFuc2xh
dGlvbi8uc3ZuL3RtcC90ZXh0LWJhc2UvVVgIAKz3yE0B86VNUEsBAhUDFAAIAAgAvYWNPpF782RV
AAAAaQAAACYADAAAAAAAAAAAQKSBQqAAAHF4b290ZXN0L3NvdXJjZS90cmFuc2xhdGlvbi9yZWFk
bWUudHh0VVgIAGcAyU01xaVNUEsFBgAAAACYAJgAhTsAAPugAAAAAA==
</data>

          </attachment>
      

    </bug>