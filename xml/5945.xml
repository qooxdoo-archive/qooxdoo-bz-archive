<bug>
          <bug_id>5945</bug_id>
          
          <creation_ts>2011-12-13 17:49:00 +0100</creation_ts>
          <short_desc>REFAC: generator.code.Class should not Depend on Global ClassList</short_desc>
          <delta_ts>2014-03-03 15:25:35 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.dependencies</component>
          <version>1.6</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>27993</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-12-13 17:49:26 +0100</bug_when>
            <thetext>Class._classesObj is used to have access to the global class list (ie. set of 
all classes across all libs of a build). The information is convenient to have 
in Class, as it is used frequently for dependency analysis, to check if a found 
symbol resembles a known class, or to get the class object of a foreign class 
in transitive analysis.

But the global class list is maintained as an object attribute 
(Class._classesObj), and is even part of the Class constructor (though actually 
not used that way). This manifests an unduely link between the individual class 
(which should be as much self-contained as possible), and the class list (which 
is highly dependent on a specific build, hence volatile).

Furthermore, as Library objects are cached, and Class objects with them, the 
global ClassList is cached as well. But it has nothing to do with the specific 
library. Again volatile information made its way into more permanent 
information. This should be changed.

A way around it would be to pass the global class list as parameter into the 
Class methods that actually need them (like .getCombinedDeps).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27994</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-12-13 18:15:55 +0100</bug_when>
            <thetext>Global class list is now passed in to Class.getCombinedDeps, and stored in 
MClassDependencies as modul var ClassesAll (this could be changed into a 
parameter to callees later).

master: a05dffc</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38800</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:35 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>