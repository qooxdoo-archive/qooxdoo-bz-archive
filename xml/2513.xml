<bug>
          <bug_id>2513</bug_id>
          
          <creation_ts>2009-06-25 18:39:00 +0200</creation_ts>
          <short_desc>Implement method to check if element is user-visible</short_desc>
          <delta_ts>2010-12-22 12:45:09 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>website</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jean-Noel Rivasseau">elvanor</reporter>
          <assigned_to name="Gabriel Munteanu">jajalinux</assigned_to>
          <cc>qooxdoo</cc>
    
    <cc>vincent</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10577</commentid>
            <who name="Jean-Noel Rivasseau">elvanor</who>
            <bug_when>2009-06-25 18:39:48 +0200</bug_when>
            <thetext>Here is the Prototype code, so it&#39;s very simple:

visible: function(element) {
  return $(element).style.display != &#39;none&#39;;
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10580</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-06-25 19:03:37 +0200</bug_when>
            <thetext>I think it&#39;s too trivial (an incomplete) to be included in the framework. In Prototype it only accounts for display != none, but what about dimensions equal 0px or visibility == hidden or position offscreen? What would users expect from such a visible() method at all?

BTW, the a qooxdoo equivalent to Prototype&#39;s check would simply be:
qx.bom.element.Style.get(el, &quot;display&quot;) !== &quot;none&quot;;

Alex, what&#39;s your impression? Comments anyone?
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20787</commentid>
            <who name="Jean-Noel Rivasseau">elvanor</who>
            <bug_when>2010-10-20 10:42:26 +0200</bug_when>
            <thetext>Could this be sheduled for a target version?
Such a method would be really useful for me.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20793</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-10-20 13:26:46 +0200</bug_when>
            <thetext>Wouldn&#39;t it work for you to use the qooxdoo equivalent of comment #2 ?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20794</commentid>
            <who name="Jean-Noel Rivasseau">elvanor</who>
            <bug_when>2010-10-20 13:30:37 +0200</bug_when>
            <thetext>Well, I actually agree with comment #2 saying that it should test visibility, position offscreen and all that.
So it&#39;s definitely more complex than just qx.bom.element.Style.get(el, &quot;display&quot;) !== &quot;none&quot;. But it would be nice if it would be there.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20796</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-10-20 13:51:26 +0200</bug_when>
            <thetext>Since it became clear that the Prototype solution is too trivial, I corrected the title, unassigned from Alex.

@Jean-Noel: could you possible find out if such a comprehensive method as suggested does exist in other low-level frameworks, we could simply adopt? Or come up with a solution you could contribute? I don&#39;t see that feature being targeted by the core team soon.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22075</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2010-12-22 10:38:34 +0100</bug_when>
            <thetext>A web developer would want such a method - testing if an element is user-visible or not, to hide it or show it basically.
In the case the element is hidden, and say we have a great method that covers all cases, and the method returns false, the developer does not know how to make it visible.
it could be one of the cases below [i am sure the list is longer]:
- that the display is set to none
- the visibility is set to hidden
- the element is covered by another one with greater z-index
- the element is inside a parent with overflow: hidden and it is placed in the hidden part
- it is at the bottom of a very long page, and the user must scroll to make it visible
- the dimensions height and width are 0

so the developer would have his result returned [say false] , and does not know what to do with it: shall I set display to block, shall I scroll the page? shall i increase z-index ?
instead of a method that hides so much info, we could have more specific methods.

a nice popular use case for this is loading images when they come into the window&#39;s viewport.
but here you would want to test imgElement.isInsideViewport() and then imgElement.src=&#39;/images/myimg.png&#39; or something.

i don&#39;t think having a method isVisible() that will cover all cases is a good thing to have in qooxdoo.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22082</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-12-22 12:45:09 +0100</bug_when>
            <thetext>Gabi, thanks for the comprehensive writeup. I also can&#39;t see how to provide reasonably well such a generic feature (AFAIK also absent in other low-level libraries). In practice, and with the existing feature set a developer should be able to address this already, possibly app specific. Set this to won&#39;t fix.</thetext>
          </long_desc>
      
      

    </bug>