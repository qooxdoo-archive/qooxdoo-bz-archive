<bug>
          <bug_id>2418</bug_id>
          
          <creation_ts>2009-05-26 09:57:00 +0200</creation_ts>
          <short_desc>The resource key in decoration themes is too limited</short_desc>
          <delta_ts>2014-03-03 15:25:24 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.theming</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Fabian Jakobs">fabian.jakobs</reporter>
          <assigned_to name="Fabian Jakobs">fabian.jakobs</assigned_to>
          <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10117</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-26 09:57:33 +0200</bug_when>
            <thetext>It is only possible to set one single alias for decoration resources:

resource : &quot;qx/decoration&quot;


If the user wants to extend such a theme in a different project the user cannot easily override
the &quot;resource&quot; key to reference his own resources. If the &quot;resource key is redefined the user
would have to copy all qooxdoo resources into his own resource directory. We need a way
to define more than one resource alias, e.g.:

aliases :
{
	&quot;decoration&quot; : &quot;qx/decoration&quot;,
	&quot;custom-decoration&quot; : &quot;custom/decoration&quot;
}

We should deprecate the old &quot;resource&quot; key in favour of the &quot;alias&quot; key.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10128</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-26 15:10:41 +0200</bug_when>
            <thetext>fixed in r19234</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10132</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-26 15:47:23 +0200</bug_when>
            <thetext>What&#39;s so bad about copying the files? Is this really needed? It increases the complexity again for a questionable benefit. You know that you can easily put images to the &quot;qx/decoration&quot; folder - even in a custom project - do you? This is already done by the build system.

Was quite a fast-track - to fast for me to write any comment about this ;) BTW: This breaks the custom themes created and mean manual migration I think.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10133</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-26 15:58:24 +0200</bug_when>
            <thetext>Ignore the comment about the copying please. Sure it might be of benefit to *not* copy files (and more important: keeping them in-sync).

But as this is already resolved through &quot;how the generator works&quot; this change should be reverted IMHO as this do not result in any missing functionality.

Just put the files from a derived theme into the same locations as the original theme had. That&#39;s easy and straightforward.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10152</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-27 14:42:16 +0200</bug_when>
            <thetext>Current themes do not break in any way. I have deprecated the &quot;resource&quot; key, which simply means that the user will see a warning with a hint how to update the themes.

File copying is a real issue and really worth the effort. BTW the complexity is not higher than the previous implementation.

This feature adds needed flexibility with little tradeoffs so what is the problem?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10156</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-27 16:20:59 +0200</bug_when>
            <thetext>As mentioned in my previous comment I see the point about file copying. No complaon about this.

It might be a definition thing if it is &quot;bloat&quot; or &quot;flexibility&quot;. But IMHO this feature is already in earlier qooxdoo versions by simply using the merge-behavior of the resource-copying process of the generator. This was the idea for dealing with such requirements. 

It would be highly interesting why this pattern does not work in your case or what exactly you do not like about it. Regarding the original bug description the whole feature was not seen to be available - at least I would interpret it this way.

Also it might be interesting that the keyword &quot;alias&quot; is already used in another way in qooxdoo (AliasManager), so it might be a bet word for using it here as well.

BTW: Wouldn&#39;t it be nice to not close-reopen-close-reopen bugs over and over again when we just communicate with each other until everybody things it could be closed?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10174</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-28 11:29:42 +0200</bug_when>
            <thetext>&gt; It might be a definition thing if it is &quot;bloat&quot; or &quot;flexibility&quot;. But IMHO this
&gt; feature is already in earlier qooxdoo versions by simply using the
&gt; merge-behavior of the resource-copying process of the generator. This was the
&gt; idea for dealing with such requirements.

OK assume you want to extend a qooxdoo theme in your own application. Qooxdoo sets
the &quot;decoration&quot; alias to /qx/decoration/modern with the &quot;resource&quot; key. Now if you want
to reference custom resources at &quot;custom/decoration&quot; in the derived theme you have only two options:

1. Set the resource key to &quot;custom/decoration&quot; and copy all resources from qooxdoo to
this directory.

2. Leave the resource key as it is and find some other way to reference the resources

Both solutions are essentially hacks around the inflexibility of the &quot;resource&quot; key.

What I really want is to reference the original qooxdoo resources in the base theme and the
custom resources in the derived theme. This is only possible if I don&#39;t override the
&quot;decoration&quot; alias.

&gt; It would be highly interesting why this pattern does not work in your case or
&gt; what exactly you do not like about it. Regarding the original bug description
&gt; the whole feature was not seen to be available - at least I would interpret it
&gt; this way.
&gt; 
&gt; Also it might be interesting that the keyword &quot;alias&quot; is already used in another
&gt; way in qooxdoo (AliasManager), so it might be a bet word for using it here as
&gt; well.

That is exactly the reason for the name. What &quot;resource&quot; implicitly does is setting the
&quot;decoration&quot;/&quot;icon&quot; aliases. So the name expresses exactly what it does.
 
&gt; BTW: Wouldn&#39;t it be nice to not close-reopen-close-reopen bugs over and over
&gt; again when we just communicate with each other until everybody things it could
&gt; be closed?

I don&#39;t like keeping bugs open just for the sake of discussion. For me if a bug doesn&#39;t 
require any further action the bug has to be closed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10185</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-28 14:15:07 +0200</bug_when>
            <thetext>Ok, I was wrong regarding the fact that &quot;resource&quot; is used by the resource manager which do not seem to be true. This is really for aliases, so your rename is completely valid in this context. Still it is true, that aliases are only a comfort feature and nothing explicitely needed. The themes or the application code can still access resources using the full qualified resource path (resolved by the resource manager) e.g.

icon/action/16/copy.png
is identical to:
qx/icon/themename/action/16/copy.png

In my opinion aliases and resources are a quite advanced mechanism. I am not sure if the typical qooxdoo developer really understands the difference.

To get back to my original point. One thing which you could always do, is to have the same resource structure in your application as in the qooxdoo sdk folder. Every resource found in app/resource/qx/* is higher priorized as in sdk/resource/qx/* so this is still easier than using a custom alias in my opionion. It also helps with the following issue:

One thing which the additional aliases broke is that you cannot easily switch between themes as previously. Previously it was clear that every icon or decoration theme puts all it&#39;s resources into one folder which you can easily access with the alias in your appearance theme or application code. With the change it is not easily possible to continue with this procedure. Now it is possible that a theme defines multiple aliases, some images are stored in folder1, some images are stored in folder2. The task for the developer now is not only to find a graphic into the different folders, but also to use the correct alias to access it. I am sorry, but I think this torpedates the previous implementation which was easy-to-learn, easy-to-use pattern where every theme has exactly one resource folder with a completely flexible way where nobody intiutively find a available resource without looking into the theme code. I think I prefer convention over configuration here (just like in Ruby on Rails).

Using the merge behavior of the generator all this was available already just dealing with one alias.

One alternative solution for this, would be to define a fallback order for aliases as well. Just like for resources an alias would be something which leads to shorter URLs (resolving selected themes) and newly also processes the resource information for the best match available. This shouldn&#39;t be a problem as all local resources are already indexed by the generator. This would lead to something like this:

resource : [ &quot;myapp/decoration&quot;, &quot;qx/decoration&quot; ]

The &quot;resource&quot; key here also makes sense to be renamed to &quot;alias&quot; here, though:

alias : [ &quot;myapp/decoration&quot;, &quot;qx/decoration&quot; ]
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10206</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-28 17:16:53 +0200</bug_when>
            <thetext>To make this very clear:

The &quot;alias&quot; system can be used in a completely backwards compatible way. For most
users nothing will change and for some it give an enhanced flexibility.

resource : &quot;qx/decoration&quot;

and 

aliases : {
  “decoration”: “qx/decoration”,
}

have the exact same effect.

Yes, there are other ways to implement this feature but unless you can argue how other
solutions are better I&#39;ll keep it as it is.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10233</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-29 14:49:54 +0200</bug_when>
            <thetext>I am not exactly happy how this was ended. In my opinion I offered a set of suggestions and ideas in comment #7. 

I tried to add a summary of my analysis and suggestions below. Please tell me what I can do to &quot;argue how other solutions are better&quot;. I really tried hard.

The current solution:
* Breaks the pattern: every resource theme has one folder of resources.
* Appearance theme and application developers cannot trust a convention that for example icons by an icon theme are always stored under an &quot;icon&quot; alias. 
* Themes may not be anymore easily exchangable as before when every theme can introduce own conventions.
* Adds more complexity than needed in most cases where one resource folder is simply enough

Notes &amp; Suggestions:
* The previous implementation had already support for adding resources to an existing theme without copying the original folder (but means to use the original structure in the own project which might be a small cosmetic issue)
* An alternative would be that a theme can define some kind of fallback chain (for folders) to find resources. This is better as every theme still only define one alias for resources and the appearance theme still can easily access them indepent from the location on the project.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38737</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:24 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>