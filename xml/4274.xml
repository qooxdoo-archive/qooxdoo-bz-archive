<bug>
          <bug_id>4274</bug_id>
          
          <creation_ts>2010-11-03 14:52:00 +0100</creation_ts>
          <short_desc>Add Pyparsing Module to Pylib</short_desc>
          <delta_ts>2014-03-03 15:22:26 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>1.2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>21051</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-11-03 14:52:05 +0100</bug_when>
            <thetext>Since a while I have been tinkering with the &#39;pyparsing&#39; module of Paul 
McGuire. I think it is a very well-written and usable parsing framework, which 
comes in handy with various parsing jobs. I&#39;ve already used it successfully 
when porting the qooxdoo manual from Wiki format to reST (bug#3713). I&#39;ve 
started using it to write a new version of the &#39;svnlog&#39; utility, which we use 
for the release notes of every qooxdoo release. I think there will be more 
opportunities to apply a generic parsing framework to special case data and 
little DSLs, apart from our main JavaScript parser. (One such application might 
e.g. be a revamped parser for JSDoc comments, which constitute a DSL on their 
own).

We also have a nicely written introduction to the module, P.McGuire&#39;s &quot;O&#39;Reilly 
Shortcut&quot;, which adds to its usability. I I think it would make a useful 
addition to our set of third-party Python modules under tool/pylib.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21052</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-11-03 14:56:14 +0100</bug_when>
            <thetext>Added pyparsing-1.5.5 to the framework, using its license file and the 
pyparsing_py2.py module (that&#39;s the Python 2.x variant; it&#39;s compatible with 
Python 2.3.2 or later).

With r23654.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37678</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:22:26 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>