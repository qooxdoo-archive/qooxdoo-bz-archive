<bug>
          <bug_id>7297</bug_id>
          
          <creation_ts>2013-03-14 16:53:00 +0100</creation_ts>
          <short_desc>Privateoptimization: Add a Hash-based Alternative</short_desc>
          <delta_ts>2014-03-03 09:37:20 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>32459</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-03-14 16:53:58 +0100</bug_when>
            <thetext>As a concrete of outcome of bug#4203, add an optimization that replaces private 
keys by - sufficiently long - hash values, like 6-7 chars as with git.

Private optimization currently servers two purposes, (a) name-mangling of 
private keys, and (b) shortening those keys.

When you loosen up on (b), you can use a hash-based replacement for the private 
keys. This has the advantage that private optimization could be performed on 
each class independently. (The current implementation needs to know the 
replacement keys for all classes involved in the build, in order to be 
clash-free). So in paying a little size penalty you could get a private 
optimization that is much more robust and allows for the recombination of 
script packages at runtime which were built independently (think e.g. code 
provider). There might be applications that would prefer this optimization over 
the other.

This could be offered as two alternative optimizations in the config, e.g. as 
&#39;privates&#39; and &#39;privates-hashed&#39;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36191</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 09:37:20 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year or we don&#39;t think it will be fixed in the near future.</thetext>
          </long_desc>
      
      

    </bug>