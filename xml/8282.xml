<bug>
          <bug_id>8282</bug_id>
          
          <creation_ts>2014-04-23 17:16:00 +0200</creation_ts>
          <short_desc>discourage &quot;trunk&quot; or &quot;master&quot; as version names for contribs</short_desc>
          <delta_ts>2015-05-05 08:28:12 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>contrib</product>
          <component>TokenField</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Boulanger">info</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>richard.sternagel</cc>
          <qa_contact name="Guilherme Krycek">gradinf</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>40042</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2014-04-23 17:16:09 +0200</bug_when>
            <thetext>For contributions, it is generally a bad idea to use the version name &quot;trunk&quot; or &quot;master&quot;, since then it is unclear against which qooxdoo version they should be built. This becomes clear in the case of the &quot;TokenField&quot; contrib, which has a version &quot;trunk&quot; which works only with qx. 1.1 and 1.2. 

So I would like to suggest that the use of &quot;trunk&quot; as well as &quot;master&quot; as version name should be discouraged and that instead, only a specific version number should be used (for example, 3.6-pre).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40046</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2014-04-24 11:29:08 +0200</bug_when>
            <thetext>Sorry, my first message was rather confused. Of course *contrib* version names can be &quot;trunk&quot; or &quot;master&quot;, this has no relationship whatsoever to the *qooxdoo* version. What I meant was that *qooxdoo* version names &quot;trunk&quot; or &quot;master&quot; should not be used, because this can result in incorrect dependency calculation and failed builds.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40047</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2014-04-24 11:30:58 +0200</bug_when>
            <thetext>Plus, this but is in the wrong category - should not be in contributions/TokenField, but in core.dev or something like that. Sorry for the confusion!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40049</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-04-24 13:59:33 +0200</bug_when>
            <thetext>I agree with you and wasn&#39;t aware that those qooxdoo version names (&quot;master&quot;/&quot;trunk&quot;) are used by contribs. Do you have suggestions on *how* to discourage those?

We could:

* adapt the &quot;validate-manifest&quot; job
* add a line to the contrib documentation in the manual
* try to not let them slip through when pull requests are accepted

Unfortunately all of those need manual human work, and I&#39;m currently not aware of an automated workflow, that would prevent those &quot;bad&quot; versions.

An automated contrib demo infrastructure, like the one you envisioned [1][2], could email the authors if their contrib relying on qooxdoo master doesn&#39;t build any longer, but even that falls short because the contrib could still build, but not work anyway.

However, as far as I know, the &quot;qooxdoo-version&quot; is just meta information and only used for the contrib demo browser to know which qooxdoo versions to build against. And as hint for the developer who wants to use a specific contrib ...

[1]
http://qooxdoo.678.n2.nabble.com/contrib-2-0-infrastructure-tp7585559p7585571.html
[2]
http://qooxdoo.678.n2.nabble.com/contrib-2-0-infrastructure-tp7585559p7585579.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40050</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2014-04-24 14:14:34 +0200</bug_when>
            <thetext>Hello Richard, 

thank you for considering my suggestion. I think all of your ideas would make sense if they can be implemented / integrated into the current workflow. A warning to the developer would already go a long way, to avoid reliance on changing repository as a build target. In addition, for the sake of integrity, the contrib registry should not accept &quot;trunk&quot; or &quot;master&quot; as release names - if developers want to use the bleeding-edge version of a contribution, they can still check out the source code directly from the repository and integrate it manually. 

I think that automated emails to developers would be a good &quot;nudge&quot; to maintain or deprecate contribs properly and lead to more and more stable contributions. Given the excellent migration tools of qooxdoo, you could even try to automatically upgrade contributions for new releases and email the authors only if the builds fail. Qooxdoo is so well-thought out that a lot of stuff can be automated...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43215</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2015-05-05 08:28:12 +0200</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>