<bug>
          <bug_id>4039</bug_id>
          
          <creation_ts>2010-08-30 14:08:00 +0200</creation_ts>
          <short_desc>Setting a new array as a selection in the model doesn&#39;t update the selection in the list widget (though a list controller)</short_desc>
          <delta_ts>2010-10-13 07:54:08 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.databinding</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.2.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Guilherme Krycek">gradinf</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>20028</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-08-30 14:08:43 +0200</bug_when>
            <thetext>Here is the long description:

Hi,

I&#39;m trying to use the new feature in the list controller (deputy) but I can&#39;t get it to work without the form controller.

Martin, you said the limitation for using it with multi selection was in the form controller. To test it I&#39;m not using the form controller and I&#39;m using the Object controller instead.

Here are some code to illustrate what I&#39;m trying to do:

      var genders_data = [
        {label: &quot;male&quot;, data: &quot;M&quot;}, 
        {label: &quot;female&quot;, data: &quot;F&quot;}, 
        {label: &quot;dont know!&quot;, data: &quot;WTF&quot;}, 
        {label: &quot;Alien&quot;, data: &quot;A&quot;}
      ];
      // create some dummy data
      var my_data = {
        firstname: &quot;Martin&quot;,
        lastname: &quot;Wittemann&quot;,
        gender: []
      };
      var genders_model = qx.data.marshal.Json.createModel(genders_data);
      var my_model = qx.data.marshal.Json.createModel(my_data);
      // firstname
      var firstname = new qx.ui.form.TextField();

      // lastname
      var lastname = new qx.ui.form.TextField();

      // gender
      var gender = new qx.ui.form.List();
      gender.setSelectionMode(&quot;multi&quot;);
      var genderController = new qx.data.controller.List(null, gender);
      genderController.setDelegate({bindItem: function(controller, item, index) 
      {
        controller.bindProperty(&quot;label&quot;, &quot;label&quot;, null, item, index);
        controller.bindProperty(&quot;data&quot;, &quot;model&quot;, null, item, index);        
      }});
      genderController.setModel(genders_model);

      // create the form and add it to the root
      this.getRoot().add(firstname, {left: 30, top: 20});
      this.getRoot().add(lastname, {left: 30, top: 50});
      this.getRoot().add(gender, {left: 30, top: 80});
      
      var controller = new qx.data.controller.Object(my_model);

      controller.addTarget(firstname, &quot;value&quot;, &quot;firstname&quot;, true);
      controller.addTarget(lastname, &quot;value&quot;, &quot;lastname&quot;, true);
      controller.addTarget(genderController, &quot;selection&quot;, &quot;gender&quot;, true);

      // A button to log the models content
      var logButton = new qx.ui.form.Button(&quot;Show model data in the log&quot;);
      this.getRoot().add(logButton, {left: 240, top: 20});
      logButton.addListener(&quot;execute&quot;, function() {
        this.debug(qx.dev.Debug.debugProperties(my_model));
      }, this);
      my_model.setGender(new qx.data.Array([&quot;M&quot;, &quot;WTF&quot;]));

As you can see: my_model.setGender() is not propagating the changes to the UI. I think it&#39;s a bug because I&#39;m creating a bidirectional binding.

but the following works fine:

my_model.getGender().push(&quot;M&quot;);
my_model.getGender().push(&quot;A&quot;);

that works too:

gender.setModelSelection([&quot;WTF&quot;]);</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20328</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-23 12:45:35 +0200</bug_when>
            <thetext>It was easier than I thought. In the apply handler of the new selection array, I just did not call the update method for the selection. So the fix itself was a single line of code. :)

trunk: r23385
1.2.x: r23386</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20331</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-09-23 13:51:52 +0200</bug_when>
            <thetext>I tested it. Working great.

Now I&#39;ll be able to use that new feature.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20340</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-24 09:52:22 +0200</bug_when>
            <thetext>Thanks --&gt; Closed</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20576</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-10-13 07:54:08 +0200</bug_when>
            <thetext>mass retargeting to 1.2.2 due to intermediate 1.2.1 release</thetext>
          </long_desc>
      
      

    </bug>