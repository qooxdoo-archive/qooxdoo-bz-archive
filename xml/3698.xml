<bug>
          <bug_id>3698</bug_id>
          
          <creation_ts>2010-05-11 12:46:00 +0200</creation_ts>
          <short_desc>REFAC: Provide Compilation through Class Interface</short_desc>
          <delta_ts>2014-03-03 15:21:29 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>1.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          <keywords>Refactoring</keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.6</target_milestone>
          
          <blocked>3291</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>18292</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-05-11 12:46:01 +0200</bug_when>
            <thetext>Provide access to compiled and uncompiled class code through an interface of 
generator.code.Class.

E.g. in the form of the getCode(compile_options, variants) method which takes 
compile and variant information and returns code respectively:
- compiled (optimized)
- compiled (only comments stripped, whitespace compressed)
- source (only comments stripped)
- source (plain, with comments)

This would be the preferred interface to class code, for generating source, 
build, and hybrid versions, for files other than those just referenced  on 
disk, i.e. when creating some kind of file with concated class code.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19470</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-07-28 15:20:47 +0200</bug_when>
            <thetext>Re-target to 1.3</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20527</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-10-07 15:12:23 +0200</bug_when>
            <thetext>The ground work has been done solving bug#4153. Class.py now as  a working 
.getCompiled, with .optimize and .compile helpers. Private optimization cannot 
be provided on this level currently (private key generation requires perfect 
knowledge).

But most code duplicates TreeCompiler.py, and is currently only used for 
CodeProvider.py. It has to be seen how far other parts of the generator, esp. 
CodeGenerator, can be migrated to the new API, and the dependencies to 
TreeCompiler can be removed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21554</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-11-25 10:38:39 +0100</bug_when>
            <thetext>I think there is even a chance to provide privates optimization through the 
Class interface, by injecting the global lookup table for the privates as a 
parameter. But I don&#39;t want to touch the code before the release, so

-&gt; 1.4</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27606</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-11-24 14:16:04 +0100</bug_when>
            <thetext>I think all code/compilation tasks are now used through Class.* methods (with a 
slightly evolved interface), including privates optimization,  and 
TreeCompiler.py has been removed from the code base. The newer &quot;statics&quot; 
optimization is done in CodeGenerator, as it needs to work on sets of classes, 
but the base optimization is again done through Class.optimize.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37305</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:21:29 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>