<bug>
          <bug_id>3020</bug_id>
          
          <creation_ts>2009-11-03 10:06:00 +0100</creation_ts>
          <short_desc>Stand-alone Library files fail to load</short_desc>
          <delta_ts>2014-03-03 15:19:56 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.config</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alexander Steitz">alexander.steitz</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>13807</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2009-11-03 10:06:58 +0100</bug_when>
            <thetext>When referring to &quot;stand-alone Library files&quot; I mean the following setup:

  - fixed included classes in a package
  - package is built with &quot;loader-with-boot&quot;: false
  
At the webpage only the second package is used - the loader package is ignored.

The following result is generated for the second package (first two lines):

--snip--
qx.$$packageData[&#39;8c8834304026&#39;]={&quot;resources&quot;:{}};
if(!window.qx){window.qx={};
--snip--
 
 This breaks the whole package since &quot;qx&quot; is yet not defined at the first line.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14833</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:26:53 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15006</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2009-11-27 10:36:49 +0100</bug_when>
            <thetext>raising Prio to 1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15399</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-12-07 19:02:45 +0100</bug_when>
            <thetext>Alex, how comes that the second line in your snippet is &quot;if(!window.qx){...&quot;?! 

I&#39;m pretty sure this is *not* how the package is generated, as this line is 
explicitly used in the loader script (the one you skip). It&#39;s not part of any 
class-providing package!?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15407</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2009-12-08 13:47:15 +0100</bug_when>
            <thetext>Added an example at contrib/Bugs</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15408</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-12-08 14:03:42 +0100</bug_when>
            <thetext>The main issue here is the definition of the new package format, as introduced 
with bug#2800 (generally addressed in bug#2350). qooxdoo packages may start 
with a resource map bound to the symbol &quot;qx.$$packageData&quot;.

This implies that at least the following two symbols have been defined *before* 
loading the package:

- qx  (top-level name space)
- qx.$$packageData = {}   (a map that is filled by subsequently loaded packages)

The standard qooxdoo loader script provides those. If the script is not used, 
other measures have to be taken to assure the existence of the two symbols 
(e.g. adding corresponding code to the loading index.html).

The &quot;if(!window.qx){window.qx={};&quot; line stems from the original code of 
qx.Bootstrap, which naturally happens to be the first class of the first 
package. Under the above described circumstances it is not an issue.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36688</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:56 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>