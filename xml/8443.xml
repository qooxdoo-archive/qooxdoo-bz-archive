<bug>
          <bug_id>8443</bug_id>
          
          <creation_ts>2014-06-23 15:59:00 +0200</creation_ts>
          <short_desc>Throw error or return undefined if qxWeb gets a parameter which is undefined</short_desc>
          <delta_ts>2014-07-03 08:52:26 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>website</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mustafa Sak">mustafa.sak</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>alexander.steitz</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>40562</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2014-06-23 15:59:11 +0200</bug_when>
            <thetext>Mind you have a typo on first parameter of a qxWeb call. e.g.

var testSelector = &quot;div&quot;;
qxWeb(TESTselector).getConfig(&#39;options&#39;);

This example would not break, because qxWeb is returning an array, however.

But in my opinion this behavior covers up the real problem.

So I would recommended to allow qxWeb() but not qxWeb(undefined). If it&#39;s possible to count the arguments and its more than 0 and first parameter is type of undefined, qxWeb should throw an error.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40563</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2014-06-23 16:03:21 +0200</bug_when>
            <thetext>Should this happen also in the &#39;build&#39; version?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40564</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2014-06-23 16:04:38 +0200</bug_when>
            <thetext>there&#39;s no reason</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40565</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2014-06-23 16:18:47 +0200</bug_when>
            <thetext>Just for completeness ... I&#39;m saying we should do it this way. jQuery does behave the same like qxWeb currently.

No error thrown - returning an empty collection where you can call all methods.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40566</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2014-06-23 16:28:27 +0200</bug_when>
            <thetext>(In reply to comment #3)
&gt; Just for completeness ... I&#39;m saying we should do it this way. jQuery does
&gt; behave the same like qxWeb currently.
&gt; 
&gt; No error thrown - returning an empty collection where you can call all methods.

I meant 

&quot;I&#39;m not saying we should do it this way&quot;

Sorry for the confusion.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40642</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-07-02 09:08:49 +0200</bug_when>
            <thetext>I think thats a pattern we have all over qxWeb (and jQuery as well). If you are doing something wrong, it&#39;s your problem. If you are handing in any wrong stuff, we won&#39;t guarantee that any good is happening. So taking a more general look, the bug report only describes a tiny bit of a bigger question: Do we want to add some kind of user input validation for qxWeb?
I would say no for the deployment-version but could be done for the devel-version. But if we do it, we should make sure we have a common coverage of checks for all methods to have a common fell on using the library.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40643</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2014-07-02 09:24:44 +0200</bug_when>
            <thetext>I agree with you to assert on debug version. Even if I ask my self why a qxWeb chain which totally does nothing is better than an explicit error, even on deploy version.

Sure jQuery has the same behavior, but did jQuery always right? ;)

But anyway, as you already mentioned there could be more points on qxWeb to be checked for mistakes. Could you please point me to some of them?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40663</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-07-03 08:52:26 +0200</bug_when>
            <thetext>(In reply to comment #6)
&gt; I agree with you to assert on debug version. Even if I ask my self why a qxWeb
&gt; chain which totally does nothing is better than an explicit error, even on
&gt; deploy version.
I don&#39;t plan to add any runtime check to the build version due to code size and performance reasons.


&gt; But anyway, as you already mentioned there could be more points on qxWeb to be
&gt; checked for mistakes. Could you please point me to some of them?

Any value to hand in like .setHtml or .on</thetext>
          </long_desc>
      
      

    </bug>