<bug>
          <bug_id>4054</bug_id>
          
          <creation_ts>2010-09-03 16:56:00 +0200</creation_ts>
          <short_desc>Specify revision for contrib library</short_desc>
          <delta_ts>2010-09-16 17:19:01 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martijn Evers">martijn4evers</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>20083</commentid>
            <who name="Martijn Evers">martijn4evers</who>
            <bug_when>2010-09-03 16:56:13 +0200</bug_when>
            <thetext>This is my use case:

I use a contribution online. The author of this contribution committed some changes to trunk which broke my application. So to help the author I want to write a piece of sample code which works on revision X but not on revision Y.

Now I have to assume that the sample code that triggers the error in rev.Y doesn&#39;t trigger it in rev.X. Or I should do some work to verify it.

Wouldn&#39;t it be nice if you can specify the revision of the contribution you would like? Using a CLI option or using something like this in the config file:

contrib://helloWorld/trunk/Manifest.json#444

Where #444 is the revision number. That way revisions can be pinned or just switched between.

Best regards
Martijn</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20127</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-10 14:06:14 +0200</bug_when>
            <thetext>Daniel, what do you think about that enhancement. Sounds like something useful if the trunk state of a revision is used. How much work is it to include it?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20132</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-09-10 15:07:23 +0200</bug_when>
            <thetext>Should be a very simple matter, except I don&#39;t know what the URI needs to look like to download a specific revision. The Generator uses Wget to recursively download something like this:

http://qooxdoo-contrib.svn.sourceforge.net/svnroot/qooxdoo-contrib/trunk/qooxdoo-contrib/SkeletonApplication/trunk/

I tried adding a &quot;revision&quot; parameter to that, but still got the latest revision.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20221</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-09-16 17:19:01 +0200</bug_when>
            <thetext>Martijn, there are other ways to address this, being used in many real-life qooxdoo apps, so we&#39;re not going to implement this enhancement. 

When working against &quot;trunk&quot; versions (&quot;releases&quot; would clearly be preferable!), one might always run into problems when updating automatically. Therefore, what people typically use is &quot;SVN externals&quot; to refer to _specific_ revisions of external dependencies. BTW, if those SVN externals are checked-in into the repository of your project, one dev could, for instance, maintain and update explicitly the external dependencies in that central place and all other devs on the project would benefit immediately.

So instead of a convenience contrib:// download to a specific revision, you would include such an SVN external. That should do the job for you, otherwise let us know.</thetext>
          </long_desc>
      
      

    </bug>