<bug>
          <bug_id>2335</bug_id>
          
          <creation_ts>2009-05-04 19:35:00 +0200</creation_ts>
          <short_desc>Add overflow handling for toolbar/menu-bar</short_desc>
          <delta_ts>2010-10-04 09:37:58 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.bars</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.3</target_milestone>
          <dependson>2336</dependson>
          <blocked>3987</blocked>
    
    <blocked>3988</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>info</cc>
    
    <cc>martin.wittemann</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>9783</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-05-04 19:35:45 +0200</bug_when>
            <thetext>Add overflow handling to e.g. the toolbar, so that clipped buttons are replaced 
by a special symbol (often a &amp;raquo; ) and an accompanying menu that lists the 
invisible items.
This is seen in many other applications, e.g. FF3 does this with the 
bookmark-toolbar.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9784</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-04 22:39:00 +0200</bug_when>
            <thetext>As this means some kind of soft-widget-type creation (you may not know if you create a toolbarbutton or a menubutton) the best may be to make this possible with some kind of data binding. In ExtJS 3.0 for example you also do not create instances directly, but define which buttons are shown. The class then automatically creates instances as needed.

Does this make sense?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9789</commentid>
            <who name="Matthew">matthew+qooxdoo</who>
            <bug_when>2009-05-05 12:08:14 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; As this means some kind of soft-widget-type creation (you may not know if you
&gt; create a toolbarbutton or a menubutton) the best may be to make this possible
&gt; with some kind of data binding. 

I have yet to create a bug for this, but we discused enhancing qx.event.Command to be similar to classes like QAction. I already have &quot;soft-widget-type creation&quot; in the project I am working on. I cannot share it as a whole because it is commercially sensitive. The basic idea though is we pass a list of commands to a function that then automatically creates the toolbar buttons. The command class has an optional menu property, we examine this and look for execute listeners to determine if it is a Button, MenuButton or SplitButton.


I also think it might be nice to have an option that forces the menu to display all commands, not just invisible ones.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9799</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-05 16:40:36 +0200</bug_when>
            <thetext>Matthew, great idea using commands instead. This might solve this issue as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9856</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-08 09:58:39 +0200</bug_when>
            <thetext>Maybe we can leverage the data binding stuff and write a toolbar controller. This controller 
could bind the descriptions of the toolbar buttons (e.g. qx.event.Command) to the actual
buttons. This way we should be able to create the widgets on demand and to fill an overflow
menu.

The same applies to menu bars.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9857</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-08 09:59:13 +0200</bug_when>
            <thetext>to martin</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13582</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-10-27 14:56:10 +0100</bug_when>
            <thetext>Priority up because it cause some changes in the API</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14187</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-18 12:01:42 +0100</bug_when>
            <thetext>Acc. to Martin and Fabian this could be handled without API changes. This feature request requires more thought, particularly about the strategies for overflow visualization (chevron, placeholder, etc.).

Moved to enhancement pool.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19798</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-08-12 17:30:15 +0200</bug_when>
            <thetext>r23032 - r23037 add the possibility to include overflow handling with every kind of realization. 

I added only the removal of the toolbar items based on the size of the toolbar. If an item will be removed or shown, an event will be thrown which enables the application developer to react as desired. Additionally, the developer has the ability to mark one toolbar item as indicator which will be shown if at least one element is hidden. In common cases, this is a menu button which holds the menu showing the removed items. The widget.Toolbar demo in the demobrowser shows a basic implementation.</thetext>
          </long_desc>
      
      

    </bug>