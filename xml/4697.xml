<bug>
          <bug_id>4697</bug_id>
          
          <creation_ts>2011-02-22 14:12:00 +0100</creation_ts>
          <short_desc>The JSON data for the API contains redundant data for interface methods</short_desc>
          <delta_ts>2014-03-03 08:47:59 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.apidata</component>
          <version>1.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Hagendorn">christian.hagendorn</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>22888</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2011-02-22 14:12:19 +0100</bug_when>
            <thetext>The created data has redundant information which is not needed. Have a look at a created data from an interface and a class which uses this interface.

For example a interface method which defines a method:
&lt;snip&gt;
{
    &quot;attributes&quot;: {
        &quot;access&quot;: &quot;internal&quot;,
        &quot;isInternal&quot;: true,
        &quot;name&quot;: &quot;hasChildren&quot; 
    },
    &quot;type&quot;: &quot;method&quot;,
    &quot;children&quot;: [
        {
            &quot;type&quot;: &quot;params&quot;,
            &quot;children&quot;: [
                {
                    &quot;attributes&quot;: {
                        &quot;name&quot;: &quot;node&quot; 
                    },
                    &quot;type&quot;: &quot;param&quot;,
                    &quot;children&quot;: [
                        {
                            &quot;attributes&quot;: {
                                &quot;text&quot;: &quot;&lt;p&gt;Node to check.&lt;/p&gt;&quot; 
                            },
                            &quot;type&quot;: &quot;desc&quot; 
                        },
                        {
                            &quot;type&quot;: &quot;types&quot;,
                            &quot;children&quot;: [
                                {
                                    &quot;attributes&quot;: {
                                        &quot;type&quot;: &quot;qx.core.Object&quot; 
                                    },
                                    &quot;type&quot;: &quot;entry&quot; 
                                } 
                            ] 
                        } 
                    ] 
                } 
            ] 
        },
        {
            &quot;attributes&quot;: {
                &quot;text&quot;: &quot;&lt;p&gt;Return whether the node has children or not.&lt;/p&gt;&quot; 
            },
            &quot;type&quot;: &quot;desc&quot; 
        },
        {
            &quot;type&quot;: &quot;return&quot;,
            &quot;children&quot;: [
                {
                    &quot;attributes&quot;: {
                        &quot;text&quot;: &quot;&lt;code&gt;True&lt;/code&gt; when the node has children, &lt;code&gt;false&lt;/code&gt; otherwise.&quot; 
                    },
                    &quot;type&quot;: &quot;desc&quot; 
                },
                {
                    &quot;type&quot;: &quot;types&quot;,
                    &quot;children&quot;: [
                        {
                            &quot;attributes&quot;: {
                                &quot;type&quot;: &quot;Boolean&quot; 
                            },
                            &quot;type&quot;: &quot;entry&quot; 
                        } 
                    ] 
                } 
            ] 
        } 
    ] 
}
&lt;/snip&gt;

Here the class which uses the method from the interface:
&lt;snip&gt;
{
    &quot;attributes&quot;: {
        &quot;docFrom&quot;: &quot;qx.ui.IMyName&quot;,
        &quot;name&quot;: &quot;hasChildren&quot; 
    },
    &quot;type&quot;: &quot;method&quot;,
    &quot;children&quot;: [
        {
            &quot;type&quot;: &quot;params&quot;,
            &quot;children&quot;: [
                {
                    &quot;attributes&quot;: {
                        &quot;name&quot;: &quot;node&quot; 
                    },
                    &quot;type&quot;: &quot;param&quot; 
                } 
            ] 
        } 
    ] 
}
&lt;/snip&gt;

As you can she the children and method definition is redundant I would expect:
&lt;snip&gt;
{
    &quot;attributes&quot;: {
        &quot;docFrom&quot;: &quot;qx.ui.IMyName&quot;,
        &quot;name&quot;: &quot;hasChildren&quot; 
    }
}
&lt;/snip&gt;
Because all information are defined in the interface.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22906</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-02-23 08:39:28 +0100</bug_when>
            <thetext>Is there a reason why the bug comment is private?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22908</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2011-02-23 08:43:54 +0100</bug_when>
            <thetext>Eh? No, thanks.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36098</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:59 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>