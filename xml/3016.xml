<bug>
          <bug_id>3016</bug_id>
          
          <creation_ts>2009-11-02 09:27:00 +0100</creation_ts>
          <short_desc>Add support for external .js files in the builds</short_desc>
          <delta_ts>2014-03-03 15:26:27 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>burak.arslan</cc>
    
    <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>13760</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-02 09:27:29 +0100</bug_when>
            <thetext>Add a facility to the generator so that external, non-qooxdoo .js files will be 
included in the built application. This would allow to include libraries like 
progressive.js or any other self-written library that doesn&#39;t follow the 
qooxdoo class/library convention to be included in the final app, without 
resorting to means like manually adding &lt;script&gt; tags in the index.html.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13762</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-02 09:39:10 +0100</bug_when>
            <thetext>I&#39;m thinking about a new config key to achieve this:

  &quot;add-script&quot; :  [
      { &quot;path&quot;: ..., &quot;uri&quot;: ...},
      ....
  ]

The semantics would be: load these scripts like any qooxdoo package, but 
*before* them, so their contents is available when the qooxdoo parts are 
loaded. If the need arises we could extend this key to be a map { &quot;before&quot; : 
[...], &quot;after&quot; : [...] } to signify scripts that should be loaded after the 
qooxdoo parts.

Currently, only the &quot;uri&quot; parameter would matter as there is only a uri 
necessary to load the given file. But I&#39;d like to include an optional &quot;path&quot; 
parameter here, in the case we want to process the file for the build version 
(like variable optimization, space compression etc.).

Speaking of parts, it might be a good idea to specify these external libraries 
on the qooxdoo &quot;part&quot; level, so they will only be loaded when the corresponding 
qooxdoo part is loaded, rather than generally. The &quot;add-script&quot; key would then 
become a subkey of &quot;packages/parts/&lt;part-name&gt;&quot;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13772</commentid>
            <who name="Burak Arslan">burak.arslan</who>
            <bug_when>2009-11-02 11:48:54 +0100</bug_when>
            <thetext>what about libraries that are not just .js files, like openlayers? the library may have its own set of images, css files, javascript files and whatnot.

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13773</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-02 11:59:37 +0100</bug_when>
            <thetext>(In reply to comment #2)
&gt; what about libraries that are not just .js files, like openlayers? the 
library may have its own set of images, css files, javascript files and whatnot.

Good point, haven&#39;t thought about that, but off the top of my head it would 
seem difficult to come up with a general solution.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13793</commentid>
            <who name="Burak Arslan">burak.arslan</who>
            <bug_when>2009-11-02 16:45:59 +0100</bug_when>
            <thetext>(In reply to comment #3)
&gt; (In reply to comment #2)
&gt; &gt; what about libraries that are not just .js files, like openlayers? the 
&gt; library may have its own set of images, css files, javascript files and
&gt; whatnot.
&gt; 
&gt; Good point, haven&#39;t thought about that, but off the top of my head it would 
&gt; seem difficult to come up with a general solution.
&gt; 

you also have apis that have their own loaders, (eg gmaps) that you&#39;re not supposed to cache anyway.

i don&#39;t see how moving the script tag from index.html into config.json would make our lives easier. 

just add the script tag into the index.html, put the required js files inside resources/ folder, add a compiler hint like #asset(OpenLayers/*) and voila, you have your custom code bundled nicely.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13794</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-02 17:23:40 +0100</bug_when>
            <thetext>(In reply to comment #4)
&gt; just add the script tag into the index.html, put the required js files inside 
resources/ folder, add a compiler hint like #asset(OpenLayers/*) and voila, you 
have your custom code bundled nicely.

Sure, go ahead, you&#39;re not forced to do it the other way. But I think we need 
at least a simple foreign-code interface in the generator, and as I said I want 
to use it also internally.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13796</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-02 18:18:49 +0100</bug_when>
            <thetext>plan to work on</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13940</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-05 10:08:50 +0100</bug_when>
            <thetext>This is a carry-over from the mailing list:

&gt; &gt; I
&gt; &gt; have a minified script persisit-all-min.js and a small flash file called
&gt; &gt; persist.swf that I both put into source/script folder of the contribution.
&gt; &gt; It shouldn&#39;t go into source/class since it is not qooxdoo-compliant. Maybe
&gt; &gt; an extra folder &quot;lib&quot; or &quot;vendor&quot; or &quot;external&quot; should be added? Or should
&gt; &gt; it go into &quot;resource&quot;?

Yes, like Sebastian suggested, &quot;resource&quot; would be a good place as these
files are in fact static resources for the app, right?!

&gt; &gt; Now, we either add an key to config.json or - as Sebastian and I would
&gt; &gt; prefer - indicate the dependecy of my contribution class on persist.js
&gt; &gt; with
&gt; &gt; a compiler hint.

See my reply to Sebastian&#39;s posting. I currently feel that putting it in
the config is &quot;cleaner&quot;, and putting them in the class code is somehow
&quot;burrying&quot; the information. Think of a big project with a couple of
hundred classes, maintained by several developers and several classes
using the third-party code. I&#39;m not saying you couldn&#39;t look at it the
other way, it&#39;s just my current angle. While I think the &quot;resource&quot; tree
is a good store for those files, there is a big difference (in my eyes) to
other resources like images: the foreign code is to be automatically
loaded into the index.html. I think this deserves to be more prominent
than just another form of #asset(...).

&gt; &gt; There might be the unlikely but not impossible situation
&gt; &gt; that a different contribution also uses persist.js and thus the code would
&gt; &gt; be loaded twice. Not fatal, but this should be checked by the generator.

Interesting point.

&gt; &gt; When I do a build, the external library needs to be loaded as a dependency
&gt; &gt; of the class in the script file.

Yes, the external library should be loaded. With the approach I see, the
library is somewhat like a &quot;global&quot; dependency of the current app. It&#39;s
not going down to the level of class dependencies. If the class is
required by the application, and the library is required by the class,
then the library is required by the app, right?! For me it&#39;s more
interesting to think about how this would apply to parts.

&gt; &gt; Also, it must be copied over to the build
&gt; &gt; folder for generate.py build.

This would be covered by storing it under &quot;resources&quot; and adding #asset()
hints for them in the using class.

&gt; &gt; If I include the contribution into another
&gt; &gt; project, I should have to deal with this dependency in my own code or
&gt; &gt; config.json, this should be automatically be included into the build jobs.

You are right, and here the current handling falls short. Class code and
resources for contribs are treated. But there are other things that have
to be taken care of, and which are specified in the config.json of the
contrib (foreing libraries for one, but e.g. also compile options). We&#39;ll
have to think about this.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13941</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-05 10:10:20 +0100</bug_when>
            <thetext>And this is another one from the mailing list, referred to in the previous 
comment:


&gt; &gt; I don&#39;t get how to define this in the config file. Basically it&#39;s just
&gt; &gt; another type of dependency. We also do not lost depencies of classes
&gt; &gt; in the configuration.

Oh, yes we do, just remember the &quot;require&quot; config key.

&gt; &gt;  Just the top-level includes.

And I consider these &quot;external&quot; libraries also top-level.

&gt; &gt;  Especially
&gt; &gt; regarding variants etc. it might be useful to have this in the code
&gt; &gt; instead of the configuration. It&#39;s more flexible IMHO.
&gt; &gt;   

That might be something to think about at some point. But compiler hints 
are also variants-ignorant, so they are not very flexible too in this 
regard.

&gt; &gt; Keeping it at class-level might also help when thinking of resources
&gt; &gt; e.g. assets which could be integrated using the already available
&gt; &gt; #asset hints.
&gt; &gt;
&gt; &gt; Maybe this means a pseudo helper class for every external lib, but
&gt; &gt; still might be better than placing it into the config.
&gt; &gt;   

I think the config is good place to start as this is a major change in 
the semantics of the build system. Better than hiding it somewhere in 
class code. Mind that alternatively these libraries go into the index.html.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14020</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-10 11:03:52 +0100</bug_when>
            <thetext>un-focus</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14298</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-23 12:54:59 +0100</bug_when>
            <thetext>This is implemented for the most trivial cases (config key &quot;add-script&quot;), but 
this is insufficient when we want to use it for hybrid-source builds. The 
&#39;data&#39; section of the .js file has to be taken into account, if it is present.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14832</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:26:53 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15007</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-27 10:41:06 +0100</bug_when>
            <thetext>I&#39;m closing this as the basic functionality has been implemented. For a 
&#39;source-hybrid&#39; solution (bug#2008) this is not enough, as qooxdoo-specific 
&#39;data&#39; parts of a file have to be honored, but this can be treated in a 
separate bug.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39116</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:26:27 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>