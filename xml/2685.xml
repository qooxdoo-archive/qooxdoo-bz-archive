<bug>
          <bug_id>2685</bug_id>
          
          <creation_ts>2009-08-14 13:52:00 +0200</creation_ts>
          <short_desc>Add a class for creating a form out of JSON definition</short_desc>
          <delta_ts>2014-03-03 08:45:54 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.form</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          <dependson>2295</dependson>
    
    <dependson>2659</dependson>
          
          <votes>4</votes>
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>andrewm</cc>
    
    <cc>b.collignon</cc>
    
    <cc>gradinf</cc>
    
    <cc>info</cc>
    
    <cc>info</cc>
    
    <cc>johannes.kissel</cc>
    
    <cc>qooxdoo</cc>
    
    <cc>s.barysiuk</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>11341</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-08-14 13:52:19 +0200</bug_when>
            <thetext>The creation of a form can be done much nice with a JSON definition. Perhaps this could be included into the form itself or it needs som sort of its own class.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11343</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-08-14 13:58:41 +0200</bug_when>
            <thetext>Isn&#39;t this somehow related to creating widgets from a JSON configuration? I am still working on a solution here. Just as a note :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11347</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-08-14 14:05:44 +0200</bug_when>
            <thetext>Yes, this is closely related. But I guess you can&#39;t share your work, right?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11356</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-08-14 20:33:13 +0200</bug_when>
            <thetext>I will see. Do you need it until a specific date? Maybe I can share the specification, but not the implementation. Would this be of any help? Maybe one could build on this.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11413</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-08-20 10:48:02 +0200</bug_when>
            <thetext>Sebastian, any of your feedback can be help. ;)
Here is what we had in mind after some vital discussions. It shows the creation of a form.

      {
       clazz: qx.ui.form.Form,
       children:
       [
         {
           type : &quot;Header&quot;,
           label : &quot;Simple Form&quot;
         },
         {
           type: &quot;Item&quot;,
           label: &quot;First Name&quot;,
           validator: null,
           name: &quot;firstname&quot;,
           widget:
           {
             clazz: qx.ui.form.TextField,
             required: true,
             width: 200
           }
         },
         {
           type: &quot;Item&quot;,
           label: &quot;Last Name&quot;,
           widget:
           {
             clazz: qx.ui.form.TextField
           }
         },
         {
           type: &quot;Item&quot;,
           label: &quot;Company&quot;,
           widget:
           {
             clazz: qx.ui.form.TextField
           }
         },
         {
           type: &quot;Item&quot;,
           label: &quot;Email&quot;,
           widget:
           {
             clazz: qx.ui.form.TextField
           }
         },
         {
           type: &quot;Item&quot;,
           label: &quot;Date&quot;,
           widget:
           {
             clazz: qx.ui.form.DateField
           }
         },      
         ////////////
         // BUTTONS
         ////////////     
         {
           type: &quot;Button&quot;,
           widget:
           {
             clazz: qx.ui.form.Button,
             label: &quot;Save&quot;
           }
         },
         {
           type: &quot;Button&quot;,
           widget:
           {
             clazz: qx.ui.form.Button,
             label: &quot;Cancel&quot;
           }
         }
       ]
      }


Here is another example showing the window demo of qooxdoo. We did that to make sure the form JSON fits even in the context of defining the whole ui:

      {
        clazz : qx.ui.window.Window,
        layout : 
        {
          clazz : qx.ui.layout.VBox,
          spacing : 10
        },
        layoutProperties :
        {
          left : 20, 
          top : 20
        },
        showStatusbar : true,
        status : &quot;Demo loaded&quot;,
        caption : &quot;First Window&quot;,
        icon : &quot;icon/16/apps/office-calendar.png&quot;,
        id : &quot;win&quot;,
        listeners : 
        [
          {
            type : &quot;move&quot;,
            handler : function(e) {
              console.log(&quot;Moved to: &quot; + e.getData().left + &quot;x&quot; + e.getData().top);
            }
          },
          {
            type : &quot;resize&quot;,
            handler : function(e) {
              console.log(&quot;Resized to: &quot; + e.getData().width + &quot;x&quot; + e.getData().height);
            }
          }
        ],
        children : 
        [
          {
            clazz : qx.ui.basic.Atom,
            label : &quot;Welcome to your first own Window.&lt;br/&gt;Have fun!&quot;,
            icon : &quot;icon/32/apps/office-address-book.png&quot;,
            rich : true
          },
          {
            clazz : qx.ui.tabview.TabView,
            layoutProperties : {flex:1},
            children : 
            [
              {
                clazz : qx.ui.tabview.Page,
                label : &quot;Page 1&quot;,
                layoutProperties : {flex:1}
              },
              {
                clazz : qx.ui.tabview.Page,
                label : &quot;Page 2&quot;,
                layoutProperties : {flex:1}
              },
              {
                clazz : qx.ui.tabview.Page,
                label : &quot;Page 3&quot;,
                layoutProperties : {flex:1}                
              }              
            ]
          }
        ]
      }
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11431</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-08-21 13:22:27 +0200</bug_when>
            <thetext>I am not sure if it&#39;s a good idea to design the language all around form definition. In my thinking I would prefer to add the features needed to form handling to such a definion, as this is more widely useful IMHO:

      this._mainPane.add(this.build(
      {
        create : qx.ui.tabview.Page,
        id : &quot;composeView&quot;,
        
        set :
        {
          label : this.tr(&quot;Write&quot;),
          icon : &quot;qx/icon/Tango/32/apps/utilities-text-editor.png&quot;
        },
        
        layout : 
        {
          create : qx.ui.layout.Grid,
          set : 
          {
            spacingX : 10,
            spacingY : 10 
          }
        },
        
        add :
        [
          {
            create : qx.ui.basic.Label,
            set : {
              value : this.tr(&quot;What are you doing?&quot;)
            }, 
            position : 
            {
              row : 0, 
              column : 0 
            }
          },
          
          {
            create : qx.ui.basic.Label,
            id : &quot;countdown&quot;,
            set : {
              value : &quot;140&quot; 
            }, 
            position : 
            {
              row : 0, 
              column : 1 
            }
          },
          
          {
            create : qx.ui.form.TextArea,
            id : &quot;composeField&quot;,
            set : {
              liveUpdate : true 
            },            
            listen : [
              { event : &quot;changeValue&quot; }
            ], 
            position : 
            {
              row : 1, 
              column : 0,
              colSpan : 2
            }
          },
          
          {
            create : qx.ui.form.Button,
            id : &quot;composeSendButton&quot;,
            set : {
              label : this.tr(&quot;Update&quot;),
              allowGrowX : false
            },
            listen : [
              { event : &quot;execute&quot; }
            ], 
            position : 
            {
              row : 2, 
              column : 1 
            }
          }
        ]
      }));

This small example might give you an impression.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11434</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-08-21 14:11:42 +0200</bug_when>
            <thetext>I have long-term plans to create a WYSIWYG gui builder with additional functionality somwhat akin to an IDE. A one-way mapping from visually designing the app onscreen to a running qooxdoo application is easy. The difficulty comes when one wants to edit a previously-created app. I&#39;m therefore interested in the ability to create a complete serialized application in JSON format, where the format allows describing all of the same capabilities of the actual javascript application, and then being able to recreate a running application from that format.

Thanks!

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11461</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-08-24 15:43:46 +0200</bug_when>
            <thetext>Thanks for sharing your thoughts. I added a demo which contains a prototype to trunk in the demo browser. 
You can find the demo in
/trunk/qooxdoo/application/demobrowser/source/demo/test/UIDeclaration.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11477</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-08-25 05:19:57 +0200</bug_when>
            <thetext>UIDeclaration looks pretty nice. If you&#39;re interested in meeting my previously stated requirements, I don&#39;t think it quite gets there. There doesn&#39;t appear to be a mechanism for adding &quot;code&quot; that&#39;s executed as part of the process of processing a definition. Here&#39;s a simple example that appears impossible with this format. Let&#39;s say I wanted to know how long it takes to create all of the instances of my objects. I might want to add a lines such as this near the beginning:

var t1 = new Date();

followed by the object instantiations as accomplished by addFormDefinition() and its recursive calls, followed by another request for a timestamp:

var t2 = new Date();
elapsedTimeAtom.setLabel((t2 - t1) + &quot;&quot;);

Granted this is a contrived example, but it shows that there is sometimes a need for arbitrary code to be added at specific places within the definition.

Additionally, it&#39;s not clear how one would manipulate objects from such code. In the above example, where in the definition did I specify that the Atom whose label I would later set to the elapsed time is called elapsedTimeAtom?

Just some additional food for thought.

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11478</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-08-25 05:26:58 +0200</bug_when>
            <thetext>Oh, one more thing... It might be worth talking with Christian about a serialized format. I believe he&#39;s already done nearly everything being discussed for XML, so it could be a simple matter converting his XML format into JSON. Even if not that, it may be worth looking at what he&#39;s done as he has a few years of experience with serialized applications at this point.

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11508</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2009-08-25 10:55:55 +0200</bug_when>
            <thetext>Hi and thanks, Derrell for thinking of (mainly) Siarhei&#39;s and my work on QxTransformer. However, I don&#39;t think this the same project since QxTransformer works server-side and is part of the build process, while the bug seems to me to be about client-side building of widgets. In QxTransformer, we try to abstract as much of the logic that is needed to programmatically build widgets, our ideal is HTML or XUL, a purely declarative syntax. Application logic is put into the &quot;code behind&quot; - see http://sites.google.com/a/qxtransformer.org/qxtransformer/Documentation/component-model . To me, it seems it would make sense to integrate widget serialization here, i.e. the json format that is produced by myWidget.serialize() should be one that can be fed into a build() method. This way, arbitrary widgets (not only forms) could be constructed, serialized, saved in databases, sent safely over the wire, or used in IDEs to save widget templates. Of course, I would love to see an integration of QxTransformer - i think, howver, its strengths are somewhere else...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11537</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-08-25 16:54:44 +0200</bug_when>
            <thetext>Just my 2 cents, Martin:

Is this basically the example you have written in comment #4? 

* It&#39;s highly focused on forms as there are validators, labels etc. in focus of the definition.
* I highly dislike the usage of &quot;clazz&quot; as a name in user code. &quot;create&quot; from my suggestion is much friendlier IMHO.
* I would prefer to have the properties combined in a separate map. Currently it seems to mix up with &quot;clazz&quot;, &quot;layout&quot;, etc. which is not that elegant IMHO.
* Another issue is that I do not like to have real JS code inside the definition. In my idea one just say register &quot;this&quot; event and it automatically attaches this to a specific listener. This listener name is generated by the ID of the widget e.g. &quot;Message&quot; and the event type e.g. &quot;input&quot;. So you might have &quot;_onMessageInput&quot;. This should be done automatically - without configuration - as it leads to a clear standard. Convention over configuration here again ;)
* &quot;layout&quot; and &quot;layoutProperties&quot; in one level may be quite irritating. As layout properties basically control the position of that widget it might be handier to just call it &quot;position&quot;. So you might have &quot;layout&quot; to configure the inner layout and &quot;position&quot; to configure the positon inside the parent.

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11542</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-08-25 17:23:59 +0200</bug_when>
            <thetext>Sebastian, thanks for your comments. Relax ;-), this example is not meant to showcase any final specification, it&#39;s neither consistent nor polished yet. It&#39;s been put into the &quot;test&quot; folder so that people can simply get a basic idea and can play around with it (and adjust the format and its processing). 

There were some valuable suggestions from you and others already, we just wanted to get some code to experiment into the wild. Feedback from all interested people appreciated.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11551</commentid>
            <who name="Siarhei Barysiuk">s.barysiuk</who>
            <bug_when>2009-08-25 19:50:38 +0200</bug_when>
            <thetext>Hi guys,

Serialization is a really interesting topic and it touches upon qxt since it works with serialized data - XML. But I wouldn&#39;t rely on existing XML format that we have because it&#39;s just a replication of existing structure.

I think it would be good to come up with some standard format for both JSON and XML (they are similar though) at first step which covers all widgets, different ways to add widget to parent, other aspects. I&#39;m not talking about forms, it&#39;s more general idea. It&#39;s a bit hard because there are a lot of exceptions from the rules.

Once you have such a format, you can go further and add possibility to serialize content to all widgets (owns and children&#39;s). So, widget.serialize(&lt;format:[json|xml]&gt;) returns own and children&#39;s content.

I think you had something similar in 0.5(?) version, I don&#39;t remember name exactly, but something like XMLBuilder or so to build GUI from XML.

What regarding new XML format and qxt support. It&#39;s very easy with dialects. It allows user to define own dialect and connect it with templates set. That&#39;s it. You can have any count completely different XML dialects but produce the same qooxdoo code (actually any code).

So, some my unstructured thoughts on serealization and qxt support. :)

Siarhei   

 </thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17933</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-04-22 16:24:53 +0200</bug_when>
            <thetext>(In reply to comment #11)
&gt; * Another issue is that I do not like to have real JS code inside the
&gt; definition. In my idea one just say register &quot;this&quot; event and it automatically
&gt; attaches this to a specific listener. This listener name is generated by the ID
&gt; of the widget e.g. &quot;Message&quot; and the event type e.g. &quot;input&quot;. So you might have
&gt; &quot;_onMessageInput&quot;. This should be done automatically - without configuration -
&gt; as it leads to a clear standard. Convention over configuration here again ;)

I didn&#39;t get where the &quot;real JS code&quot; for listeners would be. Do you mind explaining a little further?

Can you show me how to get the generated object with an id, for example, #composeField?
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17976</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2010-04-26 09:19:15 +0200</bug_when>
            <thetext>@Guilherme: The &quot;real&quot; code is placed inside your members and just follows a naming convention created through this layer. Depending on the ID and event name the implementation automatically looks for a specific method in your members which is bound to the event e.g. &quot;click&quot; event type + &quot;send&quot; button id =&gt; &quot;_onSendClick&quot; as function name in your members. So you need to implement this method and place the logic there. Hope this helps.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17997</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-04-26 13:46:24 +0200</bug_when>
            <thetext>@Sebastian, what else &quot;listen&quot; can define besides &quot;event&quot;s? Because if &quot;event&quot; is the only thing that can be listen then we could do something like that:

listen: {
     &quot;changeValue&quot;: &quot;_onChangeValue&quot;,
     &quot;changeLabel&quot;: &quot;_onChangeLabel&quot;
}

What do you think?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18032</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2010-04-26 21:09:26 +0200</bug_when>
            <thetext>@Guilherme:
I don&#39;t like to have an option to specify the function name because this leads to the current diversity in names. It&#39;s IMHO much easier and more structured - especially in larger apps - to make this stuff following some kind of convention (which is done by auto-generating the names)

@All:
I have just comitted our implementation of the builder to our fork of qooxdoo:
http://github.com/unify/qooxdoo/blob/master/qooxdoo/framework/source/class/qx/ui/core/MBuilder.js
Feel free to commit this to qooxdoo itself as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18033</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2010-04-26 21:12:24 +0200</bug_when>
            <thetext>BTW: The best place to be included for such a builder class is some kind of view class (not a widget) e.g. PreferencesWindow, MailListView, HtmlEditorView, FolderView etc.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18053</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-04-27 18:50:50 +0200</bug_when>
            <thetext>Based on the Sebastian&#39;s implementation I went a little bit further and I&#39;m very happy with what I achieved. But before I share some code I want your opinion about something:

1) Multiple args setting: for example rowFlex, columnFlex in a layout needs 2 params to work:

layout.setRowFlex(1,1);

I solved that partially by expecting an array of args :
set:
{
    rowFlex: [0, 1]
}

But, that way I can&#39;t have more than one setRowFlex() call per layout. Since it&#39;s perfect possible &gt;1 setRowFlex() and it&#39;s an UI info, I would like to deal with that in the JSON declaration.

I&#39;m looking for ideas here.

2) qooxdoo needs to have a Form Interface. I suggest renaming IForm to something like IFormItem or IFormField and creating a new IForm defining some methods like:

	addButton : function(button)	{},
	reset : function () {},
	getItems : function () {},
	validate : function () {},
	redefineResetter : function () {},
	getValidationManager : function () {}

It&#39;s important for the declaration to know when it&#39;s creating a Form element. I tried not to create a custom code just to the form definition in the Builder but in the end, it is a special case and need to be treated that way. 
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18086</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2010-04-28 19:54:10 +0200</bug_when>
            <thetext>@Guilherme: This Grid is quite complex, right. I would think that it might be the best to offer some hooks in the definition which call layout/widget-specific code. This might also work well with the form stuff. I am not exactly sure about this since it&#39;s nothing I have used or developed yet. 

About the suggested changes to the forms, I think this is something, where Martin could help out. In my opinion for both, the Grid and Form stuff we need something more advanced, but I really like the current format for its simplicity. Best would be to keep it as it is - simple for simple stuff - but find a way to elegantly have support for advanced features as well.

Unfortunately, I have currently no spare time to spend more time on the topic.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18087</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-04-28 21:09:03 +0200</bug_when>
            <thetext>@Sebastian, here is what I came up with: http://gist.github.com/382513#file_m_builder.js

It&#39;s mainly based on your&#39;s implementation but added some things like:



bind: eg.:
              bind:
              {
                      { target: obj/id, property: &quot;value&quot;, targetProperty: &quot;anotherValue&quot; } 
               }

You can add a binding to object&#39;s id&#39;s that wasn&#39;t created yet. For example, I can add a binding to target: &#39;x&#39;, being &#39;x&#39; a reference to an object that will be created later on the same JSON declaration.





add*: It will create and add objects to methods that its name starts with &quot;add&quot;. It can be just &quot;add&quot; or &quot;addSomethingElse&quot;. For example, in my Form I have an &#39;addButton&#39; method:

                         addButton:
		          [{
		            create : qx.ui.form.Button,
		            id : &quot;resetButton&quot;,
		            set : {
		              label : this.tr(&quot;Reset&quot;)		              
		            },
		            listen : [
		              { event : &quot;execute&quot; }
		            ]
		          }]




Layout&#39;s Multi-Set: You can use the &#39;set&#39; like so:

set:
{
       rowFlex: [1,1], // just a simple .setRowFlex(1, 1);
       columnFlex: [[1,1], [2,1]], // .setColumnFlex(1,1) and .setColumnFlex(1,2)
       anotherAtt: [[[1,1]]]  // .setAnotherAtt([1,1])
}

Since the last one is the least frequent usage I think it&#39;s ok to be a little weird. For the built-in layouts the last method won&#39;t be used.



Init: it can call a &quot;init&quot; function after the element&#39;s creation.



Lazy: you can set &quot;lazy: true&quot; to your declaration. Doing so, its children will be created only when the element fires the &quot;appear&quot; event.




Forms: The form class extends from qx.ui.container.Composite, so it will allow you to design your form the way you like, setting the layout you choose. No need for a renderer. It uses the Martin&#39;s controller.Form with some changes to be more flexible. 


Here a example using a little bit of everything: http://gist.github.com/382556

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18109</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-04-29 16:35:54 +0200</bug_when>
            <thetext>I updated the code at github to support form items that implement ISingleSelection. To load and set data like so:

           create: qx.ui.form.SelectBox,
	   id: &#39;selectBox&#39;,
	   position:
	   {
		   row: 3,
		   column: 1
	   },
	   model:
	   {
                   // LOAD DATA FROM THE SERVER
		   store:
		   {
				create: qx.data.store.Json,
				set:
				{
					url: &quot;http://localhost/playground/pub/test.json&quot;
				},
				path: &quot;items&quot;
				
		   },

                   // OR SET DATA DIRECTLY
		   data:
		   [
			{name: &quot;male&quot;, id: 1}, 
			{name: &quot;female&quot;, id: 2}, 
			{name: &quot;dont know!&quot;, id: 3}, 
			{name: &quot;Alien&quot;, id: 4}
		  ],
                  // what to show
		  label: &quot;name&quot;,
                  // what to retrieve to serialize, null to return the whole object
		  id: &quot;type&quot;
	   }</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18243</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-05-06 19:14:35 +0200</bug_when>
            <thetext>After looking at this code: http://tinyurl.com/3yjpkft I think the &quot;listen&quot; should be more flexible. So we could do:

listen:
{
      {
             event: &quot;execute&quot;
      },
      {
            event: &quot;execute&quot;,
            handler: &quot;_onExecuteMethod&quot;
      },
      {
           event: &quot;execute&quot;,
           handler: this._onexecuteMethod
       }
}

I&#39;m using my own set() method to support nested attributes like:

create: qx.ui.form.Form,
set:
{
      &quot;validationManager.validator&quot;: this._validateForm // form.getValidationManager().setValidator(this._validateForm);
}

And I updated the gist to support a much nicer &quot;model&quot; declaration:

I&#39;m always using stores to get the data, for that I created an ArrayStore: http://gist.github.com/392386

ps: I hope you don&#39;t mind I&#39;m writing all my ideas here.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18362</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-05-18 15:08:16 +0200</bug_when>
            <thetext>Before I forget about it, I would like to propose an &quot;use&quot; attribute to be used instead of &quot;create&quot; if the object already exists somehow. In other words, if there isn&#39;t a &quot;create&quot; attribute, try the &quot;use&quot; one without instantiating.

It&#39;s useful for stores, for example. When it has to be the same object (store) for 2+ different windows.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22390</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2011-01-24 11:59:43 +0100</bug_when>
            <thetext>After using my little library for creating UIs for the last months I&#39;m pretty sure a declarative approach is the best approach for the UI. But...

There is another way to deal with it. The AmpleSDK and APF frameworks (maybe others) have a killer feature that let your define your UI inside your HTML (or a external file) using XML, for example: http://www.amplesdk.com/examples/markup/xul/views/

That allows them to abstract the API used to create the UI, allowing them to change the API without changing how you declare your interface. The hierarchal nature of XML is a plus and fits very well in a HTML world. It&#39;s natural for people that already code in HTML.

The concept of inline and standalone apps could be abstracted out too. One last thing to worry about from an app developer point of view.

What do you think? How much work would be necessary to do something like that? I know it&#39;s not a easy task to do because qooxdoo wasn&#39;t developed to work that way. But the pros of that approach are well worth the effort IMO. It could increase considerably the speed of development. Maybe something to think about to add in a 2.0 release.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22395</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-01-25 08:15:17 +0100</bug_when>
            <thetext>(In reply to comment #25)
&gt; After using my little library for creating UIs for the last months I&#39;m pretty
&gt; sure a declarative approach is the best approach for the UI. But...
Thanks for sharing your experience. :)

&gt; There is another way to deal with it. The AmpleSDK and APF frameworks (maybe
&gt; others) have a killer feature that let your define your UI inside your HTML (or
&gt; a external file) using XML, for example:
&gt; http://www.amplesdk.com/examples/markup/xul/views/
&gt; 
&gt; That allows them to abstract the API used to create the UI, allowing them to
&gt; change the API without changing how you declare your interface. The hierarchal
&gt; nature of XML is a plus and fits very well in a HTML world. It&#39;s natural for
&gt; people that already code in HTML.
I&#39;m not a big fan of XML but you have a good point which how HTML is used. Thats definitely something we should think about when we tackle this topic.

&gt; The concept of inline and standalone apps could be abstracted out too. One last
&gt; thing to worry about from an app developer point of view.
&gt; 
&gt; What do you think? How much work would be necessary to do something like that?
&gt; I know it&#39;s not a easy task to do because qooxdoo wasn&#39;t developed to work that
&gt; way. But the pros of that approach are well worth the effort IMO. It could
&gt; increase considerably the speed of development. Maybe something to think about
&gt; to add in a 2.0 release.

I have no idea how much work we need to put in to get something like that working. As you said, its not easy because qooxdoo has a lot of different UI patterns which all need to be adressed. As for time, I think its one of the biggest topics we have if you consider also an UI builder following the declarative format which means, can&#39;t tell you when we are going to get that started and done.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>25044</commentid>
            <who name="Benoît Collignon">b.collignon</who>
            <bug_when>2011-06-10 10:14:29 +0200</bug_when>
            <thetext>Hi,

It&#39;s quite interesting to read this kind of topic because I just coded my own form ctrl factory static class, a &#39;templated&#39; form renderer class and my own validation class, trying to continue to use a maximum of existing classes and qx concepts as well... 

The form ctrl factory tries build forms using definitions like this one (totally unclear but I can explain later if desired) :

datas = [
		{
			type: &#39;group&#39;|&#39;button&#39;|&#39;widget&#39; [default],
			name:&lt;string&gt;,
			label:&lt;string&gt;, 
			value: []|&lt;string&gt;|&lt;bool&gt;,
			widget:&lt;string&gt;|&lt;function&gt;|&lt;object&gt;, // &quot;qx.ui.form.Textfield&quot; [default for &#39;widget&#39; type], &quot;qx.ui.form.Button&quot; [default for &#39;button&#39; type]
			required:&lt;bool&gt;,
			rules:
			[
				&lt;string&gt;, // function name to call
				&lt;function&gt;,
				{
					fn:function(val, ? ctrl) // ctrl = optional =&gt; global form controler
					{
						...
						this.setValid(true|false);
						
						return &lt;bool&gt; (validation case) |&lt;any&gt; (value modif case)
					},
					error_msg: &#39;&#39;,
					async: true|false // =&gt; can specify if the initial widget model will be available using a remote request for example 
				},
				{
					...
				}
			],
			model: []|&lt;qx.data.model&gt;|&lt;function&gt;(?ctrl) =&gt; if &quot;this&quot; is used, it equals to the widget object, return (&lt;qx.data.model&gt;|[]),
			options: &lt;object&gt; .. {rendersIn: function(items) {} } 			
			[, &quot;additionalPropertyOfTheWidgetToBeSet&quot;:, callback: function( ?valid) {}, validate: &lt;bool&gt;] // validate mentions if the validation process must achieved before calling the callback function 
		} ...
]

Currently, I&#39;m able to manage most of the existing form widgets, async data loading and validation. I didn&#39;t test all the possibilities though and my factory doesn&#39;t take into account widget events but I&#39;m happy with it (it&#39;s of course still possible to make some additional calls when the form is build).

My templated form renderer class extends the abstract renderer and can be created like this:

new form.renderer.Templated(ctrl.getTarget(), function(formitems, formgroups, formbuttons, ?eventualLayoutParentOrAdditionalOptionData){ ... }, ?eventualLayoutParentOrAdditionalOptionData) where formitems, formgroups are maps with the [name] property as index... // formitems are special ones because each item is of this form &quot;name:{label:,item:}&quot;

Unlike in the previous posts, I don&#39;t consider that forms definition should contain layout properties because it only concerns data and widgets that handle it (and because I also want to continue follow the current main idea of the form renderers). 

To be honest, this work is not really completed. My code is a bit awful (cleaning operations needed) and I still have to make more unit testing... But I can of course share it in a near future if it&#39;s useful for most of us (and examples as well)!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>25058</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-06-10 13:12:53 +0200</bug_when>
            <thetext>Thanks for your input. We get back to is as soon as we are going to address this issue.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26099</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2011-07-19 15:51:55 +0200</bug_when>
            <thetext>I just want to add that I think models should have a global scope in the app. It&#39;s a lot easier to develop that way. That&#39;s the way ExtJS, APF and sproutcore do. And think about it, if you define them globally doesn&#39;t matter how you layout your UI, it much easier to change later. So, my new proposed syntax would be:

{
   create: &quot;form&quot;,
   model: &quot;employeeModel&quot;,
   add:[
   {
      create: &quot;qx.ui.form.Select&quot;,
      id: &quot;my_select&quot;,
      model: &quot;citiesModel&quot;,
      value: &quot;address.city_id&quot;,
      item_label: &quot;name&quot;,
      item_value: &quot;id&quot;
   }]
}

employeeModel data sample: 
{
   id: &quot;1&quot;,
   name: &quot;X&quot;,
   address: {
      city_id: &quot;c1&quot;,
      number: &quot;23&quot;,
      street: &quot;X st&quot;
   }
}

citiesModel data sample:
[{
   id: &quot;c1&quot;,
   name: &quot;City A&quot;
},
{
   id: &quot;c2&quot;,
   name: &quot;City B&quot;

}]


Do you have any estimation on when you&#39;ll be able to take a look at this?
It would improve considerably the development speed.

Another benefit would it be to be able to load parts of the UI on demand easily. 
Because you could evaluate at runtime the JSON definition and include the generated UI wherever you want.

That could be used to improve development time, because when changing just part of the UI, you wouldn&#39;t need to reload all the page, qooxdoo code, etc. You would just reload the part you have changed.

I&#39;ve being doing that for the last of 2 months in APF and it decreases CONSIDERABLE the amount of time just waiting to something to load.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26118</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-07-20 10:36:56 +0200</bug_when>
            <thetext>(In reply to comment #29)
&gt; Do you have any estimation on when you&#39;ll be able to take a look at this?
&gt; It would improve considerably the development speed.

We are totally aware of that and hope to get to that topic soon. But as always, can&#39;t tell any date when the development will continue on that because that quite a huge topic which needs some manpower to get it done right.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35336</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:45:54 +0100</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>