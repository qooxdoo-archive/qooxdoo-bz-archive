<bug>
          <bug_id>2725</bug_id>
          
          <creation_ts>2009-08-27 10:52:00 +0200</creation_ts>
          <short_desc>Predictable Textual Compile Output</short_desc>
          <delta_ts>2014-03-03 15:19:22 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>4148</dup_id>
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.6</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>11619</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-08-27 10:52:51 +0200</bug_when>
            <thetext>Compiling the same source twice, without any changes, does not necessarily lead 
to identical outputs - &quot;identical&quot; meaning *textually* identical (the kind of 
identity that would be recognizable by the Unix &quot;diff&quot; tool). Of course they&#39;re 
the same on the level of, say, operational semantics. 

The differences are basically

  * permutations
  * renamings

Permissible permutations (i.e. not changing the semantics of the code) can 
happen among non-sequential code parts, e.g. in a map &quot;term1&quot;: ..., &quot;term2&quot;: 
... becomes &quot;term2&quot;: ..., &quot;term1&quot;: ... Permissible renamings can happen under 
alpha-equivalence in optimization, e.g. function(){ var a=&quot;foo&quot;, b=&quot;bar&quot; .. 
becomes function(){ var a=&quot;bar&quot;, b=&quot;foo&quot;... with consistent usage of a and b in 
the function body.

These textual differences make it hard to decide whether two compile outputs 
are semantically the same, i.e. represent the same functionality. For example, 
outputs cannot be compared with a simple diff in unit tests, whic makes it much 
harder to assure no regression has crept in. As another use case, people use 
hash codes over the compile output to decide whether the file has changed and 
has to be updated in a production environment. It would be beneficial if the 
generator would always generate textually identical outputs from same sources, 
on all platforms.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26073</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-07-18 11:26:05 +0200</bug_when>
            <thetext>there is supposed to be another bug where this issue was adressed</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27711</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-11-30 15:34:42 +0100</bug_when>
            <thetext>(Hate to forward-link duplicates, but the other bug has already been resolved).

*** This bug has been marked as a duplicate of bug 4148 ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36457</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:22 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>