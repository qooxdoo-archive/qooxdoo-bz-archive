<bug>
          <bug_id>2469</bug_id>
          
          <creation_ts>2009-06-10 16:04:00 +0200</creation_ts>
          <short_desc>Variable optimizer in build generator causes variable name collision</short_desc>
          <delta_ts>2014-03-03 15:27:44 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stefan Volbers">volbers</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10356</commentid>
            <who name="Stefan Volbers">volbers</who>
            <bug_when>2009-06-10 16:04:45 +0200</bug_when>
            <thetext>In rare cases the variable names the build generator creates collide with names already existing in the source. Appears as if original variable names consisting of only one single letter do not get translated/optimized, but also not blacklisted.

In the following variation of the skeleton app, chances are that when you issue a
&#39;./generate.py build&#39; (checked on qooxdoo 0.8.2 SDK),
the generator translates the button &#39;test&#39; to &#39;e&#39; while leaving the original var &#39;e&#39; as it is, so that the event listener line then reads like:

g.addListener(b,function(e){f.add(e,{left:150,top:150});

which then breaks the built app (while source certainly works).
Hint: look in your build/script/testoptvar.js around line 4000. If your generator feels like spending other var names, you may wanna variate the name for the event variable in the listener function (button1.addListener(&quot;execute&quot;, function(x)) for reproducing the error. Remember this &quot;x&quot; won&#39;t get touched by gen.

Test app:

qx.Class.define(&quot;testoptvar.Application&quot;,
{
  extend : qx.application.Standalone,
  members :
  {
    main : function()
    {
      this.base(arguments);
      if (qx.core.Variant.isSet(&quot;qx.debug&quot;, &quot;on&quot;))
      {
        qx.log.appender.Native;
        qx.log.appender.Console;
      }
	  
      var button1 = new qx.ui.form.Button(&quot;First Button&quot;);
      var doc = this.getRoot();
      doc.add(button1, {left: 100, top: 50});
      var test = new qx.ui.form.Button(&quot;Just a test&quot;);
	  
      button1.addListener(&quot;execute&quot;, function(e) {
	doc.add(test, {left: 150, top: 150});
        alert(&quot;Hello World!&quot;);
      });
    }
  }
});</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10999</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-07-22 16:51:09 +0200</bug_when>
            <thetext>Seems like a major issue to me, as it could easily affect regular user code, so adjusted parameters accordingly. Thomas, could you please confirm that?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11325</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-08-13 15:22:16 +0200</bug_when>
            <thetext>.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11671</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-08-27 18:12:01 +0200</bug_when>
            <thetext>The issue is not immediately reproduceable in current trunk, but that&#39;s what 
the reporter expected. I ran the test code through the debugger and convinced 
myself that the parameter &#39;e&#39; of the event listener is in fact blacklisted 
(i.e. is in the set of names which is checked against when creating optimized 
names for variables in the main() function). I believe this bug has been fixed 
in trunk in April (r18737) without a bug for it. The commit message said &quot;fixed 
bug in variable optimizer where names that were declared (&#39;var&#39; or param) but 
never used could be captured&quot;, which matches the situation described in this 
bug.

With r18737.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39572</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:27:44 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>