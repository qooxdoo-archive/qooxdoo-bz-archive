<bug>
          <bug_id>2422</bug_id>
          
          <creation_ts>2009-05-26 17:48:00 +0200</creation_ts>
          <short_desc>Capture JavaScript errors</short_desc>
          <delta_ts>2014-03-03 15:26:30 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.test.automation</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Wagner">daniel.wagner</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10137</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-05-26 17:48:25 +0200</bug_when>
            <thetext>Currently, there is no way to log JavaScript exceptions in a tested application. In fact, they would go completely unnoticed if IE didn&#39;t open an error dialog, causing the test to freeze until a timeout is reached.

Mozilla has a &quot;Console service&quot;[1] that can be used to listen for messages on the error console.

[1]https://developer.mozilla.org/en/Console_service#Application_developer_point_of_view</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10139</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-05-26 17:57:56 +0200</bug_when>
            <thetext>Apparently the console service is only accessible from within trusted browser extensions for security reasons.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10141</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-05-26 18:16:56 +0200</bug_when>
            <thetext>Digging deeper, the UniversalXPConnect feature allows access to browser internals, but must be enabled in the user profile (prefs.js).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10561</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-06-24 18:40:57 +0200</bug_when>
            <thetext>Since qooxdoo now has built-in support for global error handling, I&#39;ve removed the Mozilla Console Listener code from Simulation.js and replaced it with the native qooxdoo functionality.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10871</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-07-13 16:46:31 +0200</bug_when>
            <thetext>Global error logging is now implemented in the Test Runner, Playground, Feed Reader and API Viewer tests. It is currently commented out in the Demo Browser test (where a global error handler would be added to each demo) since that test is fairly unstable already and I doubt adding even more Selenium commands will improve it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39132</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:26:30 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>