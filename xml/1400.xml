<bug>
          <bug_id>1400</bug_id>
          
          <creation_ts>2008-09-17 12:36:00 +0200</creation_ts>
          <short_desc>Native JSON support</short_desc>
          <delta_ts>2014-03-03 15:19:18 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc>http://blogs.msdn.com/ie/archive/2008/09/10/native-json-in-ie8.aspx</bug_file_loc>
          
          
          <priority>P1</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.0.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Ecker">qooxdoo</reporter>
          <assigned_to name="Fabian Jakobs">fabian.jakobs</assigned_to>
          <cc>helder.magalhaes</cc>
    
    <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>5557</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2008-09-17 12:36:43 +0200</bug_when>
            <thetext>From the IEBlog at http://blogs.msdn.com/ie/archive/2008/09/10/native-json-in-ie8.aspx

&quot;The Jscript engine for IE8 (as of Beta 2) has a full native implementation of JSON that significantly improves the speed of serialization, deserialization and improves the overall safety of parsing untrusted payloads while maintaining compliance with JSON support as described in ES3.1 Proposal Working Draft. [...] So if you are using eval() or even your own JSON library, consider checking for the native implementation in IE8 to get increased performance and safer operation.&quot;

Start using native JSON once IE8 or other browsers with native JSON support become available ( Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=408838 or Safari: https://bugs.webkit.org/show_bug.cgi?id=20031 )</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7778</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-02-16 14:00:19 +0100</bug_when>
            <thetext>Native JSON in Firefox 3.1:
http://blog.mozilla.com/webdev/2009/02/12/native-json-in-firefox-31/

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7780</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-02-16 14:01:06 +0100</bug_when>
            <thetext>*** Bug 1951 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7785</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-02-16 14:44:02 +0100</bug_when>
            <thetext>If we use native JSON it must be clear that our current approach to encode Date in JSON-RCP will no longer work. It should be discussed whether it still makes sense to have special support for date data types. This essentially blocks us from using native JSON encoding and deconding on the client and on the server side.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7793</commentid>
            <who name="Andreas Junghans">andreas.junghans</who>
            <bug_when>2009-02-16 17:35:48 +0100</bug_when>
            <thetext>Good point about the Date handling. It sure is nice to have transparent Date support (without having to traverse the whole object tree to parse Date strings, which can be a considerable performance hit). But switching to native JSON parsing seems more important to me in the long run, so I think the Date handling can be removed in trunk.

@Derrell: Any thoughts on this?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7794</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-16 17:38:06 +0100</bug_when>
            <thetext>I think the same. Native JSON parse capabilities are higher priority than customized date handling. Are there any other widely-used ideas how to deal with dates in JSON and still being compatible?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7797</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-02-16 17:57:55 +0100</bug_when>
            <thetext>Yes, I have strong feelings about this. I find it ludicrous that JSON doesn&#39;t support dates in some standardized fashion, but it is critical, as far as I&#39;m concerned, that dates be supported. That doesn&#39;t mean, however, that they the current inefficient implementation must always be used. The PHP backend already has provisions for using &quot;native&quot; encoders if the user specifies that date support is not required. I&#39;d propose something similar on the frontend. If date support isn&#39;t required then use the fast, efficient, built-ins; and if it is necessary, continue to use the existing mechanism.

Dates are just sooooooo important of a feature to be able to transfer reliably from client to server that it&#39;s completely unreasonable not to support them properly.

Sigh.

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7803</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-02-17 09:16:02 +0100</bug_when>
            <thetext>@Derrell,

what&#39;s wrong with just transferring the numeric time value as returned by Date.getValue()? It&#39;s as easy as &quot;new Date(value)&quot; to convert it back to a Date instance. Since JavaScript has no buildin Date literal I don&#39;t feel it belongs into a JSON file.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7804</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-17 09:20:18 +0100</bug_when>
            <thetext>I think the issue is that in this case it is no Date instance already when trying to work with it. I don&#39;t think that&#39;s a huge topic, but it is a change from the previous solution. Other then that I would really prefer such a solution. The argument that there is no built-in literal for Dates is really good.

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7808</commentid>
            <who name="Andreas Junghans">andreas.junghans</who>
            <bug_when>2009-02-17 10:23:46 +0100</bug_when>
            <thetext>I agree with Derrell that native Date support is a big benefit. There&#39;s no doubt about the interpretation of a transmitted date (&quot;UTC&quot; is right there in the value!), it&#39;s convenient to work with, and it&#39;s fast. If you&#39;re transmiting lots of Date values, walking the tree to convert numbers (or strings) to dates can take some time.

For me, the main argument for dropping the current Date handling (NB: I&#39;m the one who introduced it in the first place) is standards compliance. Swimming against the stream (in this case the upcoming native JSON parsers) is always a problem. It means more code, less security checks, and possible compatibility problems. For example, eval() can handle keys like {key:&quot;value&quot;} just fine (without the quotes), while some JSON libs in other languages don&#39;t like them (and rightfully so). Using a native parser would enforce proper syntax. Validation of JSON results also becomes a non-issue (for the framework), which makes it much safer to exchange JSON data with unknown servers. Since you don&#39;t have to resort to complex regexes, you get good performance and good security at the same time - at least that&#39;s the idea ;-)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7809</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-17 10:36:08 +0100</bug_when>
            <thetext>Just want to mention that normally there is no need to post-process the tree to translate all date strings to date instances. This can happen in the user code, where the variable is accessed as well. Normally one knows about the content of a specific path in the &quot;tree&quot; so that it could easily be processed there in the application code.

Security and performance are really good arguments as well. Dealing with two different ways to parse JSON is not a good idea though as it would additional overhead to the code base. 

To interpret JSON the standard way is also best for people worked with other solutions before. This is even more compatible to other frameworks that might be used in conjunction with qooxdoo.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7838</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-02-17 15:59:44 +0100</bug_when>
            <thetext>I&#39;m also in favor of being/becoming standards compliant here. 

One thing to note is that the actual conversion to Date objects (or to rather arbitrary instances when implementing kinda class hinting) could be handled &quot;on-demand&quot; by the application code, instead of expensive post-processing of all the data. Sure, it&#39;s much nicer to have that handled transparently some place else, unfortunately JSON implementations won&#39;t let us do so ...

What could be of interest to application developers is to use the optional &quot;reviver&quot; capability. AFAIK only IE8 offers such a user-defined function (FF3.1+ anyone?). It is applied to all nodes, and therefore I expect significant drops in performance. Maybe future JS engines are able to seamlessly blend such functions into their jitted code, just a guess. IE won&#39;t be the browser to spearhead this, though.

Talking of the &quot;on-demand&quot; conversion at access time in an application, I also like to add that much of the JSON handling of future qooxdoo apps may be done with the data binding layer currently being developed. Converting specific model data to Date objects (and vice versa, even including incremental caching of converted objects) could probably handled quite easily using data binding features.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8086</commentid>
            <who name="Helder Magalhães">helder.magalhaes</who>
            <bug_when>2009-02-26 13:11:48 +0100</bug_when>
            <thetext>(In reply to comment #10)
&gt; To interpret JSON the standard way is also best for people worked with other
&gt; solutions before. This is even more compatible to other frameworks that might
&gt; be used in conjunction with qooxdoo.

I generally agree with standards here. Nevertheless, I&#39;ve always been a fan of this qooxdoo extension to JSON so I seriously recommend submitting it to an appropriate mailing list [1] for evaluation/discussion, so that the qooxdoo extension can possibly be part of a future version of the standard [2] (or commonly agreed to be a bad idea for security and interoperability reasons).

Regards,
 Helder Magalhães

[1] http://tech.groups.yahoo.com/group/json/
[2] http://www.ietf.org/rfc/rfc4627.txt</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8885</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-03-24 19:34:38 +0100</bug_when>
            <thetext>Too important to be left unassigned...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10698</commentid>
            <who name="Helder Magalhães">helder.magalhaes</who>
            <bug_when>2009-07-01 12:14:11 +0200</bug_when>
            <thetext>(In reply to comment #12)
&gt; [...] I&#39;ve always been a fan of this [the date] qooxdoo extension to JSON so I
&gt; seriously recommend submitting it to an appropriate mailing list [1]
&gt; for evaluation/discussion

For the record, although I see this as a good idea, as this isn&#39;t part of the standard and so not supported by (both client-side and server-side) implementations in an interoperable way, we are not using it: currently, we are sending dates in a two integer array, first meaning seconds and the second meaning the fraction within the second. Of course this is only to be seen as an example, although it sounds like a compact and intuitive way to specify dates in a JSON-friendly way. :-)


(In reply to comment #11)
&gt; Converting specific model data to Date objects (and vice versa, even including
&gt; incremental caching of converted objects) could probably handled quite easily
&gt; using data binding features.

+1 for this approach. Basically that&#39;s similar to we are already doing: using a shared date object to perform the conversion (in the client-side component). Using the data binding capabilities would probably be even simpler and more intuitive. ;-)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10788</commentid>
              <attachid>549</attachid>
            <who name="Colin Snover">bugzilla.qooxdoo.org</who>
            <bug_when>2009-07-04 23:54:32 +0200</bug_when>
            <thetext>Created attachment 549
A test to evaluate speed difference between eval and JSON.parse with a callback function

I created a fairly hacky test script that iterates 50 times over a generated string of JSON containing 1000 fake jCard records (attached), and then re-serializes them.

Execution against Firefox 3.5 shows these numbers:

JSON.parse
Min: 72
Max: 905
Avg: 91.54
Avg w/o outliers: 75

JSON.stringify
Min: 33
Max: 446
Avg: 42.34
Avg w/o outliers: 34.125

qx.util.Json.parseQx
Min: 21
Max: 574
Avg: 44.06
Avg w/o outliers: 33.5

qx.util.Json.stringify
Min: 231
Max: 2482
Avg: 329.36
Avg w/o outliers: 286.5625

JSON.parse seems to be about 75% slower than the current method of doing a straight eval. However, JSON.stringify is 778% faster than the current stringify method.

I personally believe that the extra protection against XSS attacks that JSON.parse provides is worth the performance decrease on the deserialization side, and of course the disproportionately higher performance of JSON.stringify speaks for itself. (This performance benefit will also be realized on server-side JSON encoding, though probably to a lesser extent. I haven’t looked at that.)

Hope this is helpful!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10954</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-07-17 15:54:37 +0200</bug_when>
            <thetext>Maintaining our current implementations seems to becomes more and more a problem
(cf. #2078, #2565). As mentioned in bug #2565 I would suggest:

1. deprecate qx.util.Json
2. create qx.bom.Json, which wraps the native JSON object on browsers, which support it
and closely emulate it if it is not available.
3. replace all uses of qx.util.Json with qx.bom.Json

The main problem will be Date support. However the native JSON object supports custom 
serializer and deserializer, which could be used to emulate the old Date support if 
necessary.

Here are examples from the standard document:

* parse json and convert date strings to date instances:

myData = JSON.parse(text, function (key, value) {
var a;
if (typeof value === &#39;string&#39;) {
a =
/^(\d{4})(\d{2})(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
if (a) {
return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
+a[5], +a[6]));
}
}
return value;
});

* stringify an object with custom date serialization

text = JSON.stringify([new Date()], function (key, value) {
return this[key] instanceof Date ?
&#39;Date(&#39; + this[key] + &#39;)&#39; : value;
});</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10955</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-07-17 15:56:28 +0200</bug_when>
            <thetext>Given the potential risk of XSS attacks I would advocate to use a real JSON parser in the
non native mode instead of using &quot;eval&quot;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10957</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-07-17 16:02:37 +0200</bug_when>
            <thetext>&gt; * parse json and convert date strings to date instances:
&gt;
&gt;  myData = JSON.parse(text, function (key, value) {
&gt;      var a;
&gt;      if (typeof value === &#39;string&#39;) {
&gt;          a =
&gt;  /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
&gt;          if (a) {
&gt;              return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
&gt;                  +a[5], +a[6]));
&gt;          }
&gt;      }
&gt;      return value;
&gt;  });

This looks to me like every &quot;string&quot; will be run through the regular expression parser. Don&#39;t you
think that will slow things down, possibly substantially, parsing large JSON documents?
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10964</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-07-20 11:03:54 +0200</bug_when>
            <thetext>If you want this automatic conversion, then yes, it might slow things down. However as 
Sebastian and Helder already noted, most of the time the conversion to Date can easily
be done in the application code e.g. in a data binding layer. For small JSON files it should
not matter too much.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10965</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-07-20 11:05:32 +0200</bug_when>
            <thetext>Further its the way the native JSON object is supposed to work according to the
EcmaScript 3.1 specification and this is what the browsers implement.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10970</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-07-20 12:04:56 +0200</bug_when>
            <thetext>I would suggest we port http://json.org/json2.js to qooxdoo. This is the JSON reference
implementation by Douglas Crockford</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14713</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:25:45 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15735</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-12-11 13:12:09 +0100</bug_when>
            <thetext>This is a larger topic that should be addressed by looking at the latest specs and implementations. Also the ongoing improvements and harmonizations in the RPC backends may provide valuable input. Thanks to everyone for all the input so far. Marked this correctly as enhancement, with high prio, unassign, moved to 1.1.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16244</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2010-01-15 17:13:13 +0100</bug_when>
            <thetext>I have ported json2 to qooxdoo, fixed some bugs and added most of the tests from the EcmaScript 5 test suite. (rev. r21354)

The new JSON class is now at qx.lang.Json and should behave exactly the same as window.JSON in modern browsers. This also means that it doen&#39;t support the Date extension and probably never will.

I would like to deprecate qx.util.Json but this will only be possible if the RPC code is updated to handle dates differently. I&#39;ve opened a separate bug #3335 for the deprecation </thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16247</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2010-01-15 19:49:34 +0100</bug_when>
            <thetext>Just my cents:

* Very nice that this is finally in qooxdoo. We already had our own implementation on this.
* What I would optimize is the usage of eval() - in jQuery 1.4 they use new Function instead which was a lot faster in their tests. Just look at their code.
* I don&#39;t like the way you deal with the alternative implementation, putting it into a separate class. This for example means an additional function call for the native methods. In our local implementation we just assign &quot;parse&quot; to JSON.parse when available and otherwise point to our local implementation which is directly implemented in this class. The &quot;Impl&quot; class may confuse users.
* I am not sure that the &quot;lang&quot; namespace is a good match here. But I also do not like the &quot;Type&quot; class there. It seems that the original intention of the namespace, to just contain classes for every native type, is not given anymore. Json is just not a type in a group of Array, Boolean etc. I would prefer the Json class under &quot;qx.util&quot;.
* Just to mention this. I would think that the qx.lang.Type should be splitted and moved individually to the separate classes in qx.lang. e.g. qx.lang.Type.isString =&gt; qx.lang.String.isString(). This would be comparable to the ES5 way where the native Array/String etc will have a method isXXX(), too. See: http://twitter.com/kangax/status/7008405285</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16248</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2010-01-15 19:54:15 +0100</bug_when>
            <thetext>qx.Class.define(&quot;qx.lang.Json&quot;,
{
  statics :
  {
    parse : window.JSON &amp;&amp; JSON.parse(&#39;{&quot;x&quot;:1}&#39;).x === 1 ? window.JSON.parse : 
      function() {
         ...
      },

     ...
  }
});

In our tests it was important to try the parse() method instead of just detecting the availability because of issues on iPhone/Android where they had versions with not-fully supported implementations.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16249</commentid>
            <who name="Andreas Junghans">andreas.junghans</who>
            <bug_when>2010-01-15 21:29:39 +0100</bug_when>
            <thetext>Regarding comment #25:

&gt; What I would optimize is the usage of eval() - in jQuery 1.4 they use new
Function instead which was a lot faster in their tests. Just look at their
code.

I don&#39;t believe &quot;new Function&quot; is faster - it&#39;s actually significantly slower in Safari and only as fast as eval() in other browsers. I suppose the jQuery guys have been bitten by Firebug - see this thread on the mailing list: http://n2.nabble.com/JSON-eval-vs-Function-td4174532.html  

In short, Firebug causes a huge performance hit when using eval(). I wouldn&#39;t object to the &quot;new Function&quot; variant if it weren&#39;t for the performance problems it causes in Safari. Or maybe the package &quot;Firefox+Firebug&quot; is considered a more important target platform than Safari by now? (I&#39;m only half joking ...)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16265</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-18 09:29:14 +0100</bug_when>
            <thetext>Fabian, reopened this report so you can comment on the add&#39;tl input and maybe update the current implementation.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16272</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2010-01-18 11:55:53 +0100</bug_when>
            <thetext>&gt; * What I would optimize is the usage of eval() - in jQuery 1.4 they use new
&gt; Function instead which was a lot faster in their tests. Just look at their code.

I&#39;ll have to do some benchmarks myself but for the moment I&#39;ll stick with eval. See Andreas&#39; comment as well.

&gt; * I don&#39;t like the way you deal with the alternative implementation, putting it
&gt; into a separate class. This for example means an additional function call for
&gt; the native methods. In our local implementation we just assign &quot;parse&quot; to
&gt; JSON.parse when available and otherwise point to our local implementation which
&gt; is directly implemented in this class. The &quot;Impl&quot; class may confuse users.

I&#39;ve introduced the impl class to make testing easier. I have to test the qooxdoo implementation and this is not possible in modern browsers we use define the implementation inline. I don&#39;t think it will confuse users because nobody is going to extend this class and it doesn&#39;t show up in the API viewer because it is marked as internal.

However I&#39;ve changed the implementation a little to get rid of the indirection if the browser supports JSON natively.

&gt; * I am not sure that the &quot;lang&quot; namespace is a good match here. But I also do
&gt; not like the &quot;Type&quot; class there. It seems that the original intention of the
&gt; namespace, to just contain classes for every native type, is not given anymore.
&gt; Json is just not a type in a group of Array, Boolean etc. I would prefer the
&gt; Json class under &quot;qx.util&quot;.

With ES5 JSON becomes part of the language, just as RegExp, Date or String. For this reason qx.lang is a perfect place.

&gt; * Just to mention this. I would think that the qx.lang.Type should be splitted
&gt; and moved individually to the separate classes in qx.lang. e.g.
&gt; qx.lang.Type.isString =&gt; qx.lang.String.isString(). This would be comparable to
&gt; the ES5 way where the native Array/String etc will have a method isXXX(), too.
&gt; See: http://twitter.com/kangax/status/7008405285

Right, but in my opinion that is not enough to justify an API change.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16273</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2010-01-18 12:02:15 +0100</bug_when>
            <thetext>The fixes are in r21361</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16420</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 10:46:54 +0100</bug_when>
            <thetext>.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16424</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 12:24:51 +0100</bug_when>
            <thetext>fix assignment</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16425</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 12:25:44 +0100</bug_when>
            <thetext>bug report corrected</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36435</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:18 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="0" isprivate="0" isurl="0">
            <attachid>549</attachid>
            <date>2009-07-04 23:54:00 +0200</date>
            <delta_ts>2009-07-04 23:54:32 +0200</delta_ts>
            <desc>A test to evaluate speed difference between eval and JSON.parse with a callback function</desc>
            <filename>Application.js</filename>
            <type>application/javascript</type>
            <size>4123</size>
            <attacher>bugzilla.qooxdoo.org</attacher>
            
              <data encoding="base64">cXguQ2xhc3MuZGVmaW5lKCJqc29udGVzdC5BcHBsaWNhdGlvbiIsCnsKCWV4dGVuZCAgOiBxeC5h
cHBsaWNhdGlvbi5TdGFuZGFsb25lLAoJbWVtYmVycyA6IHsKCQltYWluIDogZnVuY3Rpb24oKQoJ
CXsKCQkJdGhpcy5iYXNlKGFyZ3VtZW50cyk7CgkJCQoJCQlpZihxeC5jb3JlLlZhcmlhbnQuaXNT
ZXQoInF4LmRlYnVnIiwgIm9uIikpCgkJCXsKCQkJCXF4LmxvZy5hcHBlbmRlci5OYXRpdmU7CgkJ
CQlxeC5sb2cuYXBwZW5kZXIuQ29uc29sZTsKCQkJfQoJCQkKCQkJdmFyIGRhdGVGdW5jdGlvbiA9
IGZ1bmN0aW9uKGtleSwgdmFsdWUpCgkJCXsKCQkJCXZhciBhOwoJCQkJaWYodHlwZW9mIHZhbHVl
ID09PSAnc3RyaW5nJykKCQkJCXsKCQkJCQlpZihhID0gL14oXGR7NH0pLShcZHsyfSktKFxkezJ9
KVQoXGR7Mn0pOihcZHsyfSk6KFxkezJ9KD86XC5cZCopPylaJC8uZXhlYyh2YWx1ZSkpCgkJCQkJ
ewoJCQkJCQlyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoK2FbMV0sICthWzJdIC0gMSwgK2FbM10s
ICthWzRdLCArYVs1XSwgK2FbNl0pKTsKCQkJCQl9CgkJCQl9CgkJCQlyZXR1cm4gdmFsdWU7CgkJ
CX07CgoJCQl2YXIganNvblN0cmluZywgcmVzdWx0LCBzdGFydCwgc2xvd2VzdCwgZmFzdGVzdCwg
dGltaW5nLCBjdW11bGF0aXZlOwoJCQkKCQkJanNvblN0cmluZyA9IHRoaXMuX2J1aWxkSnNvblN0
cmluZygiXCIyMDA5LTA3LTA0VDAwOjAwOjAwLjAwMFpcIiIpOwoJCQlyZXN1bHQgPSBudWxsOwoJ
CQlzdGFydCA9IG51bGw7CgkJCXNsb3dlc3QgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CgkJ
CWZhc3Rlc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CgkJCXRpbWluZyA9IG51bGw7CgkJ
CWN1bXVsYXRpdmUgPSAwOwoKCQkJZm9yKHZhciBpID0gMDsgaSA8IDUwOyBpKyspCgkJCXsKCQkJ
CXJlc3VsdCA9IG51bGw7CgkJCQlzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwoKCQkJCXJl
c3VsdCA9IEpTT04ucGFyc2UoanNvblN0cmluZywgZGF0ZUZ1bmN0aW9uKTsKCgkJCQl0aW1pbmcg
PSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0OwoJCQkJc2xvd2VzdCA9IE1hdGgubWF4KHNs
b3dlc3QsIHRpbWluZyk7CgkJCQlmYXN0ZXN0ID0gTWF0aC5taW4oZmFzdGVzdCwgdGltaW5nKTsK
CQkJCWN1bXVsYXRpdmUgKz0gdGltaW5nOwoJCQl9CgoJCQlhbGVydCgiSlNPTi5wYXJzZVxuTWlu
OiAiICsgZmFzdGVzdCArICJcbk1heDogIiArIHNsb3dlc3QgKyAiXG5Bdmc6ICIgKyAoY3VtdWxh
dGl2ZSAvIDUwKSArICJcbkF2ZyB3L28gb3V0bGllcnM6ICIgKyAoKGN1bXVsYXRpdmUgLSBmYXN0
ZXN0IC0gc2xvd2VzdCkgLyA0OCkgKyAiXG5TYW5pdHk6ICIgKyByZXN1bHRbMF0uYmRheSk7CgkJ
CQoJCQlzdGFydCA9IG51bGw7CgkJCXNsb3dlc3QgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7
CgkJCWZhc3Rlc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CgkJCXRpbWluZyA9IG51bGw7
CgkJCWN1bXVsYXRpdmUgPSAwOwoJCQkKCQkJZm9yKHZhciBpID0gMDsgaSA8IDUwOyBpKyspCgkJ
CXsKCQkJCWpzb25TdHJpbmcgPSBudWxsOwoJCQkJc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUo
KTsKCgkJCQlqc29uU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTsKCgkJCQl0aW1pbmcg
PSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0OwoJCQkJc2xvd2VzdCA9IE1hdGgubWF4KHNs
b3dlc3QsIHRpbWluZyk7CgkJCQlmYXN0ZXN0ID0gTWF0aC5taW4oZmFzdGVzdCwgdGltaW5nKTsK
CQkJCWN1bXVsYXRpdmUgKz0gdGltaW5nOwoJCQl9CgkJCQoJCQlhbGVydCgiSlNPTi5zdHJpbmdp
Znlcbk1pbjogIiArIGZhc3Rlc3QgKyAiXG5NYXg6ICIgKyBzbG93ZXN0ICsgIlxuQXZnOiAiICsg
KGN1bXVsYXRpdmUgLyA1MCkgKyAiXG5Bdmcgdy9vIG91dGxpZXJzOiAiICsgKChjdW11bGF0aXZl
IC0gZmFzdGVzdCAtIHNsb3dlc3QpIC8gNDgpICsgIlxuU2FuaXR5OiAiICsganNvblN0cmluZy5z
dWJzdHIoMCwgMzApKTsKCgkJCWpzb25TdHJpbmcgPSB0aGlzLl9idWlsZEpzb25TdHJpbmcoIm5l
dyBEYXRlKERhdGUuVVRDKDIwMDksNiw0LDAsMCwwLDApKSIpOwoJCQlyZXN1bHQgPSBudWxsOwoJ
CQlzdGFydCA9IG51bGw7CgkJCXNsb3dlc3QgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7CgkJ
CWZhc3Rlc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CgkJCXRpbWluZyA9IG51bGw7CgkJ
CWN1bXVsYXRpdmUgPSAwOwoKCQkJZm9yKHZhciBpID0gMDsgaSA8IDUwOyBpKyspCgkJCXsKCQkJ
CXJlc3VsdCA9IG51bGw7CgkJCQlzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwoKCQkJCXJl
c3VsdCA9IHF4LnV0aWwuSnNvbi5wYXJzZVF4KGpzb25TdHJpbmcpOwoKCQkJCXRpbWluZyA9IG5l
dyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnQ7CgkJCQlzbG93ZXN0ID0gTWF0aC5tYXgoc2xvd2Vz
dCwgdGltaW5nKTsKCQkJCWZhc3Rlc3QgPSBNYXRoLm1pbihmYXN0ZXN0LCB0aW1pbmcpOwoJCQkJ
Y3VtdWxhdGl2ZSArPSB0aW1pbmc7CgkJCX0KCQkJCgkJCWFsZXJ0KCJxeC51dGlsLkpzb24ucGFy
c2VReFxuTWluOiAiICsgZmFzdGVzdCArICJcbk1heDogIiArIHNsb3dlc3QgKyAiXG5Bdmc6ICIg
KyAoY3VtdWxhdGl2ZSAvIDUwKSArICJcbkF2ZyB3L28gb3V0bGllcnM6ICIgKyAoKGN1bXVsYXRp
dmUgLSBmYXN0ZXN0IC0gc2xvd2VzdCkgLyA0OCkgKyAiXG5TYW5pdHk6ICIgKyByZXN1bHRbMF0u
YmRheSk7CgkJCQoJCQlzdGFydCA9IG51bGw7CgkJCXNsb3dlc3QgPSBOdW1iZXIuTkVHQVRJVkVf
SU5GSU5JVFk7CgkJCWZhc3Rlc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7CgkJCXRpbWlu
ZyA9IG51bGw7CgkJCWN1bXVsYXRpdmUgPSAwOwoJCQkKCQkJZm9yKHZhciBpID0gMDsgaSA8IDUw
OyBpKyspCgkJCXsKCQkJCWpzb25TdHJpbmcgPSBudWxsOwoJCQkJc3RhcnQgPSBuZXcgRGF0ZSgp
LmdldFRpbWUoKTsKCgkJCQlqc29uU3RyaW5nID0gcXgudXRpbC5Kc29uLnN0cmluZ2lmeShyZXN1
bHQpOwoKCQkJCXRpbWluZyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnQ7CgkJCQlzbG93
ZXN0ID0gTWF0aC5tYXgoc2xvd2VzdCwgdGltaW5nKTsKCQkJCWZhc3Rlc3QgPSBNYXRoLm1pbihm
YXN0ZXN0LCB0aW1pbmcpOwoJCQkJY3VtdWxhdGl2ZSArPSB0aW1pbmc7CgkJCX0KCQkJCgkJCWFs
ZXJ0KCJxeC51dGlsLkpzb24uc3RyaW5naWZ5XG5NaW46ICIgKyBmYXN0ZXN0ICsgIlxuTWF4OiAi
ICsgc2xvd2VzdCArICJcbkF2ZzogIiArIChjdW11bGF0aXZlIC8gNTApICsgIlxuQXZnIHcvbyBv
dXRsaWVyczogIiArICgoY3VtdWxhdGl2ZSAtIGZhc3Rlc3QgLSBzbG93ZXN0KSAvIDQ4KSArICJc
blNhbml0eTogIiArIGpzb25TdHJpbmcuc3Vic3RyKDAsIDMwKSk7CgkJfSwKCgkJX2J1aWxkSnNv
blN0cmluZyA6IGZ1bmN0aW9uKGRhdGVTdHJpbmcpCgkJewoJCQl2YXIganNvblN0cmluZyAgID0g
IlsiOwoJCQlmb3IodmFyIGkgPSAwOyBpIDwgMTAwMDsgaSsrKQoJCQl7CgkJCQlqc29uU3RyaW5n
ICs9ICJ7IFwiYWRyXCIgOiB7IFwic3RyZWV0LWFkZHJlc3NcIiA6IFwiMTIzIEFueXdoZXJlIFN0
XCIsIFwibG9jYWxpdHlcIiA6IFwiQW55dG93blwiLCBcInJlZ2lvblwiIDogXCJVU0FcIiwgXCJw
b3N0YWwtY29kZVwiIDogXCIxMjM0NVwiLCBcImNvdW50cnktbmFtZVwiIDogXCJVbml0ZWQgU3Rh
dGVzIG9mIEFtZXJpY2FcIiB9LCBcImJkYXlcIiA6ICIgKyBkYXRlU3RyaW5nICsgIiwgXCJlbWFp
bFwiIDogWyBcInRlc3RAZXhhbXBsZS5jb21cIiwgXCJ0ZXN0MkBleGFtcGxlLmNvbVwiIF0sIFwi
Z2VvXCIgOiB7IFwibG9uZ2l0dWRlXCIgOiA0Mi40MzQ3MjIsIFwibGF0aXR1ZGVcIiA6IC04My45
ODUgfSwgXCJuXCIgOiB7IFwiZmFtaWx5LW5hbWVcIiA6IFwiRG9lXCIsIFwiZ2l2ZW4tbmFtZVwi
IDogXCJKb2huXCIgfSwgXCJuaWNrbmFtZVwiIDogXCJKb2huIERvZVwiLCBcInRlbFwiIDogWyBc
IjgwMC01NTUtMTIxMlwiIF0gfSI7CgkJCQlpZihpIDwgOTk5KQoJCQkJewoJCQkJCWpzb25TdHJp
bmcgKz0gIiwiOwoJCQkJfQoJCQl9CgkJCWpzb25TdHJpbmcgKz0gIl0iOwoJCQlyZXR1cm4ganNv
blN0cmluZzsKCQl9Cgl9Cn0pOw==
</data>

          </attachment>
      

    </bug>