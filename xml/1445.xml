<bug>
          <bug_id>1445</bug_id>
          
          <creation_ts>2008-10-02 14:21:00 +0200</creation_ts>
          <short_desc>Add Phaneesh&#39;s extensions to user-extension.js</short_desc>
          <delta_ts>2013-12-16 12:46:13 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>contrib</product>
          <component>Simulator</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc>http://wiki.openqa.org/display/SEL/qooxdooExtension</bug_file_loc>
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>qooxdoo</cc>
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>5690</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-10-02 14:21:39 +0200</bug_when>
            <thetext>Phaneesh has extended the Simulator user-extension.js file with further Selenium commands (His version is downloadable from the above URL). His extension encompasses new commands and assertions. Here is a tentative list:

Selenium.prototype.doQxSetTextValue = function(locator, eventParams) {
Selenium.prototype.doQxSetComboBoxValue = function(locator, eventParams) {
Selenium.prototype.doQxSetChecked = function(locator, eventParams) {
Selenium.prototype.doQxButtonClick = function(locator, eventParams) {
Selenium.prototype.doQxSelectPage = function(locator, eventParams) {
Selenium.prototype.doQxSelectTreeNode = function(locator, eventParams) {
Selenium.prototype.doQxOpenTreeNode = function(locator, eventParams) {
Selenium.prototype.doQxOpenTreeNode = function(locator, eventParams) {
Selenium.prototype.doQxSelectListItem = function(locator, eventParams) {
Selenium.prototype.doQxSelectTableRow = function(locator, eventParams) {
Selenium.prototype.doQxSetTableCellValue = function(locator, vArguments) {
Selenium.prototype.doQxWindowClose = function(locator, vParams) {
Selenium.prototype.assertQxLabelEquals = function(locator, vLabel) {
Selenium.prototype.assertQxLabelContains = function(locator, vLabelText) {
Selenium.prototype.assertQxListItemExists = function(locator, vListItem) {
Selenium.prototype.assertQxListItemNotExists = function(locator, vListItem) {
Selenium.prototype.assertQxListItemCount = function(locator, vAssertParams) {
Selenium.prototype.assertQxTableRowCount = function(locator, vAssertParams) {
Selenium.prototype.assertQxTableColumnCount = function(locator, vAssertParams) {
Selenium.prototype.assertQxSelectedTableRow = function(locator, vAssertParams) {
Selenium.prototype.assertQxTableCellValue = function(locator, vAssertParams) {
Selenium.prototype.assertQxTableColumnValue = function(locator, vAssertParams) {
Selenium.prototype.assertQxTextFieldLength = function(locator, vAssertParams) {
Selenium.prototype.assertQxTextFieldReadOnly = function(locator, vAssertType) {
Selenium.prototype.assertQxTextValueEquals = function(locator, vText) {
Selenium.prototype.assertQxTextValueContains = function(locator, vText) {
Selenium.prototype.assertQxChecked = function(locator, vAssertParams) {
Selenium.prototype.assertQxListSelected = function(locator, vAssertParams) {
Selenium.prototype.assertQxComboBoxEditable = function(locator, vAssertType) {
Selenium.prototype.assertTreeNodeCount = function(locator, vAssertParams) {
Selenium.prototype.assertWindowCaption = function(locator, vAssertParams) {
Selenium.prototype.assertQxObjectEnabled = function(locator, vAssertType) {</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5691</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-10-02 14:43:37 +0200</bug_when>
            <thetext>On first looks, I was skeptical about the added methods. 
- They seemed mostly like boilerplate code with lots of calls to LOG, which might be placed better in the code of the client-side test script. 
- Furthermore, I&#39;m hesitant to introduce gratuitous functions into the user-extension.js. I would prefer a concise set of orthogonal functions upon which all kinds of tests can be built. Let the client-driver program implement higher abstractions.
- Another concern is that with more sophisticated qooxdoo-specific functions, more and more of the qooxdoo API gets used in the user extension. That means that the extension gets increasingly sensitive to qooxdoo versions and API changes. The question how to support multiple qooxdoo versions with the user extension is still open.

On second thought, though, I&#39;m not so sure anymore:
- Some functions carry real value, like &quot;doQxSelectTableRow&quot;: It implements specifics of Table handling which are neither presumed nor expected pre-knowledge for a test engineer (the ones writing the tests). It seems sensible that this knowledge be implemented in a library, and the test engineers just using higher-level abstractions.
- All the functions implemented in the user-extension are available in the Selenium IDE (which is not true for those implemented in client-driver test scripts). Since this is used by an increasing number of people to develop their tests, it seems appropriate to have the same functions available as when you write test scripts.

Not sure which way to go. Added AE on cc: for evaluation.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10987</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-07-21 14:53:03 +0200</bug_when>
            <thetext>To me.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10988</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-07-21 14:54:57 +0200</bug_when>
            <thetext>To me (for real this time)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10989</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-07-21 15:05:08 +0200</bug_when>
            <thetext>I agree with Thomas&#39; comments. The various set* commands mostly check if an input element is enabled and, if so, call the widget&#39;s setValue method. That&#39;s not something I&#39;d want to use in a test since it doesn&#39;t actually simulate user behavior. It&#39;s better to use existing commands like qxClick or typeKeys to interact with form elements.

The assert* commands might be useful, but that&#39;s something I&#39;d rather implement in the test script itself, like Thomas suggested.

We&#39;ve already integrated the table interaction commands from Mr. Hericus, so that leaves Phaneesh&#39;s drag and drop methods. Those are very useful so I migrated them to qooxdoo 0.8 and included them in user-extensions-qooxdoo,js in the Simulator trunk.</thetext>
          </long_desc>
      
      

    </bug>