<bug>
          <bug_id>1841</bug_id>
          
          <creation_ts>2009-01-14 11:31:00 +0100</creation_ts>
          <short_desc>generate.py build produces incorrect code when confused with global scope for loop index</short_desc>
          <delta_ts>2014-03-03 15:27:40 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>0.8.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Torbjorn Tyridal">torbjorn</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>7345</commentid>
            <who name="Torbjorn Tyridal">torbjorn</who>
            <bug_when>2009-01-14 11:31:39 +0100</bug_when>
            <thetext>Consider the following code example and the corresponding code generated by the tool,

Further up in the generated .js file a is correctly defined as &#39;theobj&#39;, but because the index in the for loop is &#39;a&#39; the setUserData label will be faulty.

    add : function(o)
    {
        var t = new qx.ui.tree.TreeFolder(o.getLabel());
        var te=o.getMenuTree();

        for (a in te)
        {
            var tf = new qx.ui.tree.TreeFile( te[a][0] );
            tf.setUserData(&quot;theobj&quot;,undefined);//o);
            tf.setUserData(&quot;ownersId&quot;,te[a][1]);
            tf.setUserData(&quot;ownerObjRef&quot;,this.__getObjRef(o));
            t.add( tf );
        }


add:function(r){var m=new qx.ui.tree.TreeFolder(r.getLabel());
var l=r.getMenuTree();
for(a in l){var x=new qx.ui.tree.TreeFile(l[a][0]);
x.setUserData(a,
undefined);
x.setUserData(c,
l[a][1]);
x.setUserData(b,
this.__mH(r));
m.add(x);
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7643</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-02-09 11:55:21 +0100</bug_when>
            <thetext>@Thomas, looks like that would nicely fit into some of your recent work (i.e. utilizing the new scoping code from ecmalint)?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7926</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-18 17:26:50 +0100</bug_when>
            <thetext>Works with the current variable optimizer. Since &#39;a&#39; in the for loop is a 
global var, it is counted among the bound variables of the scope, and those 
names are never used as replacement names. Therefore, variable capture cannot 
occur.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39549</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:27:40 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>