<bug>
          <bug_id>6848</bug_id>
          
          <creation_ts>2012-09-25 00:01:00 +0200</creation_ts>
          <short_desc>qx.bom.request.Xhr lacks of isDisposed() method</short_desc>
          <delta_ts>2013-06-17 10:19:52 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io.remote</component>
          <version>2.0.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="sergey">tetkins</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>30803</commentid>
            <who name="sergey">tetkins</who>
            <bug_when>2012-09-25 00:01:29 +0200</bug_when>
            <thetext>There is no method to check if an instance of qx.bom.request.Xhr is disposed.

However, there is a private field: __disposed. So I think it would be easy to implement isDisposed() method to get the value.

I need this in a such scenario:

1. a request is made and the reference is saved
2. when the request is complete, in its onloadend event the dispose method is called to cleanup all internals.
3. before making a new request it is necessary to abort the previous one if it is not complete yet, so the saved reference is used. But if the request is already complete and disposed the abort method throws an exception.

By the way, I&#39;m not sure that it&#39;s a bug, but it looks quite strange: inside the method dispose there is a code:

try {
        this.__nativeXhr.onreadystatechange;
} catch(PropertiesNotAccessable) {
       return;
}

So, if an exception has been caught here, the following code never gets executed:

this.__nativeXhr = null;
this.__disposed = true;

also, it&#39;s supposed that dispose() returns a boolean value, but the undefined is returned here.

In fact, all mentioned here is related to the version 2.0.2 (it is not listed in the Version field of the bug report form)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32765</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-05-16 09:18:03 +0200</bug_when>
            <thetext>Added the isDisposed method to XHR and Script.

master: f1fb93f22ebb6b760efa8d5c5ff9e7c3c7411522</thetext>
          </long_desc>
      
      

    </bug>