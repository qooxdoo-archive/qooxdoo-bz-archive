<bug>
          <bug_id>5996</bug_id>
          
          <creation_ts>2012-01-02 16:29:00 +0100</creation_ts>
          <short_desc>rest.Resource: Introduce exclusive body parameters</short_desc>
          <delta_ts>2012-02-13 13:02:57 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tristan Koch">tristan.koch</reporter>
          <assigned_to name="Tristan Koch">tristan.koch</assigned_to>
          <cc>alexander.steitz</cc>
    
    <cc>teodor.moisa</cc>
          <qa_contact name="Tristan Koch">tristan.koch</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>28143</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-01-02 16:29:44 +0100</bug_when>
            <thetext>Currently, invoke distributes parameters to URL and request body. If the URL contains a placeholder with a matching param, the value ends up in the URL and not the body.

The drawback of this approach is that its not possible to provide an array as request and at the same time parameters for placeholders found in the URL. Consider a singular user resource that shoud be updated with a list of friends, identified by id.

res.map(&quot;put&quot;, &quot;PUT&quot;, &quot;user/{id}&quot;);
res.put(); // ?! Provide &quot;id&quot; (e.g. &quot;1&quot;) and request body (e.g. [1,2,3])

After discussing this with Martin (and as suggested by Teodor), we came to the conclusion that the cleanest approach probably is to provide two arguments, while the added argument contains the desired request body. Distribution of parameters no longer happens, so the first arguments stands exclusively for the parameters that are merged into the URL pattern.

Note that the parameter checks should consider both URL and body parameters.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28153</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-01-03 11:56:24 +0100</bug_when>
            <thetext>After giving it a second thought, we decided that only URL parameters are checked. We consider contrained request data a rare use case and don&#39;t want to add complexity (handling two parameters with same name, arrays, strings).

f44686b (master)</thetext>
          </long_desc>
      
      

    </bug>