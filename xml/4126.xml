<bug>
          <bug_id>4126</bug_id>
          
          <creation_ts>2010-09-28 16:02:00 +0200</creation_ts>
          <short_desc>Merge Global &quot;let&quot; Key on Config Include</short_desc>
          <delta_ts>2014-03-03 08:46:59 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.config</component>
          <version>1.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          <cc>tinobutz</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>20372</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-09-28 16:02:08 +0200</bug_when>
            <thetext>Currently, global &#39;let&#39; keys in configs are not merged when one config is 
included by the other. That means that you cannot define a global &#39;let&#39; key in 
a file and include this in another, and the key simply shows up there. Rather, 
you have to define a concrete job in the included config (which will 
automatically get the global let keys), and &#39;extend&#39; your local jobs with it, 
in order to get at the value of the global &#39;let&#39; macro. This is tedious and 
impedes as simple use cases as getting the QOOXDOO_PATH setting from an 
external config, or supporting user-specific config files that contain global 
macros.

This could be amended by merging the incoming &#39;let&#39; with the local one, giving 
the local precedence for existing keys. (To keep that simple, I would not apply 
deep merging of map values right away, as we do with job keys, but we could 
consider adding that later). It seems like a good idea to have global &#39;let&#39; 
merge on include, we just have to be aware of unwanted side effects.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20414</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-09-30 10:53:09 +0200</bug_when>
            <thetext>It turns out this is not easily achieved. A problem shows in the test runner. 
E.g. the testrunner.json defines a TESTRUNNER_HOME in its global let. This let 
setting is passed to the including application.json, and from there to the 
app&#39;s config.json. Now when the jobs are included into the config.json, a new 
job is created to take the &#39;test&#39; job from application.json. But first, the 
local - and already augmented - global let is included. This already contains 
the TESTRUNNER_HOME setting from testrunner.json. When now the &#39;test&#39; job from 
application is included into the new job, it brings its own TESTRUNNER_HOME 
setting, adapted for the using application. But this (desired) setting is 
blocked by the (undesired) setting from the global let.

So, the setting of the incoming &#39;test&#39; job from application.json is &quot;overtaken&quot; 
by the global let from testrunner.json.

A fix of this situation worth thinking about would be to abolish 
testrunner.json&#39;s global let. It could be argued that internal or &quot;providing&quot; 
config files should avoid using global let&#39;s at all, and rather use locally 
defined includer jobs that take a let section, and are then included explicitly 
by the worker jobs (See also bug#2807, which suggests the same approach for 
base.json). This way, global lets would be spared for application/user-level 
configs, where they provide the most utility (for easy customization). But that 
has to be treated separately.

So for the time being,

-&gt; WONTFIX</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20415</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-09-30 11:51:10 +0200</bug_when>
            <thetext>As it might be interesting for later releases, back

-&gt; NEW</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20416</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-09-30 11:51:35 +0200</bug_when>
            <thetext>As it might be interesting for later releases, back

-&gt; NEW</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20550</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2010-10-11 12:31:58 +0200</bug_when>
            <thetext>To get around the merging of let keys, perhaps a new config key &quot;global-let&quot; would be a solution?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35740</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:46:59 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>