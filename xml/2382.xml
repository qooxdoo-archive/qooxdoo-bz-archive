<bug>
          <bug_id>2382</bug_id>
          
          <creation_ts>2009-05-15 11:04:00 +0200</creation_ts>
          <short_desc>Allow mixins to be included as patches</short_desc>
          <delta_ts>2014-03-03 08:47:42 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.oo</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Matthew">matthew+qooxdoo</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>fabian.jakobs</cc>
    
    <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>9968</commentid>
            <who name="Matthew">matthew+qooxdoo</who>
            <bug_when>2009-05-15 11:04:23 +0200</bug_when>
            <thetext>Currently members from a mixin cannot call this.base()

Fabian Writes:I think this could be an option but since it touches the core of qooxdoo 
it definitively needs some discussion. Could you open a bug for this 
issue so we can track the discussion there?

I suggested allowing a root key for mixins allong the lines of &quot;type&quot; that could be set to &quot;patch&quot;. I meant this:

qx.Mixin.define(&quot;custom.MyMixin&quot;,
{
  type : &quot;patch&quot;
}

Fabian took this to mean:

qx.Class.define(&quot;custom.Application&quot;,
{
    extend : qx.core.Object,
    patch : [custom.MMixin]
});

I prefer the first as it keeps the logic within the mixin but the second does allow you to cut the overhead where it is not needed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9976</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-05-15 15:11:53 +0200</bug_when>
            <thetext>Still need to look at the entire thread, but wanted to comment on your suggestion now. IMHO mixins should be totally generic, i.e. shouldn&#39;t really contain info about their later use. Therefore, using a mixin as a &quot;patch&quot; should be up to the applying code, not being an attribute of the mixin itself. 

A &quot;patch&quot; key would indeed fit the existing wording of include/patch, but I&#39;m not sure - unlike the regular &quot;include&quot; key - one would need that often on a design level rather than a limited number of cases to actually patch behavior manually (i.e. via explicit patch() calls in the defer method).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9979</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-05-15 15:27:15 +0200</bug_when>
            <thetext>Andreas, although I agree with you in principle that a mixin should be generic, if a mixin can&#39;t possibly work if &quot;included&quot; rather than &quot;patched&quot; it might be worthwhile for the mixin to be able to specify that...

Just more food for thought.

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9993</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-18 09:49:06 +0200</bug_when>
            <thetext>I would highly appreciate to keep the word &quot;mixin&quot; clean to the original usage in other languages. So a mixin has no reference or knowledge of the location where is is embedded.

Just read in YUI 3 about extensions which is there pattern to extend classes externally. It&#39;s quite interesting. The idea is to have something like a mixin defintion which already knows to which class it should be added e.g.

qx.Extension.define(&quot;qx.io.FormUpload&quot;,
{
  patch : qx.io.Upload,

  statics :
  {
    ...
  }
});

This is nice for building highly flexible low-level frameworks where you want to limit the functionality of the core for improved performance and size.

Still this might not be helpful for this issue, but maybe useful to keep in mind while thinking about patches. Regarding these I would prefer a clean new defintion instead of some kind of integration in another paradigm:

qx.Patch.define(&quot;my.io.FlashUpload&quot;,
{
  patch : qx.io.Upload,

  members :
  {
    ...
  }
});

This is also quite cool because it removes the additional need to call a kind of mixin include/patch. This would also mean that the current mixin &quot;patch&quot; feature could be deprecated which would be nice as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10000</commentid>
            <who name="Matthew">matthew+qooxdoo</who>
            <bug_when>2009-05-18 11:21:46 +0200</bug_when>
            <thetext>(In reply to comment #3)
I like that idea, but this would have to in addition to another fix. In my case we have a mixin that is included in 99% of our visual classes. It makes more sence to include the mixin (patch) when we need it rather than matain a large list of classes within the mixin itself. Also using this approach means if a patch is supplied by the framework (or other library) it would be impossible to include it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10001</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-18 11:39:05 +0200</bug_when>
            <thetext>(In reply to comment #4):
If you use it in 99% of your visual classes, have you ever tried to directly patch qx.ui.core.Widget? That seems to be logical in this case. Just wonder.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10003</commentid>
            <who name="Matthew">matthew+qooxdoo</who>
            <bug_when>2009-05-18 11:49:20 +0200</bug_when>
            <thetext>(In reply to comment #5)
I cannot give to much information out as this part of our project has been classed comercial sensitive (otherwise I would love to share it, it&#39;s the best JS I&#39;ve ever wrote!).
I can give a brief description though, our mixin is similar to QxTransform, it takes some static data from the current class and builds visual controls from it. The actual code that does this is stored within the constructor of the mixin. Including the mixin in qx.ui.core.Widget means that our code gets executed before the rest of the heirachy is initialized. For example if we derive from tabview, having our mixin included locally means the tabview constructor gets called first. Having the mixin included in Widget means the mixin gets executed first.

You will just have to trust me that we&#39;ve explored other options and feel this is the best as I cannot really go into detail.

Thanks for the tip though!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10168</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-05-27 21:42:11 +0200</bug_when>
            <thetext>On a side note, this seems related to bug #2419.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10228</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-29 13:07:17 +0200</bug_when>
            <thetext>to me</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10232</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-29 14:23:13 +0200</bug_when>
            <thetext>I opened a bug (bug #2439) to discuss changes to the priority of &quot;include&quot; statements in classes and themes. This should also fix common issues as which are discussed here.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14780</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:26:27 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15236</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-12-03 13:53:38 +0100</bug_when>
            <thetext>to 1.0.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16512</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 16:30:57 +0100</bug_when>
            <thetext>moved to target 1.0.2</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17350</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-03-17 14:16:10 +0100</bug_when>
            <thetext>to Martin</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35994</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:42 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>