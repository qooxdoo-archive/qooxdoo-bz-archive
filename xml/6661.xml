<bug>
          <bug_id>6661</bug_id>
          
          <creation_ts>2012-07-23 09:49:00 +0200</creation_ts>
          <short_desc>Check if it is Possible to Avoid A-priori Library Scanning</short_desc>
          <delta_ts>2014-03-03 15:21:31 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>2.0</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>30225</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-07-23 09:49:59 +0200</bug_when>
            <thetext>Currently, all resources (classes etc.) are scanned in involved libraries ahead 
of any class selection. Among other things, this means that *all* classes of a 
lib are parsed, even though the application to be build might only use a few of 
them. 

On the one hand this provides a complete class list when class selection 
starts. On the other hand (due to the source code parsing) this imposes a 
serious performance hit (empty cache performance).

It should be possible to use an explorative approach, by which classes are only 
parsed when they are required by the application. E.g. you start with the 
classes from the configured &quot;include&quot; list, and then incrementally add classes 
as they are needed by dependencies, checking configured libraries for the 
appropriate name spaces. This would make sure only classes get parsed that are 
actually needed by the app.

The a-priori approach might be good enough for static resources (images, etc.) 
and translations, so the Library() class might continue to scan them upfront.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30869</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-10-02 17:41:32 +0200</bug_when>
            <thetext>Also, some jobs don&#39;t need a calculated class list, as they e.g. work on all 
classes of a library, so the simple file list suffices, like :

fix, pretty, lint</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31061</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-10-25 19:13:30 +0200</bug_when>
            <thetext>I&#39;ve rearranged the generator such that the library scan at the beginning does 
*not* verify the class id&#39;s. It just records their (outer) file id, to build up 
a class index.

The verification of the (outer) file id with the (inner) class id (from 
qx.*.define calls) is delayed until the code of the file is parsed for the 
first time anyway (usually during dependency analysis).

This not only means the file parsing is done later in the job, but also only 
classes that are incrementally added during dependency analysis are verified, 
which avoids parsing classes that are never used in the build. Unused classes 
remain unparsed and unverified. Initial speed-ups look good.

d492eb5 (master)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37319</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:21:31 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>