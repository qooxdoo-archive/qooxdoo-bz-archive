<bug>
          <bug_id>7285</bug_id>
          
          <creation_ts>2013-03-07 15:42:00 +0100</creation_ts>
          <short_desc>Timing problems on changing source of qx.ui.basic.Image, common apply event is missing for managed and unmanaged resources</short_desc>
          <delta_ts>2014-02-07 11:41:18 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.5.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Parusel">andreas.parusel</reporter>
          <assigned_to name="Mustafa Sak">mustafa.sak</assigned_to>
          <cc>alexander.steitz</cc>
    
    <cc>mustafa.sak</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>32421</commentid>
            <who name="Andreas Parusel">andreas.parusel</who>
            <bug_when>2013-03-07 15:42:44 +0100</bug_when>
            <thetext>The behavior mentioned above can cause a distortion effect when switching between images.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34661</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2013-12-16 12:53:29 +0100</bug_when>
            <thetext>To prevent this issue, its a good solution to hide the widget as long as the image is loading.

But therefore we need an event which fires for all types of images, managed or unmanaged ones, if an image is really ready to appear.

This event should always fire asynchronous even if the resource is already known by image loader or resource manager. So we are able to react to a source change on the same way, independent from which type of image it is.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34662</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2013-12-16 12:55:46 +0100</bug_when>
            <thetext>The event &quot;loaded&quot; could be this all time firering event. But what should we do with &quot;loadingFailed&quot; in case of managed resources? How can we explain the developer that &quot;loaded&quot; fires anyway but &quot;loadingFailed&quot; does not for managed resources?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34994</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2014-02-07 11:03:46 +0100</bug_when>
            <thetext>&quot;loaded&quot; event now will be also fired for managed images and previously loaded unmanaged images.
If the source will be changed before the current image is loaded, his &quot;loaded&quot; event will be supressed</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34995</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2014-02-07 11:25:35 +0100</bug_when>
            <thetext>There are three situations in the logic now, where a requested image load can be aborted. So I would prefer to fire an event like &quot;aborted&quot;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34996</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2014-02-07 11:28:08 +0100</bug_when>
            <thetext>&quot;loaded&quot; event committed on master f6bd506674d05bb0d871e56823f6f2cd1659f377

&quot;aborted&quot; event committed on master 155d70743b98f7e8b91767d4a899779d304d19f4</thetext>
          </long_desc>
      
      

    </bug>