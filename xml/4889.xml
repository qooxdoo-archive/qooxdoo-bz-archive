<bug>
          <bug_id>4889</bug_id>
          
          <creation_ts>2011-03-28 13:04:00 +0200</creation_ts>
          <short_desc>CSS Optimizer for Build Version</short_desc>
          <delta_ts>2014-03-03 15:22:22 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>mobile</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.6</target_milestone>
          <dependson>5267</dependson>
    
    <dependson>5650</dependson>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tino Butz">tinobutz</reporter>
          <assigned_to name="Tino Butz">tinobutz</assigned_to>
          <cc>thron7</cc>
          <qa_contact name="Tino Butz">tinobutz</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>23660</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-03-28 13:04:20 +0200</bug_when>
            <thetext>The CSS files should be optimized by an optimizer (remove comments ect.) for the build version.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26026</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-07-15 14:57:01 +0200</bug_when>
            <thetext>Please evaluate possible CSS combination / optimizer tools. 

The following features are needed:

* combination
* optimization
* command line
* comments removal</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26124</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-07-20 11:35:14 +0200</bug_when>
            <thetext>I took into consideration the following tools:

1. http://pypi.python.org/pypi/cssmin/
2. http://developer.yahoo.com/yui/compressor/
3. http://csstidy.sourceforge.net/
4. https://github.com/tubalmartin/YUI-CSS-compressor-PHP-port
5. https://github.com/mrclay/minify
6. http://cleaner.studio98.com/css/

For my tests, i used android.css [original size = 10132 bytes] from the mobile resource folder.

file size [in bytes] produced by each of them:
1. 7993
2. 7926
3. 6437 [ aggressive ] and 7735
4. 5873
5. 8140
6. 8158

does the minified css file work:

1. yes
2. yes
3. no
4. no
5. yes
6. yes

the problem with 2 and 3 here was css3 things [the rotate animation] that broke things in the final css file.

the most active projects are 2 and 5 [latest version happened this year] while the rest are behind in this regard.

1 is in python, which has a big plus for me as it won&#39;t introduce another dependency in our framework, while 2 and 5 need java and php.

there were lots of css optimizers online, but the requirement of command line filtered them out.
the online tools could still be used in conjunction with wget / curl.
but yeah, you have to rely on the development machine to be online, and the webservice to be up and running.

1 is a port of yui, last updated in 2010, and it produces a similar in size minified css file.

I favor 1), the cssmin thing.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26130</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-07-20 13:48:18 +0200</bug_when>
            <thetext> - add a job in the config.json file that does the concatenation of the .css files and mnifies them using cssmin.
 - find out the license under which it is released and write it here too.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26131</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-07-20 14:00:07 +0200</bug_when>
            <thetext>the license for the python cssmin is UNKNOWN unfortunately.
take the tar.gz file from http://pypi.python.org/pypi/cssmin/ and look into the PKG_INFO file. 
As it is a listed python package on python.org, i guess it takes the license after the python itself.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26133</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-07-20 14:01:43 +0200</bug_when>
            <thetext>on github, it has a LICENSE file, which is custom made by the author + the BSD license from yui.

https://github.com/zacharyvoase/cssmin/blob/master/LICENSE</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26427</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-08-08 11:06:01 +0200</bug_when>
            <thetext>fixed on trunk with rev. 28427.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26477</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-08-12 16:40:10 +0200</bug_when>
            <thetext>reverted back to the old way with rev. 28475.
the problem is that cssmin is installed only on my machine now, and until we have it on all machines where we do builds , we pause this task.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26478</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-08-12 17:15:00 +0200</bug_when>
            <thetext>The question I see is whether cssmin (or anything like it) is needed on all machines. 

Is the CSS for the mobileshowcase such a dynamic thing that it has to be re-generated everytime? If not, why not add the minified version as a normal resource to the application, and re-generate it only in case the input CSS has changed!? We do the same thing with our combined images in the framework. Then it would suffice if core developers have it on their machine.

Is it necessary that users of the SDK are able to run this minification? I don&#39;t see ourselves distributing auxiliary technology such as this, so I would find it questionable to add it to the SDK or even the repository. We are also using combined images but don&#39;t check in ImageMagick. It&#39;s the same thing here.

But if it is not part of the SDK then it shouldn&#39;t be part of a standard generator job like &#39;build&#39;, which people might want to run and then stumble into this dependency. I don&#39;t mind if it is an auxiliary job that only we invoke when we need it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26602</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-08-26 18:01:08 +0200</bug_when>
            <thetext>I&#39;ve added cssmin to the tool chain.

There was the general consent that CSS files should be treatable like JS source 
code, especially in the area of mobile development. That means that a CSS 
minifier will be run on regular basis and with high frequency, by both core 
developers and users of qooxdoo. Hence cssmin was adopted as the tool of 
choice, according to Gabi&#39;s selection, to be part of the SDK.

As cssmin can be used as a Python module, I&#39;ve located it in our tool/pylib 
path, so it can be integrated with generator tasks later if the need arises. 
I&#39;ve also added a shallow wrapper around the module so that it can be invoked 
as a command-line tool, like the module itself, but from our standard bin path 
(tool/bin/cssmin.py).

Gabi, you can now re-create your minify-css job, making use of the 
tool/bin/cssmin.py executable. Get back to me if you have any problems using it.

With r28545.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26609</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-08-29 11:01:14 +0200</bug_when>
            <thetext>We should keep an eye on &#39;cssutils&#39;,

    http://pypi.python.org/pypi/cssutils/

which also has minifying features, but also a much broader API for working with 
CSS style sheets. This might  become interesting in the future.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26801</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-09-15 10:51:28 +0200</bug_when>
            <thetext>fixed on trunk with rev. 28651</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26949</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-09-26 15:45:54 +0200</bug_when>
            <thetext>We should refactor this feature, like discussed: 

* Thomas has added the possibility to include css files by config: Bug 4989
* There should be a common job, based on the new &quot;add-css&quot; job, to optimize css. This job should be named something like

   &quot;optimize-css&quot; : true | false

* The demos will be adapted to the  &quot;add-css&quot; with the Bug 5267.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26953</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-09-26 16:07:30 +0200</bug_when>
            <thetext>(In reply to comment #12)
&gt; We should refactor this feature, like discussed: 
&gt; 
&gt; * Thomas has added the possibility to include css files by config: Bug 4989
&gt; * There should be a common job, based on the new &quot;add-css&quot; job, to optimize
&gt; css. This job should be named something like
&gt; 
&gt;    &quot;optimize-css&quot; : true | false
&gt; 
&gt; * The demos will be adapted to the  &quot;add-css&quot; with the Bug 5267.

Just a correction: &quot;add-css&quot; is not a job, as Thomas pointed out to me, it is a config key.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26962</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-09-26 19:38:08 +0200</bug_when>
            <thetext>I thought about this issue.

add-css&#39;ing the cumulated CSS files into the loader gives you a generic 
index.html, but you get a platform-specific application, as the cumulated CSS 
is either ios- or android-specific. 

This means you have to somehow specify for which platform you want to create 
the application. This could be achieved through specific job names, e.g.
 
   source-android

or through a let macro in config.json

  &quot;let&quot; :  {&quot;mobile-platform&quot; : &quot;android&quot;}
  ...

  &quot;source-script&quot; : { 
     &quot;add-css&quot; : &quot;path/to/cumulated_${mobile-platform}.css&quot;,
     ...
  }

Do you expect that people will want to have both types of builds side-by-side?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26991</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-09-27 15:48:50 +0200</bug_when>
            <thetext>Integrated the CSS handling into the mobile skeleton, with the following 
changes:
- &#39;minify-css&#39; job is now part of the skeleton&#39;s config.json
- add a new tool/bin/cat.py script to implement a platform-independent, 
Python-only &#39;cat&#39; command, so it&#39;s available to all users
- changed output file for minified CSS to 
resource/&lt;namespace&gt;/css/&lt;platform&gt;-style-min.css, as it fits better in the 
application namespace
- separate &#39;source-ios&#39; and &#39;source-android&#39; source jobs, which run the 
minify-css job and add the platform-specific minified CSS file to the loader 
(the output files of these jobs overwrite each other)

To come:
- &#39;build-ios&#39; and &#39;build-android&#39; jobs</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27005</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-09-28 10:47:48 +0200</bug_when>
            <thetext>- The source version now uses the .css files from original location; no 
minifying or combining is done.
- The build versions also now use individual .css files, which are individually 
minified in the build/resource tree, under their respective resource id&#39;s.
- I&#39;ve added an asset macro to Application.js and config.json, to copy the 
correct icons for the respective platform.

Source and build versions are now working.

With r28800</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27442</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-11-07 16:34:59 +0100</bug_when>
            <thetext>-&gt; to me</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27760</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-12-01 18:18:17 +0100</bug_when>
            <thetext>Reviewed. Fixed</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37650</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:22:22 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>