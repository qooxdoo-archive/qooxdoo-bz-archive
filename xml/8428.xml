<bug>
          <bug_id>8428</bug_id>
          
          <creation_ts>2014-06-12 17:40:00 +0200</creation_ts>
          <short_desc>Remove automaticaly all bindings from an object when the destructor is called</short_desc>
          <delta_ts>2014-12-16 11:44:26 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>4.0</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>4.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Hagendorn">christian.hagendorn</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>40517</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2014-06-12 17:40:36 +0200</bug_when>
            <thetext>At the moment all existing bindings have to be remove manually form the developer when the object is disposed.

This isn&#39;t handy and it is error-prone. It would be good when the object it self cares about to remove all bindings form it when it&#39;s destructor is called.

These are the use cases which should be automatically removed form the destructor:
1) Bindings which will be done in the class implementation.
...
members : {
  methodName : function() {
    ...
    this.bind(&quot;a&quot;,  b, &quot;b&quot;);
    ...
  }
...

2) Binding with an object is a source object:
myInstance.bind(&quot;a&quot;, b ,&quot;b&quot;);</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40520</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2014-06-13 10:15:17 +0200</bug_when>
            <thetext>BTW. We should also think about the use case when the disposed object is the target object from an existing binding:
object.bind(&quot;a&quot;, disposedObject, &quot;b&quot;);

I think it could be possible to log a warning or an error when the target object will be disposed with a message that an binding to the object exists with object X. Maybe this check should only be done with the source version.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40833</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-07-25 10:35:39 +0200</bug_when>
            <thetext>Added a unit test to show that this feature is already implemented. Maybe it fails in a special use case?

master: 5daec318bd9b32df5b9f3f54cada01878172e5b1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40891</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2014-07-30 13:48:35 +0200</bug_when>
            <thetext>Cant reproduce my issue anymore. Maybe it was a temporary problem.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40899</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2014-08-01 11:32:42 +0200</bug_when>
            <thetext>I found a way to reproduce my issue. I added two unit test on master which show the issue:
db2a1acece2b1e0bd5dcd733a40b5f4ff8af217d

It is important to know that there is a strange issue so that when you run all tests form qx.core.Object you get other issues as a single test run.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40906</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-08-05 09:50:25 +0200</bug_when>
            <thetext>Added a destructor section to the MBinding mixin which now removes all bindings on dispose. I had one problem with the order of the dispose calls because qx.core.Object is already disposed which means the object does not have an hash code the time the mixin destructor is called. But the hash code is required for removing the bindings. Mirrored the hash code in the mixin to restore it temporarily for removing the bindings.

master: 3cbfba46e12f409d80437e66a9a2d537be91ed21</thetext>
          </long_desc>
      
      

    </bug>