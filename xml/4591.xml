<bug>
          <bug_id>4591</bug_id>
          
          <creation_ts>2011-01-29 16:13:00 +0100</creation_ts>
          <short_desc>qx.util.format.DateFormat bug</short_desc>
          <delta_ts>2014-03-03 15:21:40 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.dev.util</component>
          <version>1.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>1.3.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Florin Jurcovici">flj</reporter>
          <assigned_to name="Gabriel Munteanu">jajalinux</assigned_to>
          <cc>thron7</cc>
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>22471</commentid>
            <who name="Florin Jurcovici">flj</who>
            <bug_when>2011-01-29 16:13:43 +0100</bug_when>
            <thetext>Running this in the playground generates an error: 

var locale = qx.locale.Manager.getInstance().getLocale(); 
var format = new qx.util.format.DateFormat(&quot;yyyyMMdd&quot;, locale); 
var date = new Date(2011, 6, 30); 
alert(&quot;date unformatted: &quot; + date.toString() + 
&quot;\ndate formatted: &quot; + format.format(date) + 
&quot;\ndate reparsed: &quot; + format.parse(format.format(date)).toString()); 

If you just change &quot;yyyyMMdd&quot; to &quot;yyyy-MM-dd&quot; it works properly.

First time described here: http://qooxdoo.678.n2.nabble.com/qx-util-format-DateFormat-bug-td5961820.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22887</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-02-22 14:10:23 +0100</bug_when>
            <thetext>fixed on trunk with rev. 25180

what i did was to replace regexp \d\d\d\d+ with \d\d\d\d for pattern yyyy.
i don&#39;t quite get why the + sign was added at then end? if has no reason, then we should do the same for yy, yyy and yyyyy.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22904</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-02-23 08:09:34 +0100</bug_when>
            <thetext>Please, check if its still working like the spec is describing http://www.unicode.org/reports/tr35/#Date_Format_Patterns

Can&#39;t see a reason why the + should be there but please check that. Maybe you can find a hint in the blame why it was added.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22917</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-02-23 10:51:49 +0100</bug_when>
            <thetext>i did looked at those docs.
the plus sign has no reason to be there.
having \d\d\d\d+ for an input string like this: 20110130 [the format being yyyyMMdd] makes the last \d go over to the month part.
my guess is that the author thought that a non-figure character would be always after they year [yyyy/MM/dd,yyyy-MM-dd or yyyy MM dd]. also he would want to cover the case yyyyy format, though this case is specially treated in other parts of the code.
anyway, I added a test for the yyyyMMdd case that brought this bug into existence and run all tests we have for DateFormat class.
all pass.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22980</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-02-25 15:44:48 +0100</bug_when>
            <thetext>(In reply to comment #3)
&gt; i did looked at those docs.
&gt; the plus sign has no reason to be there.
&gt; having \d\d\d\d+ for an input string like this: 20110130 [the format being
&gt; yyyyMMdd] makes the last \d go over to the month part.
&gt; my guess is that the author thought that a non-figure character would be always
&gt; after they year [yyyy/MM/dd,yyyy-MM-dd or yyyy MM dd]. also he would want to
&gt; cover the case yyyyy format, though this case is specially treated in other
&gt; parts of the code.
&gt; anyway, I added a test for the yyyyMMdd case that brought this bug into
&gt; existence and run all tests we have for DateFormat class.
&gt; all pass.

\d\d\d\d+ is probably a wrong attempt to implement the spec. If you look at the unicode.org spec, &#39;y&#39; can be repeated arbitrary often:

  y{1,n}

The number of y&#39;s given in the format string specify the padding (filling with leading 0&#39;s), while &#39;yy&#39; also specifies the maximum length (2).

We therefore have to allow for arbitrary many y&#39;s, taking their number into account when formatting a concrete year. It should be possible to treat &#39;yy&#39; specially, and all other cases (&#39;y&#39;, &#39;yyy&#39;, &#39;yyyy&#39;, &#39;yyyyy&#39;, ...) generically.

This is independent of subsequent non-figure characters (which woulnd&#39;t be matched by \d+ anyway), but I&#39;m not clear about what the spec considers &quot;borders&quot; that end the parsing of the current token, certainly space, comma, &#39;/&#39;, &#39;:&#39; and probably a few others are allowed, while &quot;&#39;&quot; (single-quote) has to be used to escape sub-strings that have to be included literally (see the samples on the unicode.org page).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22981</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-02-25 15:57:15 +0100</bug_when>
            <thetext>
we could do it \d for the y case, \d\d for the yy case and \d\d\d+? for the rest
because this way it will solve the digits following the year digits and hen gets back and take the remaining figures for the year.

(In reply to comment #4)
&gt; (In reply to comment #3)
&gt; &gt; i did looked at those docs.
&gt; &gt; the plus sign has no reason to be there.
&gt; &gt; having \d\d\d\d+ for an input string like this: 20110130 [the format being
&gt; &gt; yyyyMMdd] makes the last \d go over to the month part.
&gt; &gt; my guess is that the author thought that a non-figure character would be always
&gt; &gt; after they year [yyyy/MM/dd,yyyy-MM-dd or yyyy MM dd]. also he would want to
&gt; &gt; cover the case yyyyy format, though this case is specially treated in other
&gt; &gt; parts of the code.
&gt; &gt; anyway, I added a test for the yyyyMMdd case that brought this bug into
&gt; &gt; existence and run all tests we have for DateFormat class.
&gt; &gt; all pass.
&gt; 
&gt; \d\d\d\d+ is probably a wrong attempt to implement the spec. If you look at the
&gt; unicode.org spec, &#39;y&#39; can be repeated arbitrary often:
&gt; 
&gt;   y{1,n}
&gt; 
&gt; The number of y&#39;s given in the format string specify the padding (filling with
&gt; leading 0&#39;s), while &#39;yy&#39; also specifies the maximum length (2).
&gt; 
&gt; We therefore have to allow for arbitrary many y&#39;s, taking their number into
&gt; account when formatting a concrete year. It should be possible to treat &#39;yy&#39;
&gt; specially, and all other cases (&#39;y&#39;, &#39;yyy&#39;, &#39;yyyy&#39;, &#39;yyyyy&#39;, ...) generically.
&gt; 
&gt; This is independent of subsequent non-figure characters (which woulnd&#39;t be
&gt; matched by \d+ anyway), but I&#39;m not clear about what the spec considers
&gt; &quot;borders&quot; that end the parsing of the current token, certainly space, comma,
&gt; &#39;/&#39;, &#39;:&#39; and probably a few others are allowed, while &quot;&#39;&quot; (single-quote) has to
&gt; be used to escape sub-strings that have to be included literally (see the
&gt; samples on the unicode.org page).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22982</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-02-25 16:41:29 +0100</bug_when>
            <thetext>(In reply to comment #5)
&gt; we could do it \d for the y case,

No, you can&#39;t. &#39;y&#39; matches 12345, as you can see from the spec, so &#39;y&#39; has to 
be represented by \d+. (Actually, it would need to be [1-9]\d*, if you want to 
enforce the no leading 0 padding on inputs).

&gt; \d\d for the yy case

This would work, as &#39;yy&#39; needs always to be two digits long.

&gt; and \d\d\d+? for the rest

No. If I&#39;m not mistaken you need to have exactly that many \d&#39;s as you have y&#39;s 
in the format, and *then* add a &#39;+&#39;. Because e.g. &#39;yyyyyyyy&#39; forces so many 0&#39;s 
at the beginning for any year that is less than eight digits long (e.g. 
00002011), but allows longer years to extend beyond it (e.g. 123456789).

&gt; because this way it will solve the digits following the year digits and hen 
gets back and take the remaining figures for the year.

I&#39;m not sure I&#39;m getting exactly what you mean here. But, yes, some formats 
might need parsing &quot;from the end&quot;, as

  yyyMM

applied to the input 

  &quot;19908&quot; 

could be mistaken to mean August 1990, when in fact it means August of the year 
199 (You see here how &#39;MM&#39; enforces the padding with a leading 0). Given the 
format

  yyyM

the same input would indeed be August 1990, and August 199 would be the input  
&quot;1998&quot;. The problem is really that &#39;yyy&#39; is &quot;3 digits or more&quot;, but not cutting 
into the subsequent pattern :-).

See also the link to &quot;Lenient Parsing&quot; on the unicode spec page 
(http://www.unicode.org/reports/tr35/#Lenient_Parsing).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23040</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-03-03 11:15:38 +0100</bug_when>
            <thetext>Specifying a pattern yyyyyyy [7 y&#39;s] will throw an exception in our system as we check the size of the pattern too, and we have special rules for y, yy, yyy, yyyy, yyyyy, yyyyyy.
check method __initParseFeed and inside you will see this:
---------------
if (wildcardChar == rule.pattern.charAt(0) &amp;&amp; wildcardSize == rule.pattern.length)
------------------
In order to allow an indefinite number of y&#39;s require us to rethink our way of determining the patterns that must be used to parse a certain input.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23042</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-03-03 12:19:12 +0100</bug_when>
            <thetext>(In reply to comment #7)
&gt; Specifying a pattern yyyyyyy [7 y&#39;s] will throw an exception in our system as
&gt; we check the size of the pattern too, and we have special rules for y, yy, yyy,
&gt; yyyy, yyyyy, yyyyyy.
&gt; check method __initParseFeed and inside you will see this:
&gt; ---------------
&gt; if (wildcardChar == rule.pattern.charAt(0) &amp;&amp; wildcardSize ==
&gt; rule.pattern.length)
&gt; ------------------
&gt; In order to allow an indefinite number of y&#39;s require us to rethink our way of
&gt; determining the patterns that must be used to parse a certain input.

That&#39;s exactly what I meant in my other comment. I don&#39;t care which quirks the current implementation uses, let&#39;s just put it right this time and try to implement the spec as far as we reasonably can. (We might have to lower our sights in the end, when things get too complex, but let&#39;s try for the best).

As for the &quot;y&quot; format symbol, I repeat what I wrote then: When you construct a regexp from the pattern string you have to add exactly one &quot;\d&quot; for every consecutive &quot;y&quot; you find in the format, and finally add a &quot;+&quot;. You probably need to exempt &quot;yy&quot; and treat it separately, but all other y patterns should be treated like this. (I&#39;m not sure how to handle ambiguities that might arise when the &quot;y&quot; pattern is immediately followed by another numeric pattern. E.g. given the format &quot;yyyM&quot;, what does &quot;19912&quot; resolve to - &quot;December 199&quot; or &quot;February 1991&quot;?!).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23197</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-03-10 11:26:16 +0100</bug_when>
            <thetext>fixed on trunk with rev. 25501
fixd on branch 1_3_x with rev. 25502</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23200</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-03-10 14:14:16 +0100</bug_when>
            <thetext>Here is a Playground example that mirrors the OP&#39;s code: http://tinyurl.com/6hhw8o4 (available with tomorrow&#39;s demo update).

I changed the input data slightly to show the effect of ambiguous parses (&quot;20112&quot; with &quot;yyyM&quot;). But I think it&#39;s ok, as the spec explictly states that &quot;parsing of an ambiguous formatted date string may produce a result that differs from the date originally used to create the formatted string&quot;[1]. 

[1] http://unicode.org/reports/tr35/#Lenient_Parsing</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23201</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-03-10 14:20:26 +0100</bug_when>
            <thetext>yes, i have played with the ambiguous input too, and used java code to reproduce it:

public class Test {
  public static void main(String[] args) {
    Calendar c = Calendar.getInstance();
    c.set(1991, 1, 14);
    Date d = c.getTime();
    System.out.println(&quot;d = &quot;+d);
    SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyMMdd&quot;);
    String dateStr = sdf.format(d);
    System.out.println(&quot;dateStr = &quot;+dateStr);
    Date d2 = sdf.parse(dateStr,new ParsePosition(0));
    System.out.println(&quot;d2 = &quot;+d2);
  }
}

d2 differs from d in java too.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23204</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-03-10 14:40:16 +0100</bug_when>
            <thetext>Gabi, in the &quot;rules.push()&quot; section of the class, can you collapse the cases for &quot;y&quot;, &quot;yy&quot; and &quot;y+&quot; in a single case?! The single case function could handle the special case &quot;yy&quot; like

  regexFunc: function(yNumber) {
     if (yNumber == 2) {
       return &quot;(\\d\\d)&quot;;
     } else {
       // the generic stuff
    ...

?!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23209</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-03-10 16:13:17 +0100</bug_when>
            <thetext>fixed on trunk with rev. 25542
fixed on branch 1_3_x with rev. 25543</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37382</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:21:40 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>