<bug>
          <bug_id>2170</bug_id>
          
          <creation_ts>2009-03-27 18:21:00 +0100</creation_ts>
          <short_desc>apidata.js uses Synthetic Nodes superInterface, superMixin</short_desc>
          <delta_ts>2014-03-03 08:48:10 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.apidata</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          <blocked>2169</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>fabian.jakobs</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>8989</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-03-27 18:21:10 +0100</bug_when>
            <thetext>There are various &quot;smells&quot; in the way the apidata.js is generated:

- Inheritance relationships are encoded in various ways. While parentship is 
represented on a docNode in the &quot;attributes&quot; property under the key 
&quot;childClasses&quot; as a single string, possibly containing multiple names, and 
childship of classes is represented as  the &quot;attributes&quot; key &quot;superClass&quot; as a 
single string, the &quot;superInterfaces&quot; and &quot;superMixins&quot; properties are lists(!) 
of docNodes(!) and saved outside the &quot;attributes&quot; property. Consequently, they 
are not picked up through the serialisation of apidata.js, which only picks up 
entries in the &quot;attributes&quot; property.

- The nodes for the &quot;superInterfaces&quot; and &quot;superMixins&quot; lists are synthetic 
nodes that are created on the fly, just to be inserted into the corresponding 
&quot;super*&quot; list. They have no connection whatsoever to the real docNodes that are 
inserted in the proper package and bear the same names. Yet, without those 
synthetic nodes inheritance relations are not displayed at all (which might be 
the fault of apidata.js or the rendering logic of Apiviewer).

- As a consequence, these synthetic nodes are yielded when traversing the 
docTree (e.g. via tree.nodeTreeMap()). As they duplicate other nodes (e.g. 
&quot;qx.ui.form.IFormElement&quot;), consuming functions like 
ApiLoader.py:docTreeToSearchIndex() have to handle those duplicates.

- The utility and necessity of those &quot;superInterfaces&quot; and &quot;superMixins&quot; lists 
are unclear to me, and I wonder if we could drop these lists of synthetic nodes 
and handle all those inheritance relations equally: as a single string of 
comma-separated names (as with &quot;childClasses&quot;).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36162</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:48:10 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>