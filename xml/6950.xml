<bug>
          <bug_id>6950</bug_id>
          
          <creation_ts>2012-10-31 14:38:00 +0100</creation_ts>
          <short_desc>Register Inner Classes With the Generator</short_desc>
          <delta_ts>2014-03-03 08:47:55 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>31164</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-10-31 14:38:16 +0100</bug_when>
            <thetext>For most jobs, esp. compile jobs, the generator builds up a list of classes to 
work upon, identified by their class name. To do that it selects from each 
class file the first occurrence of a qx.*.define() call, and infers the class 
name from the calls first argument. This class id is registered as a known 
class.

But the file might contain other calls to qx.*.define(), and their symbol names 
are not registered. This interfers with all situations where e.g. additional 
classes are defined further down the file, or within methods of the &#39;main&#39; 
class. This pattern is especially used in situations like unit tests (see e.g. 
qx.test.* classes) or simple, one-file demos (see demobrowser.demo.*).

There is no principal reason to not add additional classes to the generator&#39;s 
registry. This would immediately allow the use of such classes in the same file 
to be recognized as known symbols, so they wouldn&#39;t have to be @ignore&#39;d.

Name clashes:
Care needs to be taken that the names of such inner classes do not conflict 
with existing, regular classes, e.g. defining an inner class &#39;qx.test.Bar&#39; in a 
file qx/test/Foo.js when there is also a file qx/test/Bar.js. Such inner 
classes could shadow the regular class, and references to the regular class 
from other code could be mislead to use the inner class (This could happen e.g. 
when following dependencies). At runtime, this would already lead to a 
conflict, so the existing code needs to avoid it already.

Class livecycle:
The generator cannot know when an inner class will be created during runtime. 
Like with other global symbols it will assume the class is available after its 
file has been loaded when looking at references to the class. This might not be 
true at runtime (a reference could be used *before* the qx.*.define call for 
this class has been executed; or even, a qx.*.undefine() for the class might 
have been issued). But it&#39;s good enough to treat the class as &quot;known&quot;, as the 
major target of the global symbol checking are those symbols that are not 
defined *anywhere* in class code (like typos or external symbols).

Class-file relationship:
It might be an issue to clarify the class-file relationship when additional 
classes are defined in the same file. This might involve some work. The 
generator registers the file path with the class name anyway, and when 
consulting the corresponding code might only need look up the specific 
qx.*.define call, rather than treating the file as a whole. Scoping and closure 
issue might come into play as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31165</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-10-31 14:39:03 +0100</bug_when>
            <thetext>Related bug#6949.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36073</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:55 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>