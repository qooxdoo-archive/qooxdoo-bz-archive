<bug>
          <bug_id>4454</bug_id>
          
          <creation_ts>2010-12-07 19:14:00 +0100</creation_ts>
          <short_desc>Validate popup message for empty and never touched fields connected to validation</short_desc>
          <delta_ts>2010-12-09 08:15:12 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.form</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stefan Andersson">dev</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>derrell.lipman</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>21842</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-12-07 19:14:37 +0100</bug_when>
            <thetext>A field connected to validation:

validator.add(textF, qx.util.Validate.string(&quot;The entered value is not a string.&quot;, true));

the message &quot;The entered value is not a string.&quot; is popped up when hovering with the mouse over the field. The field is empty, untouched and has not been changed.

Logical might be not to show anything for an &quot;untouched&quot; (never changed = null value) field.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21843</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2010-12-07 21:04:21 +0100</bug_when>
            <thetext>(In reply to comment #0)
&gt; A field connected to validation:
&gt; 
&gt; validator.add(textF, qx.util.Validate.string(&quot;The entered value is not a
&gt; string.&quot;, true));
&gt; 
&gt; the message &quot;The entered value is not a string.&quot; is popped up when hovering
&gt; with the mouse over the field. The field is empty, untouched and has not been
&gt; changed.
&gt; 
&gt; Logical might be not to show anything for an &quot;untouched&quot; (never changed = null
&gt; value) field.

On the other hand, it&#39;s nice to be able to give the user a hint at what&#39;s to be entered in a field. A slight rewording of the validation string such that it applies whether data has been entered or not could work in your case, and still provide this extra hint:

validator.add(textF, qx.util.Validate.string(&quot;The entered value must be a string.&quot;, true));</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21850</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-12-08 08:36:54 +0100</bug_when>
            <thetext>(In reply to comment #0)
&gt; Logical might be not to show anything for an &quot;untouched&quot; (never changed = null
&gt; value) field.

The validator checks for strings. The initial value is null which is not a string. Thats the designed behavior. 
You can either, set the value to an empty string on startup or use a custom validator. Both, not much work in the custom code.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21881</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-12-09 07:14:35 +0100</bug_when>
            <thetext>(In reply to comment #1)
&gt; (In reply to comment #0)
&gt; &gt; A field connected to validation:
&gt; &gt; 
&gt; &gt; validator.add(textF, qx.util.Validate.string(&quot;The entered value is not a
&gt; &gt; string.&quot;, true));
&gt; &gt; 
&gt; &gt; the message &quot;The entered value is not a string.&quot; is popped up when hovering
&gt; &gt; with the mouse over the field. The field is empty, untouched and has not been
&gt; &gt; changed.
&gt; &gt; 
&gt; &gt; Logical might be not to show anything for an &quot;untouched&quot; (never changed = null
&gt; &gt; value) field.
&gt; 
&gt; On the other hand, it&#39;s nice to be able to give the user a hint at what&#39;s to be
&gt; entered in a field. A slight rewording of the validation string such that it
&gt; applies whether data has been entered or not could work in your case, and still
&gt; provide this extra hint:
&gt; 
&gt; validator.add(textF, qx.util.Validate.string(&quot;The entered value must be a
&gt; string.&quot;, true));

Absolutely. I agree. But it does not change the proposed, to make the validator to know when you previously have tried to make a change and then afterwards show this message.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21882</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-12-09 07:18:00 +0100</bug_when>
            <thetext>(In reply to comment #3)
&gt; (In reply to comment #1)
&gt; &gt; (In reply to comment #0)
&gt; &gt; &gt; A field connected to validation:
&gt; &gt; &gt; 
&gt; &gt; &gt; validator.add(textF, qx.util.Validate.string(&quot;The entered value is not a
&gt; &gt; &gt; string.&quot;, true));
&gt; &gt; &gt; 
&gt; &gt; &gt; the message &quot;The entered value is not a string.&quot; is popped up when hovering
&gt; &gt; &gt; with the mouse over the field. The field is empty, untouched and has not been
&gt; &gt; &gt; changed.
&gt; &gt; &gt; 
&gt; &gt; &gt; Logical might be not to show anything for an &quot;untouched&quot; (never changed = null
&gt; &gt; &gt; value) field.
&gt; &gt; 
&gt; &gt; On the other hand, it&#39;s nice to be able to give the user a hint at what&#39;s to be
&gt; &gt; entered in a field. A slight rewording of the validation string such that it
&gt; &gt; applies whether data has been entered or not could work in your case, and still
&gt; &gt; provide this extra hint:
&gt; &gt; 
&gt; &gt; validator.add(textF, qx.util.Validate.string(&quot;The entered value must be a
&gt; &gt; string.&quot;, true));
&gt; 
&gt; Absolutely. I agree. But it does not change the proposed, to make the validator
&gt; to know when you previously have tried to make a change and then afterwards
&gt; show this message.

Additionally, I think there must be a difference in the definition when to use a tooltip and when to use the popup message at validation. I see the popup message at validation as an error advice to the user when they have forgotten to typed something in a required field or when they have typed somtething nvalid. Two use cases should require two different messages. What do you think about that?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21884</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-12-09 08:15:12 +0100</bug_when>
            <thetext>(In reply to comment #4)
&gt; Additionally, I think there must be a difference in the definition when to use
&gt; a tooltip and when to use the popup message at validation. I see the popup
&gt; message at validation as an error advice to the user when they have forgotten
&gt; to typed something in a required field or when they have typed somtething
&gt; nvalid. Two use cases should require two different messages. What do you think
&gt; about that?

That may be a useful scenario for applications and can easily be achieved with custom validators. There is no need for the framework to cover all different requirements if its that easy to write custom validators. In case of a textfield, the init value is null which means the user hasn&#39;t entered something. Then you can print out your &quot;please enter something&quot; message. As soon as there is a string store, the user has changed something and you can show the invalid message.</thetext>
          </long_desc>
      
      

    </bug>