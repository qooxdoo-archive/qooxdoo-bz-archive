<bug>
          <bug_id>4333</bug_id>
          
          <creation_ts>2010-11-16 12:09:00 +0100</creation_ts>
          <short_desc>create-application doesn&#39;t Accept -n &quot;qui1.2&quot;</short_desc>
          <delta_ts>2010-11-16 14:06:42 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool</component>
          <version>1.2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>INVALID</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>21335</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-11-16 12:09:41 +0100</bug_when>
            <thetext>Calling &quot;create-application.py -n qui1.2&quot; will create a name space qui1/2, &quot;2&quot; 
being a sub-name space. Usually, this is what is intended when using &quot;.&quot; in 
name space names. But maybe there could be a way to treat things like &quot;qui1.2&quot; 
as a single atomic name space.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21339</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-11-16 12:49:47 +0100</bug_when>
            <thetext>I suggest not to allow dots in namespaces. It most likely causes more trouble (if it can be handled sufficiently at all) without a real benefit.

But it would be good to print out a error message when submitting namespaces with docs, so I keep that bug open (maybe the title needs to be adjusted).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21342</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-11-16 14:06:42 +0100</bug_when>
            <thetext>(In reply to comment #1)
&gt; I suggest not to allow dots in namespaces. It most likely causes more trouble
&gt; (if it can be handled sufficiently at all) without a real benefit.
&gt; 
&gt; But it would be good to print out a error message when submitting namespaces
&gt; with docs, so I keep that bug open (maybe the title needs to be adjusted).

No, it&#39;s just the other way around: Dots in name spaces are explicitly supported, but with the special semantics that it is a complex name space (ie. a name space with sub-name space(s)). So you can say

  create-application.py -n myapp -s foo.bar.baz

and it will create all the necessary paths, like 

  source/class/foo/bar/baz/Application.js
  source/resource/foo/bar/baz/test.png

and so on. This is considered a feature :).

The issue of this bug is if it is possible to suppress this behaviour, so that someone can create an atomic name space with a dot, like

  source/class/qui1.2/Application.js

But now that I think about it, this is not possible, as the class name for Application.js would be &quot;qui1.2.Application&quot;, and *that* cannot be guarded from taking it as a sub-name space.

-&gt; Invalid.</thetext>
          </long_desc>
      
      

    </bug>