<bug>
          <bug_id>6504</bug_id>
          
          <creation_ts>2012-06-14 16:52:00 +0200</creation_ts>
          <short_desc>qx.html.Decorator elements not disposed</short_desc>
          <delta_ts>2012-10-01 14:15:00 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop</component>
          <version>1.5.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>INVALID</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>2.0.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter>m.balcerzak</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>29777</commentid>
            <who name="">m.balcerzak</who>
            <bug_when>2012-06-14 16:52:00 +0200</bug_when>
            <thetext>After disposing ui objects there are qx.html.Decorator elements alive in the object registry. Tested on versions from 1.3.1 to 1.6. Code to show the problem attached.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29778</commentid>
              <attachid>1166</attachid>
            <who name="">m.balcerzak</who>
            <bug_when>2012-06-14 16:53:51 +0200</bug_when>
            <thetext>Created attachment 1166
app to show the decorator not disposing</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29805</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-06-15 08:05:13 +0200</bug_when>
            <thetext>Thanks for the report.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30503</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-08-27 16:03:43 +0200</bug_when>
            <thetext>I just checked your sample code and it seems something is missing. Sure, the number of qx.html.Decorator elements increases on the first call but not on the second one. This is because we pool these elements to use them later. I also checked if something changed to the not pooled decorators but that didn&#39;t. So there seems to be everything ok. Here is the code to see how to check for the pooled decorators:

      var unpooled = 0;
      var reg = qx.core.ObjectRegistry.getRegistry();
      for (var hash in reg) {
        var obj = reg[hash];
        if (obj.classname == &quot;qx.html.Decorator&quot;) {
          if (!obj.$$pooled) unpooled++;
        }
      }
      console.log(&quot;Unpooled decorators: &quot; + unpooled);</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="0" isprivate="0" isurl="0">
            <attachid>1166</attachid>
            <date>2012-06-14 16:53:00 +0200</date>
            <delta_ts>2012-06-14 16:53:51 +0200</delta_ts>
            <desc>app to show the decorator not disposing</desc>
            <filename>Application.js</filename>
            <type>application/javascript</type>
            <size>2000</size>
            <attacher>m.balcerzak</attacher>
            
              <data encoding="base64">cXguQ2xhc3MuZGVmaW5lKCJtZW10ZXN0LkFwcGxpY2F0aW9uIiwgewoJCQlleHRlbmQgOiBxeC5h
cHBsaWNhdGlvbi5TdGFuZGFsb25lLAoJCQlldmVudHMgOiB7CgkJCQkia2lsbFdpbmRvdyIgOiAi
cXguZXZlbnQudHlwZS5EYXRhIgoJCQl9LAoJCQltZW1iZXJzIDogewoJCQkJbWFpbiA6IGZ1bmN0
aW9uKCkgewoJCQkJCXRoaXMuYmFzZShhcmd1bWVudHMpOwoJCQkJCXF4LmxvZy5hcHBlbmRlci5O
YXRpdmU7CgkJCQkJcXgubG9nLmFwcGVuZGVyLkNvbnNvbGU7CgkJCQkJdGhpcy5hZGRMaXN0ZW5l
cigia2lsbFdpbmRvdyIsIGZ1bmN0aW9uKGUpIHsKCQkJCQkJCQl2YXIgd2luID0gZS5nZXREYXRh
KCk7CgkJCQkJCQkJd2luLmNsb3NlKCk7CgkJCQkJCQkJd2luLmRlc3Ryb3koKTsKCQkJCQkJCQl3
aW4uZGlzcG9zZSgpOwoJCQkJCQkJfSwgdGhpcyk7CgkJCQkJdmFyIGRvYyA9IHRoaXMuZ2V0Um9v
dCgpOwoJCQkJCXZhciBidXR0b24xID0gbmV3IHF4LnVpLmZvcm0uQnV0dG9uKCJUZXN0IEJ1dHRv
biIpOwoJCQkJCWRvYy5hZGQoYnV0dG9uMSwgewoJCQkJCQkJCWxlZnQgOiAxMDAsCgkJCQkJCQkJ
dG9wIDogNTAKCQkJCQkJCX0pOwoJCQkJCWJ1dHRvbjEuZm9jdXMoKTsKCQkJCQlidXR0b24xLmFk
ZExpc3RlbmVyKCJleGVjdXRlIiwgZnVuY3Rpb24oZSkgewoJCQkJCQkJCWZvciAodmFyIGsgPSAw
OyBrIDwgMTA7IGsrKykgewoJCQkJCQkJCQl2YXIgd2luZG93ID0gbmV3IHF4LnVpLndpbmRvdy5X
aW5kb3coIlRlc3Qgd2luZG93OiAiICsgKGsgKyAxKSk7CgkJCQkJCQkJCXdpbmRvdy5zZXRMYXlv
dXQobmV3IHF4LnVpLmxheW91dC5DYW52YXMoKSk7CgkJCQkJCQkJCXZhciBidXR0b24gPSBuZXcg
cXgudWkuZm9ybS5CdXR0b24oIk9LIik7CgkJCQkJCQkJCWJ1dHRvbi5hZGRMaXN0ZW5lcigiZXhl
Y3V0ZSIsIGZ1bmN0aW9uKGUpIHsKCQkJCQkJCQkJCQkJdGhpcy5fdGhpcy5maXJlRGF0YUV2ZW50
KCJraWxsV2luZG93IiwgdGhpcy53aW5kb3cpOwoJCQkJCQkJCQkJCQlidXR0b24xLmZvY3VzKCk7
CgkJCQkJCQkJCQkJfSwgewoJCQkJCQkJCQkJCQkiX3RoaXMiIDogdGhpcywKCQkJCQkJCQkJCQkJ
IndpbmRvdyIgOiB3aW5kb3cKCQkJCQkJCQkJCQl9KTsKCQkJCQkJCQkJd2luZG93LmFkZExpc3Rl
bmVyT25jZSgiYXBwZWFyIiwgZnVuY3Rpb24oZSkgewoJCQkJCQkJCQkJCQl0aGlzLmJ1dHRvbi5l
eGVjdXRlKCk7CgkJCQkJCQkJCQkJfSwgewoJCQkJCQkJCQkJCQkiYnV0dG9uIiA6IGJ1dHRvbgoJ
CQkJCQkJCQkJCX0pOwoJCQkJCQkJCQl3aW5kb3cuYWRkTGlzdGVuZXJPbmNlKCJjbG9zZSIsIGZ1
bmN0aW9uKGUpIHsKCQkJCQkJCQkJCQkJdmFyIGFyciA9IHRoaXMud2luZG93LnJlbW92ZUFsbCgp
OwoJCQkJCQkJCQkJCQlmb3IgKHZhciBrID0gMCwgbCA9IGFyci5sZW5ndGg7IGsgPCBsOyBrKysp
IHsKCQkJCQkJCQkJCQkJCWFycltrXS5kZXN0cm95KCk7CgkJCQkJCQkJCQkJCQlhcnJba10uZGlz
cG9zZSgpOwovLyB0aGlzLmJ1dHRvbi5kZXN0cm95KCk7Ci8vIHRoaXMuYnV0dG9uLmRpc3Bvc2Uo
KTsKCQkJCQkJCQkJCQkJfQoJCQkJCQkJCQkJCX0sIHsKCQkJCQkJCQkJCQkJIndpbmRvdyIgOiB3
aW5kb3csCgkJCQkJCQkJCQkJCSJidXR0b24iIDogYnV0dG9uCgkJCQkJCQkJCQkJfSk7CgkJCQkJ
CQkJCXdpbmRvdy5hZGQoYnV0dG9uKTsKCQkJCQkJCQkJd2luZG93LnNob3coKTsKCQkJCQkJCQl9
CgkJCQkJCQl9LCB0aGlzKTsKCQkJCQl2YXIgYnV0dG9uMiA9IG5ldyBxeC51aS5mb3JtLkJ1dHRv
bigiSW5mbyBCdXR0b24iLCBudWxsKTsKCQkJCQlkb2MuYWRkKGJ1dHRvbjIsIHsKCQkJCQkJCQls
ZWZ0IDogMTAwLAoJCQkJCQkJCXRvcCA6IDE1MAoJCQkJCQkJfSk7CgkJCQkJYnV0dG9uMi5hZGRM
aXN0ZW5lcigiZXhlY3V0ZSIsIGZ1bmN0aW9uKGUpIHsKCQkJCQkJCQl0aGlzLmRlYnVnKHF4LmRl
di5PYmplY3RTdW1tYXJ5LmdldEluZm8oKSk7CgkJCQkJCQl9LCB0aGlzKTsKCQkJCX0KCQkJfQoJ
CX0pOwo=
</data>

          </attachment>
      

    </bug>