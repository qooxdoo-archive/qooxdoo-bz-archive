<bug>
          <bug_id>3065</bug_id>
          
          <creation_ts>2009-11-17 09:21:00 +0100</creation_ts>
          <short_desc>Problems with asynchronous unit tests</short_desc>
          <delta_ts>2014-03-03 15:22:23 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>app.testrunner</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.0-beta1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Wagner">daniel.wagner</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>martin.wittemann</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>14144</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-11-17 09:21:26 +0100</bug_when>
            <thetext>It is possible to inadvertently write an asynchronous unit test in such a way that the &quot;resume&quot; function is called after the test has finished. This causes the test result to be displayed twice (sometimes with different results) and messes up the test sequence since the runner will start the next test once one has finished. Usually, any following unit tests will then fail.

Martin suggested a way to fix this: The test runner could call each test function with a unique ID. Within the test, this ID would passed in to the &quot;wait&quot; and &quot;resume&quot; functions. This way, the test runner could keep track of the state of each test and ignore &quot;resume&quot; calls from tests that are finished already while displaying a warning so that the offending test can be fixed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14208</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-11-18 20:29:00 +0100</bug_when>
            <thetext>I believe I found a better way to achieve this: resume() now calls TestResult.run() with an additional boolean parameter. If this is true but there is no timeout active for the current test, it means that resume() was called before wait(). In this case, TestResult.run() won&#39;t fire another startTest event (so the Testrunner GUI won&#39;t be confused) and will mark the test as failed.
Fix added in r20690.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14686</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:16:36 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37656</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:22:23 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>