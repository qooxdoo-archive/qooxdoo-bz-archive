<bug>
          <bug_id>1631</bug_id>
          
          <creation_ts>2008-11-24 15:23:00 +0100</creation_ts>
          <short_desc>Complete methods in Simple table model</short_desc>
          <delta_ts>2014-03-03 15:25:53 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.table</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>0.8.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Petr Kobalíček">kobalicek.petr</reporter>
          <assigned_to name="Fabian Jakobs">fabian.jakobs</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>6447</commentid>
            <who name="Petr Kobalíček">kobalicek.petr</who>
            <bug_when>2008-11-24 15:23:03 +0100</bug_when>
            <thetext>There are missing methods in Simple table model that allow to set (or maybe replace) existing rows. Yeah, we can use removeRows and addRows, but is this really needed to use set of functions to simple task like setRow() ;) ?

So, these methods should be added to Simple table model to be complete:

    /**
     * Gets the whole data as array of maps.
     *
     * @note Individual items are get using getRowDataAsMap().
     */
    getDataAsMapArray: function() {
      var len = this.getRowCount();
      var data = [];

      for (var i = 0; i &lt; len; i++)
      {
        data.push(this.getRowDataAsMap(i));
      }

      return data;
    },

    /**
     * Sets rows in the model.
     *
     * Warning: The given array will be altered!
     *
     * @param rowArr {var[][]} An array containing an array for each row. Each
     *          row-array contains the values in that row in the order of the columns
     *          in this model.
     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,
     *          the rows are set from the beginning (0).
     * @param clearSorting {Boolean ? true} Whether to clear the sort state.
     * @return {void}
     */
    setRows : function(rowArr, startIndex, clearSorting)
    {
      if (startIndex == null) startIndex = 0; 

      // Prepare the rowArr so it can be used for apply
      rowArr.splice(0, 0, startIndex, rowArr.length);

      // Replace rows
      Array.prototype.splice.apply(this.__rowArr, rowArr);

      // Inform the listeners
      var data =
      {
        firstRow    : startIndex,
        lastRow     : this.__rowArr.length - 1,
        firstColumn : 0,
        lastColumn  : this.getColumnCount() - 1
      };
      this.fireDataEvent(qx.ui.table.ITableModel.EVENT_TYPE_DATA_CHANGED, data);

      if (clearSorting !== false) {
        this.clearSorting();
      }
    },

    /**
     * Set rows in the model.
     *
     * Warning: The given array (mapArr) will be altered!
     *
     * @param mapArr {Map[]} An array containing a map for each row. Each
     *        row-map contains the column IDs as key and the cell values as value.
     * @param startIndex {Integer ? null} The index where to insert the new rows. If null,
     *        the rows are appended to the end.
     * @param rememberMaps {Boolean ? false} Whether to remember the original maps.
     *        If true {@link #getRowData} will return the original map.
     * @param clearSorting {Boolean ? true} Whether to clear the sort state.
     */
    setRowsAsMapArray : function(mapArr, startIndex, rememberMaps, clearSorting) {
      this.setRows(this._mapArray2RowArr(mapArr, rememberMaps), startIndex, clearSorting);
    },


And also, there is inconsistenci about AsMapArray() and AsMap() naming. I used AsMapArray(), but I think that it should be named only AsMap() - shorter and better.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>6565</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-12-01 16:14:13 +0100</bug_when>
            <thetext>to me</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7332</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-01-13 19:42:28 +0100</bug_when>
            <thetext>I have added these methods in rev. 17221. I agree with the naming inconsistency but I don&#39;t want to break the API so I keep it the way it is now.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38912</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:53 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>