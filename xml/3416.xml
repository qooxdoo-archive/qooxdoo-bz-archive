<bug>
          <bug_id>3416</bug_id>
          
          <creation_ts>2010-02-04 12:26:00 +0100</creation_ts>
          <short_desc>Funny check in qx.lang.String.repeat</short_desc>
          <delta_ts>2014-03-03 15:23:06 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.lang</component>
          <version>1.0.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>trivial</bug_severity>
          <target_milestone>1.0.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Matthias Reuter">creu</reporter>
          <assigned_to name="Christian Hagendorn">christian.hagendorn</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>16692</commentid>
            <who name="Matthias Reuter">creu</who>
            <bug_when>2010-02-04 12:26:28 +0100</bug_when>
            <thetext>return str.length &gt;= 0 ? new Array(times + 1).join(str) : &quot;&quot;;

What kind of object is str, having a property &quot;length&quot; with a possible negative value? Why would one expect such an object?

I guess it is meant as a shortcut for str === &quot;&quot;, to speed up &quot;&quot; * 100000, so it should read

return str ? new Array(times + 1).join(str) : &quot;&quot;;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16711</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-02-05 12:52:29 +0100</bug_when>
            <thetext>to Chris</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17642</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2010-04-06 14:53:03 +0200</bug_when>
            <thetext>Accepted.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17644</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2010-04-06 16:16:24 +0200</bug_when>
            <thetext>It seems to me that the check &quot;str.length &gt;= 0&quot; is not for speed up, because length returns zero on an empty string, so the &quot;new Array(times + 1).join(str)&quot; is executed. A test with &quot;undefined &gt;= 0&quot; shows that the result is &quot;false&quot; which would return a empty string. So I would prefer to keep the current implementation, because it is robust for wrong inputs. If you don&#39;t think so, please reopen the bug.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17744</commentid>
            <who name="Matthias Reuter">creu</who>
            <bug_when>2010-04-14 10:23:10 +0200</bug_when>
            <thetext>&gt; It seems to me that the check &quot;str.length &gt;= 0&quot; is not for speed up

Yes, it is. But it&#39;s done wrong. The check should be &quot;str.length &gt; 0&quot;.

&gt; So I would prefer to keep the current implementation, because it is robust for wrong inputs.

No, it is not. If str is null or undefined, this function will throw an error. For any other input, its string representation is repeated. But fixing the check won&#39;t change that.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17751</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2010-04-14 12:28:08 +0200</bug_when>
            <thetext>(In reply to comment #4)
&gt; &gt; It seems to me that the check &quot;str.length &gt;= 0&quot; is not for speed up
&gt; 
&gt; Yes, it is. But it&#39;s done wrong. The check should be &quot;str.length &gt; 0&quot;.
&gt; 
&gt; &gt; So I would prefer to keep the current implementation, because it is robust for wrong inputs.
&gt; 
&gt; No, it is not. If str is null or undefined, this function will throw an error.
&gt; For any other input, its string representation is repeated. But fixing the
&gt; check won&#39;t change that.
&gt; 
Sorry, that&#39;s right. I meant more robust relating to &#39;str ? new Array(times + 1).join(str) : &quot;&quot;&#39;. But I also prefer to change it to &#39;str.length &gt; 0&#39; this would improve the performance.

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17789</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2010-04-14 16:30:46 +0200</bug_when>
            <thetext>Fixed on trunk with rev. 21893 and branch with rev. 21894.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37891</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:23:06 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>