<bug>
          <bug_id>5345</bug_id>
          
          <creation_ts>2011-07-07 18:18:00 +0200</creation_ts>
          <short_desc>Check for not disposed objects</short_desc>
          <delta_ts>2014-03-03 15:23:51 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>mobile</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.6</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tino Butz">tinobutz</reporter>
          <assigned_to name="Gabriel Munteanu">jajalinux</assigned_to>
          
          <qa_contact name="Tino Butz">tinobutz</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>25858</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-07-07 18:18:07 +0200</bug_when>
            <thetext>With Bug #4885 we have introduced a functionality to find undisposed objects. The mobile framework should be reviewed on memory leaks, by using this dispose check.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26449</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-08-09 16:13:25 +0200</bug_when>
            <thetext>I did the memory leak procedure as specified in the manual here:
http://manual.qooxdoo.org/1.5.x/pages/development/memory_management.html#finding-memory-leaks
for application/mobileshowcase.
the problem is that most of the objects created were found.
I guess we have to create a special app, where we create and destroy all widgets in the mobile namespace, then call qx.dev.Debug.stopDisposeProfiling() to get what references are still present and check them as memory links.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26467</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-08-11 13:58:42 +0200</bug_when>
            <thetext>We should use the mobile unit tests in the testrunner to identify the memory leaks.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26526</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-08-18 14:02:43 +0200</bug_when>
            <thetext>fixed on trunk with rev. 28498.
In the testrunner , there is 1 leak left, which cannot be removed.
it is in the testWidgetRegistrationSameId method of qx.test.mobile.core.Widget where this code:
       
     if (qx.core.Environment.get(&quot;qx.debug&quot;))
      {
        this.assertException(function() {
          var widget2 = new qx.ui.mobile.core.Widget().set({id:&quot;affe&quot;});
        });
      }
crashes in a try / catch when trying to create a widget with the same id.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38170</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:23:51 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>