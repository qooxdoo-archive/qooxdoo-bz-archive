<bug>
          <bug_id>7796</bug_id>
          
          <creation_ts>2013-10-17 09:39:00 +0200</creation_ts>
          <short_desc>Put Treegenerators in a Pipeline, instead of maintaining them in Parallel</short_desc>
          <delta_ts>2014-03-03 09:56:30 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>3.0.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>34092</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-10-17 09:39:43 +0200</bug_when>
            <thetext>Currently, there are two treegenerator modules to parse JavaScript files in the 
tool chain:
- ecmascript/frontend/treegenerator_3.py  - produces a verbose tree (CST), for 
pretty_printing
- ecmascript/frontend/treegenerator.py  - produces an optimized tree (AST), for 
everything else, e.g. optimizations

This means that both modules handle the basic syntax rules of JS, and have to 
be adapted to fix bugs, support new language constructs, etc. I.e. double 
maintenance effort.

One solution for this would be to only have treegenerator_3.py (which produces 
verbose trees) parse the JS code. If the intend is then to produce something 
else than a pretty-print of the code, apply a tree tranformation to the CST to 
produce the optimized AST, which can then be processed as usual.

On empty cache this might incure a slightly longer compile time.

There is a skeleton for such a tree transformer in the repo, under 
tool/pylib/ecmascript/transform/tree3_to_1.py.

An alternative would be to use the CST for everything, but that would mean 
adapting each and every bit of code that handles AST&#39;s, which would be a lot. 
The advantage of the tree3_to_1.py approach is also to have tree transformation 
technology around, which could then also be adapted when using parsers that 
produce other syntax trees, like Esprima which produces Mozilla&#39;s AST API.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36211</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 09:56:30 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year or we don&#39;t think it will be fixed in the near future.</thetext>
          </long_desc>
      
      

    </bug>