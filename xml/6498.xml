<bug>
          <bug_id>6498</bug_id>
          
          <creation_ts>2012-06-13 18:41:00 +0200</creation_ts>
          <short_desc>Update list model loose selection</short_desc>
          <delta_ts>2012-06-20 08:02:04 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.list</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>INVALID</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Benjamin Dreux">dreux.benjamin</reporter>
          <assigned_to name="Christian Hagendorn">christian.hagendorn</assigned_to>
          
          <qa_contact name="Christian Hagendorn">christian.hagendorn</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>29762</commentid>
            <who name="Benjamin Dreux">dreux.benjamin</who>
            <bug_when>2012-06-13 18:41:06 +0200</bug_when>
            <thetext>I&#39;ve just noticed an issue with the List widget

Here there are two exemples:
http://demo.qooxdoo.org/devel/playground/#%7B%22code%22%3A%22var%2520rawData%2520%253D%2520%255B%2522item1%2522%252C%2522item2%2522%255D%253B%250Avar%2520model%2520%253D%2520qx.data.marshal.Json.createModel(%2520rawData%2520)%253B%250Avar%2520list%2520%253D%2520new%2520qx.ui.list.List(model)%253B%250A%250Athis.getRoot().add(list%252C%2520%257Btop%253A10%252Cleft%253A10%257D)%253B%250A%250Avar%2520timer%2520%253D%2520new%2520qx.event.Timer(1000)%253B%250Atimer.addListener(%2522interval%2522%252Cfunction()%257B%250A%2520%2520rawData.push(%2522new%2520item%2522)%253B%250A%2520%2520var%2520model%2520%253D%2520qx.data.marshal.Json.createModel(%2520rawData%2520)%253B%250A%2520%2520list.setModel(model)%253B%250A%2520%2520%250A%257D%252Cthis)%253B%250Atimer.start()%253B%22%2C%20%22mode%22%3A%22ria%22%7D

and

http://demo.qooxdoo.org/devel/playground/#%7B%22code%22%3A%22var%2520rawData%2520%253D%2520%255B%257Blabel%253A%2522item1%2522%257D%252C%257Blabel%253A%2522item2%2522%257D%255D%253B%250Avar%2520model%2520%253D%2520qx.data.marshal.Json.createModel(%2520rawData%2520)%253B%250Avar%2520list%2520%253D%2520new%2520qx.ui.list.List(model)%253B%250Alist.setLabelPath(%2522label%2522)%253B%250Athis.getRoot().add(list%252C%2520%257Btop%253A10%252Cleft%253A10%257D)%253B%250A%250Avar%2520timer%2520%253D%2520new%2520qx.event.Timer(1000)%253B%250Atimer.addListener(%2522interval%2522%252Cfunction()%257B%250A%2520%2520rawData.push(%257Blabel%253A%2522new%2520item%2522%257D)%253B%250A%2520%2520var%2520model%2520%253D%2520qx.data.marshal.Json.createModel(%2520rawData%2520)%253B%250A%2520%2520list.setModel(model)%253B%250A%2520%2520%250A%257D%252Cthis)%253B%250Atimer.start()%253B%22%2C%20%22mode%22%3A%22ria%22%7D

If you select a list item, when the model gets updated, the selection
is keeped, but only if items of the models are strings.
If the model is made up of objects, the selection is loosed when the
model get updated.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29763</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2012-06-13 19:09:49 +0200</bug_when>
            <thetext>The behavior for your object example is like expected. The selection is lost, because you are creating new objects, so the selection manager detects that the current selection object doesn&#39;t exist in the model.

You have to reuse the old objects like my improvements and it works like you expect it:
http://tinyurl.com/cu8sl65</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29767</commentid>
            <who name="Benjamin Dreux">dreux.benjamin</who>
            <bug_when>2012-06-13 20:59:07 +0200</bug_when>
            <thetext>But in the first exemple, we create a new model, then we set it.

Why there is a difference in the behavior of the list, depending on the fact that the model is based on string or based on object.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29769</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2012-06-14 09:49:15 +0200</bug_when>
            <thetext>Right, the different is that the first example are Strings and the second are Objects. The Sting comparison uses the value form the String, Objects uses the reference. So with the first example a new String with the same value is equals, but a new Object with the same value is not equals.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29772</commentid>
            <who name="Benjamin Dreux">dreux.benjamin</who>
            <bug_when>2012-06-14 14:09:53 +0200</bug_when>
            <thetext>I&#39;m wondering if it would be possible to compare the objects in the list model.

Here is a tiny exemple of a way to compare object.
http://preview.tinyurl.com/6trtoyq

Maybe we can use this way to compare objects in the list models.

Of course this could be potentially long depending on the length of the list. So it could be a specific method on the model object.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29813</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-06-15 09:09:45 +0200</bug_when>
            <thetext>(In reply to comment #4)
&gt; I&#39;m wondering if it would be possible to compare the objects in the list model.
&gt; 
&gt; Here is a tiny exemple of a way to compare object.
&gt; http://preview.tinyurl.com/6trtoyq
&gt; 
&gt; Maybe we can use this way to compare objects in the list models.
&gt; 
&gt; Of course this could be potentially long depending on the length of the list.
&gt; So it could be a specific method on the model object.

In general, yes that would be possible. But still, I see two issues with that.

1. We could have two objects having the same serialized content but are not the same. So we might select the wrong item (these items might have different class names e.g.)

2. Serializing objects is a lot of work for the browser. If we need to compare every object, that would just take too long.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29820</commentid>
            <who name="Benjamin Dreux">dreux.benjamin</who>
            <bug_when>2012-06-15 14:09:28 +0200</bug_when>
            <thetext>Maybe we can compare the keys of the object plus the classname.

We will need to exlude the key specifics to qooxdoo (I think about the instance id, but maybe there is more fields to exclude)

This way it would be faster, because we only access the objects fields.

And by comparing the classename field we will check that compared object as the same class.

Would this be a better solution ??</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29833</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-06-18 08:29:13 +0200</bug_when>
            <thetext>You would need to compare every key, also the protected and privates which might hold the sate of the object. I don&#39;t think that could work in a general way. 
Also, I don&#39;t think the issue can be solved in a general way at all. On the JS side, equality of objects is clear and currently used. If we want to use another equals logic, we need to define whats equal and thats not easy to decide for every use case. Some might have their state in privates, other only in properties and even others just attach it to the object as attributes.
I&#39;m sorry but I still don&#39;t see a solution which is generic enough for the framework.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29840</commentid>
            <who name="Benjamin Dreux">dreux.benjamin</who>
            <bug_when>2012-06-18 14:09:18 +0200</bug_when>
            <thetext>If we need a special equals function.
We could have de delegate with has a equals method or just a equals function passed as a parameter.

This equals method/function would be used in place of the js object equals for all case where it is used in the list.

Would a solution like this possible to implment in a general way??</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29866</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-06-20 08:02:04 +0200</bug_when>
            <thetext>(In reply to comment #8)
&gt; If we need a special equals function.
&gt; We could have de delegate with has a equals method or just a equals function
&gt; passed as a parameter.
&gt; 
&gt; This equals method/function would be used in place of the js object equals for
&gt; all case where it is used in the list.
&gt; 
&gt; Would a solution like this possible to implment in a general way??

In a general away, that would be possible.</thetext>
          </long_desc>
      
      

    </bug>