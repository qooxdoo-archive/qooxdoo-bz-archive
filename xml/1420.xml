<bug>
          <bug_id>1420</bug_id>
          
          <creation_ts>2008-09-23 11:18:00 +0200</creation_ts>
          <short_desc>Skeleton: Remove &#39;with-contrib&#39; skeleton</short_desc>
          <delta_ts>2014-03-03 15:25:03 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.skeleton</component>
          <version>0.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>0.8.1</target_milestone>
          <dependson>1417</dependson>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>5613</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-09-23 11:18:24 +0200</bug_when>
            <thetext>Remove the &#39;with-contrib&#39; skeleton. The features provided there should be easy 
to add to the standard skeleton, given proper documentation.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5614</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-09-23 11:18:32 +0200</bug_when>
            <thetext>The &#39;with-contrib&#39; skeleton supplies various features:
- Its main feature is to add an additional library to the project. (A 
contribution is just a special case of a library).
- Since you can only add libraries in the context of a job (with the &#39;library&#39; 
key), a &quot;jobs&quot; map has to be added to the standard config.
- The new library is added in the context of a job (named &quot;include-contrib&quot; 
here, because it is just an include job like &quot;common&quot;).
- To make the new library take effect in the various standard jobs (&quot;source&quot;, 
&quot;build&quot;, ...), new jobs have to be defined that extend &quot;include-contrib&quot;.
- To that end, each standard job from application.json is duplicated, which 
extends the corresponding standard job (name-spaced) and the &quot;include-contrib&quot; 
job. This way, the standard job names like &quot;source&quot;, &quot;build&quot; etc. are retained 
for the generator invocation, and the new library will be honored when they run.

To make this more implicit, a couple of issues have to be covered. Here are 
some potential scenarios:

- The &quot;library&quot; key could be allowed at top-level (like the global &quot;let&quot;). The 
semantics would be that the libraries listed there will be included in every 
job. (This raises the question which other keys should be available globally in 
the config, with the same semantics. Do we want this?). This would make a 
dedicated job that takes the &quot;library&quot; key superfluous, as well as redefining 
standard jobs to take the additional &quot;extend&quot;.

- (Re-) Implement a &quot;defaults&quot; job that will be automatically extended by every 
other job. This defaults job could take the library key with the additional 
libraries. This has the same effect as a global &quot;library&quot; key, but is more 
generic since arbitrary keys can be added to the &quot;defaults&quot; job and be thus 
transported into other jobs.

Both approaches suffer from the fact that they take global effect (i.e. they 
affect *every* job), and this might not be desirable in every case. There might 
be a need to allow individual jobs to explicitly block automatic inclusion of 
keys/jobs.

Another open issue is that fine-grained tuning of specific actions is not 
supported by either of them. E.g. if you just want to change the &quot;optimize&quot; 
settings of the &quot;compile-dist&quot; trigger this is not easily achieved. You cannot 
add a &quot;compile-dist&quot; key to a &quot;defaults&quot; job since then *all* jobs will inherit 
it and create a build version! A better way would be to override the 
&quot;build-script&quot; standard job, but again you would at least have to duplicate the 
&quot;compile-dist&quot; entry completely. One could think of adding an incomplete 
&quot;compile-dist&quot; key that only provides the &quot;optimize&quot; key, and then make the 
&quot;compile-dist&quot; key merging when extending jobs. Again, the question arises 
which other keys (e.g. other actions) should be merging in this sense, and how 
to allow blocking of this automatic merging.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5615</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2008-09-23 12:54:25 +0200</bug_when>
            <thetext>Please do not remove this template.  It is extremely useful!  It avoids lots of hand editing of config files, and &quot;just works&quot; out of the box.

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>6340</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-11-19 12:09:36 +0100</bug_when>
            <thetext>Done with r16721. The functionality is now contained in the &#39;gui&#39; skeleton as 
comments, through overriding the newly added &quot;libraries&quot; includer job.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38614</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:03 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>