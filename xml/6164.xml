<bug>
          <bug_id>6164</bug_id>
          
          <creation_ts>2012-02-23 14:35:00 +0100</creation_ts>
          <short_desc>Download scripts in parallel to improve load time</short_desc>
          <delta_ts>2013-12-16 12:46:09 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tristan Koch">tristan.koch</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>christian.hagendorn</cc>
    
    <cc>mustafa.sak</cc>
    
    <cc>tinobutz</cc>
    
    <cc>Will_Pritchard</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>28623</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-02-23 14:35:21 +0100</bug_when>
            <thetext>To improve load time of the source version of qooxdoo applications, take advantage of the browser optimization to download scripts in parallel. However, make sure scripts are parsed in order. This can be achieved by setting the async attribute of each script to false.

This requires changing the loader template found in loader.tmpl.js.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28624</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-02-23 14:37:04 +0100</bug_when>
            <thetext>With 4d8fb75 on master.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28897</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2012-03-19 17:28:54 +0100</bug_when>
            <thetext>By default the nocache parameter is not set anymore. This leads to some issues with Safari / Chrome when loading files from the file system. 

Things to do:

* Check if nocache param is needed for loading files from file system (all browsers)
* Check if nocache param is needed for loading files from localhost (all browsers)
* Perhaps we can only add the nocache param for file system only
* No nocache param for build version</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28911</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-03-20 16:05:21 +0100</bug_when>
            <thetext>According to my tests, the no-cache parameter is never required. The browser always ends up with fresh script files.

When using the file:// protocol there is no caching at all. With http:// files may be loaded from cache, but only when the conditional get receives a 304 (not modified) response. Otherwise files are loaded from the server.

Tested Chrome Stable and Safari 5.1.4.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28913</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-03-20 16:22:05 +0100</bug_when>
            <thetext>(In reply to comment #3)
&gt; According to my tests, the no-cache parameter is never required. The browser
&gt; always ends up with fresh script files.
&gt; 
&gt; When using the file:// protocol there is no caching at all. With http:// files
&gt; may be loaded from cache, but only when the conditional get receives a 304 (not
&gt; modified) response. Otherwise files are loaded from the server.
&gt; 
&gt; Tested Chrome Stable and Safari 5.1.4.

I tend to disagree. Maybe this has drastically changed with the browser versions you&#39;ve tested. But I know for sure that the issue was positive in Safari some time ago, and I still have this issue in Chromium 15, so that I have to close and re-open a tab to really get the page refreshed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28921</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-03-21 08:06:32 +0100</bug_when>
            <thetext>(In reply to comment #4)
&gt; (In reply to comment #3)
&gt; &gt; According to my tests, the no-cache parameter is never required. The browser
&gt; &gt; always ends up with fresh script files.
&gt; &gt; 
&gt; &gt; When using the file:// protocol there is no caching at all. With http:// files
&gt; &gt; may be loaded from cache, but only when the conditional get receives a 304 (not
&gt; &gt; modified) response. Otherwise files are loaded from the server.
&gt; &gt; 
&gt; &gt; Tested Chrome Stable and Safari 5.1.4.
&gt; 
&gt; I tend to disagree. Maybe this has drastically changed with the browser
&gt; versions you&#39;ve tested. But I know for sure that the issue was positive in
&gt; Safari some time ago, and I still have this issue in Chromium 15, so that I
&gt; have to close and re-open a tab to really get the page refreshed.

So the question is, if we should consider the &quot;older&quot; browsers as well! We should get a good overview of which browsers are affected and then decide what to do on a solid knowledge base.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28942</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-03-22 17:33:35 +0100</bug_when>
            <thetext>Seems to be related to Last-Modified header. The further back the more likely the associated representation will end up in a special kind of cache that is used without any revalidation (i.e. conditional gets).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28946</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-03-23 16:31:37 +0100</bug_when>
            <thetext>http://code.google.com/p/chromium/issues/detail?id=1906</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28947</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-03-23 16:32:13 +0100</bug_when>
            <thetext>http://code.google.com/p/chromium/issues/detail?id=44122

(Chrome Forced Refresh does not ignore cache)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28949</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-03-26 08:58:11 +0200</bug_when>
            <thetext>(In reply to comment #8)
&gt; http://code.google.com/p/chromium/issues/detail?id=44122
&gt; 
&gt; (Chrome Forced Refresh does not ignore cache)

(May also affect other WebKit based browsers).

Can be worked around by setting the &quot;Cache-Control: no-cache&quot; on the response. This forces Chrome to always revalidate its cache by sending a conditional request. For Apache, this can be achieved by placing a .htaccess in the root of the SDK (and maybe a skeleton&#39;s root).

&lt;ifModule mod_headers.c&gt;
  Header set Expires &quot;-1&quot;
  Header set Pragma &quot;no-cache&quot;
  Header set Cache-Control &quot;no-cache&quot;
&lt;/ifModule&gt;

Note that no caching seems to occur when using the file protocol.

Another approach is to disable the cache in the web developer&#39;s console. In contrast to &quot;no-cache&quot; above, this forces the browser to download the representation from the origin in any case, slightly degrading load performance of the source version.

While setting &quot;no-cache&quot; is the cleaner way and requires no user interaction, the .htaccess might not be read in every case (for instance when not using Apache at all) so its good to have an alternative.

We should add a notice to the manual explaining the bug and available work arounds.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28950</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-03-26 09:23:17 +0200</bug_when>
            <thetext>(In reply to comment #9)
&gt; (In reply to comment #8)
&gt; &gt; http://code.google.com/p/chromium/issues/detail?id=44122
&gt; &gt; 
&gt; &gt; (Chrome Forced Refresh does not ignore cache)
&gt; 
&gt; (May also affect other WebKit based browsers).
&gt; 
&gt; Can be worked around by setting the &quot;Cache-Control: no-cache&quot; on the response.
&gt; This forces Chrome to always revalidate its cache by sending a conditional
&gt; request. For Apache, this can be achieved by placing a .htaccess in the root of
&gt; the SDK (and maybe a skeleton&#39;s root).
&gt; 
&gt; &lt;ifModule mod_headers.c&gt;
&gt;   Header set Expires &quot;-1&quot;
&gt;   Header set Pragma &quot;no-cache&quot;
&gt;   Header set Cache-Control &quot;no-cache&quot;
&gt; &lt;/ifModule&gt;
&gt; 
&gt; Note that no caching seems to occur when using the file protocol.
&gt; 
&gt; Another approach is to disable the cache in the web developer&#39;s console. In
&gt; contrast to &quot;no-cache&quot; above, this forces the browser to download the
&gt; representation from the origin in any case, slightly degrading load performance
&gt; of the source version.
&gt; 
&gt; While setting &quot;no-cache&quot; is the cleaner way and requires no user interaction,
&gt; the .htaccess might not be read in every case (for instance when not using
&gt; Apache at all) so its good to have an alternative.
&gt; 
&gt; We should add a notice to the manual explaining the bug and available work
&gt; arounds.

This all appears rather worrisome and shaky. Why not just re-enable the no-cache query parameter, as we had before. This is a proven solution. I wouldn&#39;t mind making it configurable on a per-library basis, so you could activate it for the application only, and leave it off for the framework.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28951</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-03-26 09:35:06 +0200</bug_when>
            <thetext>(In reply to comment #9)
&gt; Note that no caching seems to occur when using the file protocol.

This is not my observation.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28952</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-03-26 09:58:15 +0200</bug_when>
            <thetext>Of course, thats the easiest way. However, the &quot;nocache&quot; parameter has some drawbacks on its own. 

1) It degrades performance.
2) You cannot set breakpoints because the debugger does not recognize the file
3) Long filenames in the debugger, making it hard to select a file

To me, it does make a difference if you need to wait 3s or 2s for your application to load. (2) and (3) are especially relevant with today&#39;s powerful debuggers.

While certainly not a convincing argument as such, I don&#39;t like the &quot;poor man&#39;s&quot; approach of this work around. Also, consider that according to my tests the stale cache bug only appears in WebKit based browsers.

I suggest to

* Add the &quot;nocache&quot; parameter by default, but for affected browsers only
* Make it easy to disable the &quot;nocache&quot; parameter, targeting users who are aware of the implications (*)
* Add the .htaccess file to SDK and skeleton

To make it easy, we could allow to override the default by providing macro, for instance on the command line.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28953</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-03-26 10:06:17 +0200</bug_when>
            <thetext>(In reply to comment #11)
&gt; (In reply to comment #9)
&gt; &gt; Note that no caching seems to occur when using the file protocol.
&gt; 
&gt; This is not my observation.

Granted. file:// is affected as well when the file has a relatively old last modified date. Thanks for checking. Its really hard to observe, because the chances of the cache becoming stale are very low. Nevertheless, since no response headers can be set, &quot;nocache&quot; is the only fix available (apart from disabling the cache, of course).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29429</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-05-11 18:27:24 +0200</bug_when>
            <thetext>I&#39;m leaving the &#39;add-nocache-param&#39; in the config to false (as Tristan put it 
in February), as I understand the issue with developing code and not being able 
to retain breakpoints across reloads.

I&#39;ve added a config macro ADD-NOCACHE-PARAM so it is easier to turn it on again 
for source jobs. This macro will be honored in the standard *source* jobs (If 
you wanted to turn this on for a build job - which would be rather questionable 
- you needed to directly set it in the compile-options/uris/add-nocache-param 
of the build-script job).

Changed the manual to reflect the changes.

master: 88f3b8f</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30652</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2012-09-11 11:36:10 +0200</bug_when>
            <thetext>There was still a problem with the parallel loading: In IE 10, we have to wait for the script element&#39;s readyState to be &quot;complete&quot;, otherwise the code won&#39;t be evaluated and there will be errors like &quot;theme not ready&quot;. Earlier IEs, however, don&#39;t support the &quot;completed&quot; state so we have to detect them using documentMode (IE7-9) or ActiveXObject (IE6) and wait for &quot;loaded&quot; instead.

Fixed with
03269bd2dcaaeb136cc446cb998ca1e8d6cbc773 (branch_2_0_x)
8ca4a3c57384db6962e6db40beb7a885f87f92fc (master)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31057</commentid>
            <who name="Will Pritchard">Will_Pritchard</who>
            <bug_when>2012-10-25 14:29:27 +0200</bug_when>
            <thetext>(In reply to comment #15)
&gt; There was still a problem with the parallel loading: In IE 10, we have to wait
&gt; for the script element&#39;s readyState to be &quot;complete&quot;, otherwise the code won&#39;t
&gt; be evaluated and there will be errors like &quot;theme not ready&quot;. Earlier IEs,
&gt; however, don&#39;t support the &quot;completed&quot; state so we have to detect them using
&gt; documentMode (IE7-9) or ActiveXObject (IE6) and wait for &quot;loaded&quot; instead.
&gt; 
&gt; Fixed with
&gt; 03269bd2dcaaeb136cc446cb998ca1e8d6cbc773 (branch_2_0_x)
&gt; 8ca4a3c57384db6962e6db40beb7a885f87f92fc (master)

The statement &#39;Earlier IEs, however, don&#39;t support the &quot;completed&quot; state&#39; seems to be somewhat incorrect.

I have observed the following issue with this fix while loading an application source version (via a web server) with IE8 (on Windows 7) and also with IE9.

When script files are loaded from cache their readyState goes straight to &quot;complete&quot; without first going to &quot;loaded&quot; and hence the loading quietly stops and the application does not initialise. It seems that the final readyState is &quot;loaded&quot; only when files are not loaded from cache.

I have not been able to try IE10 to see if there is also differing behaviour on that version depending on whether script files are cached or not.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31060</commentid>
            <who name="Will Pritchard">Will_Pritchard</who>
            <bug_when>2012-10-25 15:06:10 +0200</bug_when>
            <thetext>(In reply to comment #16)
&gt; (In reply to comment #15)
&gt; &gt; There was still a problem with the parallel loading: In IE 10, we have to wait
&gt; &gt; for the script element&#39;s readyState to be &quot;complete&quot;, otherwise the code won&#39;t
&gt; &gt; be evaluated and there will be errors like &quot;theme not ready&quot;. Earlier IEs,
&gt; &gt; however, don&#39;t support the &quot;completed&quot; state so we have to detect them using
&gt; &gt; documentMode (IE7-9) or ActiveXObject (IE6) and wait for &quot;loaded&quot; instead.
&gt; &gt; 
&gt; &gt; Fixed with
&gt; &gt; 03269bd2dcaaeb136cc446cb998ca1e8d6cbc773 (branch_2_0_x)
&gt; &gt; 8ca4a3c57384db6962e6db40beb7a885f87f92fc (master)
&gt; 
&gt; The statement &#39;Earlier IEs, however, don&#39;t support the &quot;completed&quot; state&#39; seems
&gt; to be somewhat incorrect.
&gt; 
&gt; I have observed the following issue with this fix while loading an application
&gt; source version (via a web server) with IE8 (on Windows 7) and also with IE9.
&gt; 
&gt; When script files are loaded from cache their readyState goes straight to
&gt; &quot;complete&quot; without first going to &quot;loaded&quot; and hence the loading quietly stops
&gt; and the application does not initialise. It seems that the final readyState is
&gt; &quot;loaded&quot; only when files are not loaded from cache.
&gt; 
&gt; I have not been able to try IE10 to see if there is also differing behaviour on
&gt; that version depending on whether script files are cached or not.

And here&#39;s a suggestion for a fix to tool/data/generator/loader.tmpl.js:

Index: loader.tmpl.js
===================================================================
--- loader.tmpl.js	(revision 55917)
+++ loader.tmpl.js	(working copy)
@@ -51,10 +51,10 @@
   }
 };
 
-var readyStateValue = &quot;complete&quot;;
+var readyStateValue = {&quot;complete&quot;:true};
 if (document.documentMode &amp;&amp; document.documentMode &lt; 10 ||
     (typeof window.ActiveXObject !== &quot;undefined&quot; &amp;&amp; !document.documentMode)) {
-  readyStateValue = &quot;loaded&quot;;
+  readyStateValue[&quot;loaded&quot;] = true;
 }
 
 function loadScript(uri, callback) {
@@ -62,7 +62,7 @@
   elem.charset = &quot;utf-8&quot;;
   elem.src = uri;
   elem.onreadystatechange = elem.onload = function() {
-    if (!this.readyState || this.readyState == readyStateValue) {
+    if (!this.readyState || readyStateValue[this.readyState]) {
       elem.onreadystatechange = elem.onload = null;
       if (typeof callback === &quot;function&quot;) {
         callback();</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31066</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-10-26 12:13:26 +0200</bug_when>
            <thetext>Thanks, we will check that.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31139</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-10-30 14:20:18 +0100</bug_when>
            <thetext>(In reply to comment #19)
&gt; We have the same problem in our project. ....

Mustafa, could test Will&#39;s patch to loader.tmpl.js in your environment, and 
report back if it improves the situation?! Please test with a variety of 
browsers.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31233</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-11-06 13:45:47 +0100</bug_when>
            <thetext>Thanks for the proposed fix. Managed to reproduce the issue in IE8 with a basic skeleton build with &#39;source-all&#39;. Your fix seems to be exactly the right thing to do. Thank you very much!

master: 243272552c22395cbd4afdd0d6c9ea3ade253235
2.0.x: 34b415d9499f0a2a64d388ad30528bfa36fa9548</thetext>
          </long_desc>
      
      

    </bug>