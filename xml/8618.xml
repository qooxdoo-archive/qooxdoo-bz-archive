<bug>
          <bug_id>8618</bug_id>
          
          <creation_ts>2014-10-07 11:25:00 +0200</creation_ts>
          <short_desc>Migrate the unit tests to mocha</short_desc>
          <delta_ts>2015-01-07 11:19:54 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>next</product>
          <component>core</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          <blocked>8665</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Sabrina Metzger">sabrina.metzger</assigned_to>
          <cc>id</cc>
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>41325</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-10-07 11:25:58 +0200</bug_when>
            <thetext>Within the next branch, we already started some experiments with mocha [1] as testing framework and runner with really good results. Based on that work, we should migrate the unit test we have to mocha.

[1] http://visionmedia.github.io/mocha/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41449</commentid>
            <who name="saaj">id</who>
            <bug_when>2014-10-24 15:26:20 +0200</bug_when>
            <thetext>It&#39;s getting scary when Qooxdoo internally starts to look like a generic JavaScript callback spaghetti with all the state expressed in free closure variables :-|</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41476</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-03 09:40:46 +0100</bug_when>
            <thetext>(In reply to comment #1)
&gt; It&#39;s getting scary when Qooxdoo internally starts to look like a generic
&gt; JavaScript callback spaghetti with all the state expressed in free closure
&gt; variables :-|

Do you reference a specific piece of code or is that a general message concerning the switch to mocha?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41481</commentid>
            <who name="saaj">id</who>
            <bug_when>2014-11-03 16:01:20 +0100</bug_when>
            <thetext>Yes, I&#39;m talking about it in general. Do you really thing, Martin, that this is a good example of a test code (from https://github.com/qooxdoo/qooxdoo/commit/b5c12814287b44174c7c0d5793d7ea1277e24758):

  it(&quot;Back&quot;, function() {
    var aHandler = sinon.spy();
    var bHandler = sinon.spy();
    __r.onGet(&quot;/a&quot;, aHandler);
    __r.onGet(&quot;/b&quot;, bHandler);
    __r.executeGet(&quot;/a&quot;);
    __r.executeGet(&quot;/b&quot;);
    __r.back();
    sinon.assert.calledTwice(aHandler);
    sinon.assert.calledOnce(bHandler);
  });

Or this:

  it(&quot;CSSColor&quot;, function() {
    // working
    qx.core.Assert.assertCssColor(&quot;red&quot;, &quot;red&quot;);
    qx.core.Assert.assertCssColor(&quot;black&quot;, &quot;black&quot;);
    qx.core.Assert.assertCssColor(&quot;aqua&quot;, &quot;rgb(0,255,255)&quot;);
    qx.core.Assert.assertCssColor(&quot;rgb(159,123,147)&quot;, &quot;rgb(159,123,147)&quot;);

    // not working
    assert.throw(function() {
      qx.core.Assert.assertCssColor(&quot;red&quot;, true);
    }, qx.core.AssertionError, null, &quot;1&quot;);
 
    assert.throw(function() {
      qx.core.Assert.assertCssColor(&quot;red&quot;, &quot;reed&quot;);
    }, qx.core.AssertionError, null, &quot;2&quot;);

    assert.throw(function() {
      qx.core.Assert.assertCssColor(&quot;red&quot;, &quot;rgb(15,45,56)&quot;);
    }, qx.core.AssertionError, null, &quot;3&quot;);

    // non existing color
    assert.throw(function() {
      qx.core.Assert.assertCssColor(&quot;grey&quot;, &quot;grey&quot;);
    }, Error, null, &quot;4&quot;);
  });

Is it consistent? Does it promote best object-oriented design practices? Is in intuitive, &quot;it back&quot; and &quot;it css color&quot; (and other pearls from there), not really &quot;test back&quot; and &quot;test css color&quot;? After all, the question is, is it Qooxdoo?

You were doing excellent job in making fundamental things! Things unparalleled in JavaScript. And if there was a useful functionality out there in was integrated seamlessly. And every higher level of the framework benefited from the lower one. This was making consistent experience with the framework, as it was self-contained and self-explanatory.

And what has happened, that in your own codebase you want to abandon your own object-system and your own test infrastructure (which is good by the way)? Not only new code looks like alien JavaScript Spaghetti(tm), but with such decisions it draws quite uncertain perspective. What will it all look like in two major releases? Maybe poor AMD modules will replace Qooxdoo namespace tree altogether? Or maybe there&#39;s no longer a point in Qoxdooo objects, people use bare prototypes just fine? Or... This introduces a risk, and overall it is an alarming decision.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41482</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-04 08:06:20 +0100</bug_when>
            <thetext>(In reply to comment #3)
&gt; Yes, I&#39;m talking about it in general. Do you really thing, Martin, that this is
&gt; a good example of a test code (from
&gt; https://github.com/qooxdoo/qooxdoo/commit/b5c12814287b44174c7c0d5793d7ea1277e24758):
&gt; 
&gt;   it(&quot;Back&quot;, function() {
&gt;     var aHandler = sinon.spy();
&gt;     var bHandler = sinon.spy();
&gt;     __r.onGet(&quot;/a&quot;, aHandler);
&gt;     __r.onGet(&quot;/b&quot;, bHandler);
&gt;     __r.executeGet(&quot;/a&quot;);
&gt;     __r.executeGet(&quot;/b&quot;);
&gt;     __r.back();
&gt;     sinon.assert.calledTwice(aHandler);
&gt;     sinon.assert.calledOnce(bHandler);
&gt;   });
&gt; 
&gt; Or this:
&gt; 
&gt;   it(&quot;CSSColor&quot;, function() {
&gt;     // working
&gt;     qx.core.Assert.assertCssColor(&quot;red&quot;, &quot;red&quot;);
&gt;     qx.core.Assert.assertCssColor(&quot;black&quot;, &quot;black&quot;);
&gt;     qx.core.Assert.assertCssColor(&quot;aqua&quot;, &quot;rgb(0,255,255)&quot;);
&gt;     qx.core.Assert.assertCssColor(&quot;rgb(159,123,147)&quot;, &quot;rgb(159,123,147)&quot;);
&gt; 
&gt;     // not working
&gt;     assert.throw(function() {
&gt;       qx.core.Assert.assertCssColor(&quot;red&quot;, true);
&gt;     }, qx.core.AssertionError, null, &quot;1&quot;);
&gt; 
&gt;     assert.throw(function() {
&gt;       qx.core.Assert.assertCssColor(&quot;red&quot;, &quot;reed&quot;);
&gt;     }, qx.core.AssertionError, null, &quot;2&quot;);
&gt; 
&gt;     assert.throw(function() {
&gt;       qx.core.Assert.assertCssColor(&quot;red&quot;, &quot;rgb(15,45,56)&quot;);
&gt;     }, qx.core.AssertionError, null, &quot;3&quot;);
&gt; 
&gt;     // non existing color
&gt;     assert.throw(function() {
&gt;       qx.core.Assert.assertCssColor(&quot;grey&quot;, &quot;grey&quot;);
&gt;     }, Error, null, &quot;4&quot;);
&gt;   });
&gt; 
&gt; Is it consistent? Does it promote best object-oriented design practices? Is in
&gt; intuitive, &quot;it back&quot; and &quot;it css color&quot; (and other pearls from there), not
&gt; really &quot;test back&quot; and &quot;test css color&quot;? After all, the question is, is it
&gt; Qooxdoo?

No, ofc thats not the way it should look in the end and you are totally right that this could be done better. But this whole branch its developed in is far away from anything ready for release.

&gt; You were doing excellent job in making fundamental things! Things unparalleled
&gt; in JavaScript. And if there was a useful functionality out there in was
&gt; integrated seamlessly. And every higher level of the framework benefited from
&gt; the lower one. This was making consistent experience with the framework, as it
&gt; was self-contained and self-explanatory.
&gt; 
&gt; And what has happened, that in your own codebase you want to abandon your own
&gt; object-system and your own test infrastructure (which is good by the way)? Not
&gt; only new code looks like alien JavaScript Spaghetti(tm), but with such
&gt; decisions it draws quite uncertain perspective. What will it all look like in
&gt; two major releases? Maybe poor AMD modules will replace Qooxdoo namespace tree
&gt; altogether? Or maybe there&#39;s no longer a point in Qoxdooo objects, people use
&gt; bare prototypes just fine? Or... This introduces a risk, and overall it is an
&gt; alarming decision.

There has been some hard decisions for me to take lately but I&#39;m still convinced that not trying to be the expert for everything gives us the opportunity to focus on our strengths. Just think about what features are included in the framework beginning for tooling including pretty printing, scaffolding over to XML handling, Levenshtein distance calculation and GUI toolkits. This huge amount of features can not be maintained by the core team nor the community. So in the end, we either maintain all that stuff and don&#39;t add new features or we let some of them go (like we did before with the HTML area e.g.) and focus on adding new, most likely more useful stuff instead.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41483</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-04 08:07:37 +0100</bug_when>
            <thetext>But we don&#39;t should get too off topic in that thread. If you have any further questions or concerns about the future, just get in touch with me.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41739</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-27 17:24:43 +0100</bug_when>
            <thetext>Updated the infrastructure files we had in the test setup so every test does have the same sandbox to add / remove dom nodes. Additionally, the setup / cleanup of this sandbox is automatically done for each test.

next: 56a1755b96fba0a69e15c6cb0dc60b3d79f39a98</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41744</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-28 12:36:35 +0100</bug_when>
            <thetext>Added the sinon sandbox to the infrastructure with 794f411c37b5c304b4931c036e096ac7f95eaf03</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42082</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2015-01-07 11:19:54 +0100</bug_when>
            <thetext>All necessary tests are migrated.</thetext>
          </long_desc>
      
      

    </bug>