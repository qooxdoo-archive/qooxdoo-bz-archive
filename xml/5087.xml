<bug>
          <bug_id>5087</bug_id>
          
          <creation_ts>2011-05-06 09:55:00 +0200</creation_ts>
          <short_desc>Warnings about Unknown Global Symbols despite #ignore</short_desc>
          <delta_ts>2014-03-03 15:27:50 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>1.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>1.4.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>24342</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-06 09:55:11 +0200</bug_when>
            <thetext>Using #ignore does not suppress &#39;Unknown global symbol&#39; warnings when the class 
feature containing the global is referenced as a recursive load dependency  in 
another class (e.g. as a static initializer, s .bug#1455).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24343</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-06 10:07:16 +0200</bug_when>
            <thetext>Fixed in trunk. But it&#39;s kind of a hack. I&#39;ve used a global ignored_names list, 
to check against when putting out warnings. The issue here is that now a 
#ignore in one class will cover up for this unknown global in all other classes 
that use it! (You might argue that this is not so bad, as the global is 
#ignored in one class, why would that be different in others? Why adding 
#ignores for the same global in all the others? - But YMMV).

The true issue is the underlying calculation of recursive call dependencies. 
When they are followed across various classes, only the feature dependencies 
are analysed, but no compiler hints are evaluated - #ignore being one of them.  
(I&#39;d love to re-write the whole recursive dep analysis, but that&#39;s a major 
undertaking).

With r27067.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24347</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-06 13:19:53 +0200</bug_when>
            <thetext>Re-worked fix, to use the per-class #ignore hints. (A good question in this 
context is, need we to use the per-class #require, #use, #optional too, when 
following recursive call deps?!).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24349</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-06 14:46:38 +0200</bug_when>
            <thetext>Applied fix also to 1.4.x.

With r27070.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39601</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:27:50 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>