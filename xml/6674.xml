<bug>
          <bug_id>6674</bug_id>
          
          <creation_ts>2012-07-25 20:20:00 +0200</creation_ts>
          <short_desc>&quot;Contrib2.0&quot;: Create the Next-Generation qooxdoo-contrib</short_desc>
          <delta_ts>2014-03-03 15:27:44 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.0</target_milestone>
          
          <blocked>3855</blocked>
    
    <blocked>4740</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Boulanger">info</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>mevers47</cc>
    
    <cc>qooxdoo</cc>
    
    <cc>richard.sternagel</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>30258</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2012-07-25 20:20:25 +0200</bug_when>
            <thetext>As detailed in http://qooxdoo.org/contrib/qooxdoo-contrib2.0, qooxdoo should move from it&#39;s current system of hosting the contribs at sourceforge to a system where the code of a contribution can be downloaded from any location. There should be a central registry which maps contrib name and version to a specific URL. The generator downloads the contrib code by name and version. Authors of contribs can register new versions of the contributions using the generator.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30263</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2012-07-26 10:14:51 +0200</bug_when>
            <thetext>I see (among other things) two problems that need to be solved: 1) how to make sure that only the author of the contrib can register new versions; 2) how does the generator know where the current code is actually stored when registering a new version.

1) could be solved the following way: The first to register a new contrib name wins, and receives a token (such as a MD5 string) which he or she uses when updating the contrib.  This would make it unnecessary to maintain a user database, passwords etc. etc. 

2) could be solved by placing a canonical URL  in the Manifest.json file. The version is already there. The nice thing about using the Manifest file more actively is that it could be used to prevent the use of contribs that are not compatible with the qooxdoo version used etc. So once you think the code can be updated, one would do ./generate.py update -t 7f694cfa77f3d68823066082dfe7f3a0 and the generator then picks up the rest from Manifest.json.

But I am sure you already have some ideas about that.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30264</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-07-26 11:00:35 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; I see (among other things) two problems that need to be solved: 1) how to make
&gt; sure that only the author of the contrib can register new versions; 2) how does
&gt; the generator know where the current code is actually stored when registering a
&gt; new version.
&gt; 
&gt; 1) could be solved the following way: The first to register a new contrib name
&gt; wins, and receives a token (such as a MD5 string) which he or she uses when
&gt; updating the contrib.  This would make it unnecessary to maintain a user
&gt; database, passwords etc. etc. 

I don&#39;t think we can get around a more personalized approach, lest we want to risk to run into the same problems as plugins.jquery.com. I like the idea of a token, but wouldn&#39;t want to give out tokens to anybody who happens to upload something.

Rather, a two-step approach might work: A user registered on our wiki registers a new contribution through an online form, and receives the token. This way only registered users can create contributions.

Then with that token he can upload concrete version infos using the generator. He can always fall back to using an online &quot;editor&quot;, to manage his contribution&#39;s catalog entry. He can also create a new token this way, and pass the current token to fellow developers in case he wants them to upload new versions too.

&gt; 2) could be solved by placing a canonical URL  in the Manifest.json file. The
&gt; version is already there. The nice thing about using the Manifest file more
&gt; actively is that it could be used to prevent the use of contribs that are not
&gt; compatible with the qooxdoo version used etc. So once you think the code can be
&gt; updated, one would do ./generate.py update -t 7f694cfa77f3d68823066082dfe7f3a0
&gt; and the generator then picks up the rest from Manifest.json.

This might be an option, although currently I&#39;d rather keep Manifest information and storage information apart. The storage location *needs* to be in the catalog (otherwise nobody would be able to find the contrib), and following the DRY principle I wouldn&#39;t want to repeat it somewhere, including the Manifest. The other concern is when somebody decides to move his source code to another hosting site (e.g. from github to launchpad or similar). He should be able to do that without changing his source code. He just needs to update the catalog entry.

Please add your thoughts to the wiki page. I think we should keep our considerations in one place, and the wiki is easier to edit. Put your initials behind your entries.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30265</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2012-07-26 11:32:59 +0200</bug_when>
            <thetext>That makes sense, although I wonder if spammers would really trouble themselves with creating fake contributions with valid Manifest files just to upload urls to online gambling sites or viagra shops that wouldn&#39;t contain any usable code (and the registry could check that). But of course, an online version of the registry connected to the wiki would also make sense, just mean some additional work. 

Hm, using the wiki is good for collecting thoughts, but you cannot really have a discussion (such as the one we&#39;re having right now) there. Why not use bugzilla? Or would that mean we&#39;d have to open a bug for each issue? that also doesn&#39;t make sense unless there are specific issues that can be worked on and implemented. A bit confusing where the appropriate place for this is - ML? BZ? Wiki?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30266</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-07-26 12:11:14 +0200</bug_when>
            <thetext>(In reply to comment #3)
&gt; Hm, using the wiki is good for collecting thoughts, but you cannot really have
&gt; a discussion (such as the one we&#39;re having right now) there. Why not use
&gt; bugzilla? Or would that mean we&#39;d have to open a bug for each issue? that also
&gt; doesn&#39;t make sense unless there are specific issues that can be worked on and
&gt; implemented. A bit confusing where the appropriate place for this is - ML? BZ?
&gt; Wiki?

I personally prefer the Wiki, as it allows you to really organize ideas. In BZ every comment is cut into stone, e.g. you cannot go back and say, ah, this comment really touches on two concerns, let&#39;s make two threads out of it. Makes it harder to organize the material, but I can live with it. ML is just volatile, ad-hoc, and not good for anything with some persistence - Nabble or not.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30268</commentid>
            <who name="Martijn">mevers47</who>
            <bug_when>2012-07-26 15:35:43 +0200</bug_when>
            <thetext>What about building composer[1] like behavior into the generator. Composer works very well for PHP and can handle dependencies between projects/contributions. What can we learn from them?

[1] http://getcomposer.org/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31959</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-01-22 09:27:43 +0100</bug_when>
            <thetext>(In reply to comment #5)
&gt; What about building composer[1] like behavior into the generator. Composer 
works very well for PHP and can handle dependencies between 
projects/contributions. What can we learn from them?
&gt; 
&gt; [1] http://getcomposer.org/

Thanks for the hint, but I don&#39;t quite get what you are hinting at, and it 
would be helpful if you would suggest concrete features, rather than just 
throwing an entire project (Composer) into the discussion. Which specific 
aspect of Composer are you thinking of? Recursive dependency resolution? 
Installing dependencies locally with the project? - It seems to me that some 
would make for an own enhancement bug, rather than being submerged into this 
one, which is about a new contrib infrastructure. (E.g. recursive dependency 
resolution is a general Generator topic, which is independent from 
contributions).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32065</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-01-31 17:25:25 +0100</bug_when>
            <thetext>Alternative approach: Catalog as Repo

- Make the catalog a Github repository. Authors fork this repo and send pull
  requests to maintain the catalog information of their contribs.

- The catalog repo mirrors the current qooxdoo-contrib SVN structure: contrib 
names
  top-level, then contrib branch versions on the next.

- In each version there is a Manifest.json which is a straight copy from the
  contribution&#39;s library Manifest.json. To support the additional functionality
  new keys are added to the &quot;information&quot; section.

- New key &quot;download&quot;: This key holds a URL from which the contribution
  is downloadable as an archive (.zip or tar.gz).  The archive contains a
  top-level folder beneath which the library content (like Manifest.json) is
  stored.

- New key &quot;checksum&quot;: Holds a (sha1) checksum over the archive. This
  can be used on the user side by the Generator to both (a) validate fresh
  downloads, (b) check freshness of an existing contrib download.

- New key &quot;category&quot;: Specifies one of the existing qooxdoo-contrib categories
  for contribs (while &quot;keywords&quot; is free). (Could allow multiple entries).

- Existing contributions in the SVN repo could be easily added to the catalog
  (almost mechanically), using the SF zip feature for download URLs.

- On using &quot;contrib://&quot; in a custom application the Generator queries the 
catalog,
  retrieves the corresponding Manifest.json, extracts the download URL and
  fetches the contrib archive. The Generator configuration provides a list of
  catalog URLs to query, so more than one catalog can be considered. (How the
  querying is done is open, but web spidering a base URL like with the
  qooxdoo-contrib SVN repo would be the easiest).

- Alternatively &quot;http://&quot; library URLs are possible that point to an archive 
directly
  and don&#39;t require a catalog to be queried (s. bug#6044).

- For authors the Generator should provide a job to validate the Manifest file
  for fitness for the catalog (&quot;manifest-validation&quot;).

- A user-friendly web interface to the catalog could be devised (e.g. like 
gruntjs.com) with
  categories, searchable and sortable entries, but would basically rely on the
  Manifest information from the catalog. Advanced features of a contribution 
  like source code repository, issue tracker, demo URLs, etc. would be deferred
  to the contrib&#39;s homepage.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32118</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2013-02-05 14:24:33 +0100</bug_when>
            <thetext>Regarding comment #7:

&gt; - For authors the Generator should provide a job to validate the Manifest file
&gt; for fitness for the catalog (&quot;manifest-validation&quot;).

Merged current implementation of &#39;manifest-validation&#39; job into master.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32607</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-04-23 12:54:34 +0200</bug_when>
            <thetext>To follow up on the catalog-as-repo approach:

- Catalog lookup: The lookup of the generator in a Github-based catalog repo 
needs to be implemented, to extract the download URL of a contrib version and 
then download and unpack the archive. (Catalog lookup should be fast. The 
catalog could pot. be cached locally).

- Download freshness check: The freshness check of an previously downloaded 
contrib version will be done on the catalog entry only(! - Providing a separate 
checksum URL that is maintained alongside the archive itself seems too 
cumbersome. E.g. Github provides for automatic archive downloads for branches 
and tags, but no checksum URLs). The Generator needs to remember the checksum 
the archive was previously downloaded. If the maintainer issues a new revision, 
he/she has to update the checksum entry in the catalog Manifest.json for the 
version. This change can be detected by the Generator.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33102</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-06-25 16:15:06 +0200</bug_when>
            <thetext>The new catalog has been rolled out, and the Generator is using it. Seems to be 
working.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33215</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-07-04 11:08:41 +0200</bug_when>
            <thetext>Why is this bug reopened?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33322</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-07-11 10:37:17 +0200</bug_when>
            <thetext>All changes/enhancements to this solution should be addressed in dedicated 
follow-up bugs.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39573</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:27:44 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>