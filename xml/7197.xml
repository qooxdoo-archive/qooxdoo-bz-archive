<bug>
          <bug_id>7197</bug_id>
          
          <creation_ts>2013-02-04 17:30:00 +0100</creation_ts>
          <short_desc>Add a Composable LocalizedString</short_desc>
          <delta_ts>2014-03-03 08:48:08 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.locale</component>
          <version>2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>32100</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-02-04 17:30:32 +0100</bug_when>
            <thetext>Currently, instances of qx.locale.LocalizedString, e.g as returned by the 
this.tr()-type of methods, are not composable. That is, you cannot compose a 
LocalizedString with another LocalizedString, or native string, and obtain a 
new LocalizedString.

This makes expressions like &#39;&quot;&lt;b&gt;&quot; + this.tr(&quot;foo&quot;) + &quot;&lt;/b&gt;&quot;&#39; into ordinary 
strings which cannot be re-translated. The only solution currently is to make 
the &quot;decoration (&lt;b&gt; and &lt;/b&gt;) part of the internationalization, either as part 
of the message id or part of its translations. This is cumbersome if the same 
translateable string (&quot;foo&quot;) is needed in various places (labels, menus, ...), 
but with differing decoration.

It would be nice to have composable localized strings that don&#39;t lose the 
ability to be re-translated. They should be composable among each other and 
with native strings.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32103</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-02-04 17:53:59 +0100</bug_when>
            <thetext>Another issue is with LocalizedString.toString().

The constructor of LocalizedString takes a translation as the first argument. 
This string is kept in memory (via BaseString) and is used for all further 
.toString() operations. This means that the initial translation is &quot;burned in&quot;, 
and does not change with locale changes.

See this Playground example:
   http://tinyurl.com/atmnxxn

I think a localized string should not take some initial translation, but only 
take a message id and some .tr arguments in its constructor. The translation 
should always be according the current locale. .toString() could be written to 
honor this.

This will probably affect all native string methods (like indexOf, charAt, ...) 
which are available through BaseString.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36147</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:48:08 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>