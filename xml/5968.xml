<bug>
          <bug_id>5968</bug_id>
          
          <creation_ts>2011-12-20 13:52:00 +0100</creation_ts>
          <short_desc>Evaluate JSBeautifier</short_desc>
          <delta_ts>2014-03-03 15:22:04 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool</component>
          <version>1.6</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc>http://jsbeautifier.org/</bug_file_loc>
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.1</target_milestone>
          
          <blocked>5962</blocked>
    
    <blocked>5963</blocked>
    
    <blocked>5964</blocked>
    
    <blocked>5965</blocked>
    
    <blocked>5966</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Hagendorn">christian.hagendorn</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>28064</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2011-12-20 13:52:49 +0100</bug_when>
            <thetext>JSBeautifier is a open source project for pretty printing with MIT licence. It you also python, maybe we can use it for you pretty print.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28193</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-01-09 12:29:46 +0100</bug_when>
            <thetext>Looks like a decent project. It features fewer formatting options than our 
pretty printer, and handles white space less optimally in some cases (e.g. 
indenting some comments, or inserting empty lines after methods, properties, 
etc.).  The pretty-print code is about as much as our own code base, so I don&#39;t 
see an advantage switching to it.  It would also introduce another parsing 
algorithm for JS in our tool chain, something I&#39;d rather avoid. On the other 
hand, maintaining our own code base allows us more control over it, adding and 
tweaking features is easier.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28204</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-01-09 14:41:36 +0100</bug_when>
            <thetext>JSBeautifier also has no support for max. text width of code lines (e.g. 80 chars, see bug#5964)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31042</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-10-24 12:29:02 +0200</bug_when>
            <thetext>I&#39;ve did an integration test with the Python modules of jsbeautifier in a 
dedicated branch. Integration is straight forward:

o add the Python modules to pylib/jsbeautifier (__init__.py and unpackers/* 
from https://github.com/einars/js-beautify/tree/master/python/jsbeautifier)
o (opt.) add a frontend for jsbeautifier to tool/bin (e.g.
   import qxenviron
   import jsbeautifier
   jsbeautifier.main()
o apply the patch of jsbeautifier issue#84  (remove &#39;self.trim_output()&#39;  from 
__init__.py#1031)
o integrate it with tool chain (in CodeGenerator#runPretty:
       import jsbeautifier
       jsopts = jsbeautifier.default_options()
       jsopts.indent_size = 2
       jsopts.brace_style = &#39;expand&#39;
       for pos, classId in enumerate(classesObj):
           self._console.progress(pos+1, numClasses)
           compiled = jsbeautifier.beautify_file(self._classes[classId].path, 
jsopts)
           filetool.save(self._classes[classId].path, compiled)

As mentioned before, the results are good, but it lacks some of our desired 
config options (some of which could be overcome by patching the jsbeautifier 
module). But my tests with various pretty-printing approaches showed that we 
can achieve similar results with little effort, so I don&#39;t think which should 
switch to jsbeautifier at the moment. I&#39;ve merged a new pretty-printing 
solution into master recently, let&#39;s see how far we can take this. Jsbeautifier 
is still a good module to take inspiration from (e.g. see how they handle 
certain things).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37536</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:22:04 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>