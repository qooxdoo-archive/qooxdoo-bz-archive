<bug>
          <bug_id>2531</bug_id>
          
          <creation_ts>2009-06-30 10:30:00 +0200</creation_ts>
          <short_desc>Provide Optimization Settings to PartBuilder</short_desc>
          <delta_ts>2014-03-03 15:23:21 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10678</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-30 10:30:54 +0200</bug_when>
            <thetext>In order to optimize package sizes, the PartBuilder has to compile classes. 
Currently, it does so without knowledge about optimization settings, so it 
leaves them empty in the relevant call. If the classes are later compiled with 
optimization settings, this impedes usage of the cached compilation results, 
since they depend on the optimize settings. The result for an initially empty 
cache is that each class is compiled twice. The results for the size 
calculation of the PartBuild is misleading. And, the cache is populated with 
unnecessary compile objects.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10683</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-30 11:21:48 +0200</bug_when>
            <thetext>Packages like the PartBuilder that call TreeCompiler.getCompiledSizes() can 
leave the &#39;optimize&#39; parameter empty. In that case the TreeCompiler module 
falls back to an internal member, TreeCompiler._optimize. This member can be 
set with TreeCompiler.setOptimize(), and this is done early enough in 
Generator.py so the PartBuilder benefits from this fall-back value, without 
having to specify it explicitly.

I think this is natural to think that the TreeCompiler instance - which is 
created in Generator.py and  is passed around anyway - &quot;knows&quot; the optimization 
settings, so other modules can take advantage of that. This can be used by 
other modules as well, and also in other methods of the TreeCompiler; 
getCompiledSize is just the first method to do so.

With r19493.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37984</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:23:21 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>