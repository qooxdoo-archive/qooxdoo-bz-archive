<bug>
          <bug_id>815</bug_id>
          
          <creation_ts>2008-04-03 17:36:00 +0200</creation_ts>
          <short_desc>Selenium user extension should use findElement</short_desc>
          <delta_ts>2008-04-11 13:50:26 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>contrib</product>
          <component>Simulator</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc>http://qooxdoo-contrib.svn.sourceforge.net/viewvc/qooxdoo-contrib/trunk/qooxdoo-contrib/Simulator/trunk/tool/selenium/user_extension/user-extensions-qooxdoo.js?view=markup</bug_file_loc>
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Hugh Gibson">hgibson</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>Matthias.Hellriegel</cc>
          
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>2925</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-04-03 17:36:47 +0200</bug_when>
            <thetext>The user extension for Selenium is at the URL

It uses findElementOrNull to locate elements. This returns null if the record isn&#39;t found. In some cases the return value is passed directly to selenium functions that expect a valid element, and if it isn&#39;t found there is a crash dump in Selenium IDE. If findElement is used an exception is thrown which is caught and handled neatly.

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>2926</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-04-03 18:09:28 +0200</bug_when>
            <thetext>&lt;assigned to me&gt;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>2936</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-04-10 15:17:22 +0200</bug_when>
            <thetext>I&#39;ve replaced the occurences of &#39;findElementOrNull&#39; with &#39;findElement&#39;, as suggested. Since I have no time for testing, if you guys who are working with the extension currently get back to me with any issues, that would be great.

Hugh, can you give me an update on the other Phaneesh additions?!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>2940</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-04-11 13:50:26 +0200</bug_when>
            <thetext>Chi confirmed that the error message he gets when an element is not found has improved :-)

You have a reply to your email - sorry for the delay. The content, if anyone else is interested:

&gt; &gt; We&#39;re only using qxClickAt at the moment so it won&#39;t be relevant, 
&gt; &gt; apart from the function call which is causing the problem.
&gt; 
&gt; Does that mean I can leave most of Phaneesh&#39;s additions out?! I&#39;ve 
&gt; looked at the file he posted to openqa, and I&#39;m not sure what to do 
&gt; with it. How would you assess its status (his posting being three 
&gt; months ago now)? It adds some 30+ methods to the 
&gt; Selenium.prototype, on a first glance mostly boilerplate code with 
&gt; a profuse amount of calls to LOG.info(), geared towards specific 
&gt; qooxdoo widgets which in most cases would work with qxClick and 
&gt; standard Selenium &#39;type&#39; command, assertions which might be better 
&gt; handled in the testing code rather than the user extension, a 
&gt; DragAndDrop implementation without &#39;Qx&#39; prefix and no idea how it 
&gt; relates to the Selenium built-in ... I don&#39;t know, I&#39;m not sure, 
&gt; but I would love to keep the user extension fairly essential and 
&gt; generic (Not to mention that I would want to support all the doQx* 
&gt; commands in the Selenium RC client language bindings, which of 
&gt; course isn&#39;t relevant to you since you are only using the IDE...).

We will be using Selenium RC with Python. However, you&#39;re right in that we have to support all the language bindings.

We&#39;re at an early stage in our testing. If any of those functions can help us then we&#39;ll let you know. I&#39;ve CCed Chi on this email (he&#39;s writing the tests).

&gt; I haven&#39;t got the time to do proper refactoring at the moment, so I 
&gt; either leave them out or dump them in all together. And if you say 
&gt; all you&#39;re using is qxClickAt, I would rather leave them out for 
&gt; the moment.

Phaneesh, are you interested in doing the work? You must be using them at the moment so it&#39;s in your interest to update language bindings and fix the issues mentioned by Thomas.

Hugh</thetext>
          </long_desc>
      
      

    </bug>