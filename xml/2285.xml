<bug>
          <bug_id>2285</bug_id>
          
          <creation_ts>2009-04-22 18:58:00 +0200</creation_ts>
          <short_desc>Add generator files to the automatic migration</short_desc>
          <delta_ts>2014-03-03 08:46:22 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.migration</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>9500</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-04-22 18:58:37 +0200</bug_when>
            <thetext>It seems sensible to be able to extend the automatic migration to also cover 
generator-specific files of a library, particularly

- generate.py
- config.json
- Manifest.json

Especially changes to config.json keys and structure would be good candidates 
for automatic migration.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11590</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-08-26 19:09:38 +0200</bug_when>
            <thetext>down prio for now</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11967</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-08 09:41:32 +0200</bug_when>
            <thetext>moved from 0.8.3 to 0.9</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13095</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-10-12 13:02:19 +0200</bug_when>
            <thetext>Migrating config files adds a whole new approach to migration.

- basically tree transformations
- maybe in the form key -&gt; result tree, as in 
  &quot;compile-dist/code/format&quot; -&gt; &quot;compile-dist/code/formats&quot; : { &quot;line-breaks&quot; : 
true, &quot;indent&quot; : false }</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14412</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-24 15:14:46 +0100</bug_when>
            <thetext>An issue with tree transformation of Json files is that when writing back to 
the file, original formatting and comments (!) are lost. But regexp based 
transformation are tough when structure changes are involved. It seems the only 
solution is to retain the old file as a backup and leave it to the user to 
re-apply comments (and formatting) to the new file.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14768</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:26:19 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15704</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-12-11 11:31:22 +0100</bug_when>
            <thetext>mass move to 1.0.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16535</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 16:31:14 +0100</bug_when>
            <thetext>moved to target 1.0.2</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26371</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-08-02 20:12:04 +0200</bug_when>
            <thetext>First whack at migrating generator configs; the implementation is still 
incomplete. Adding 1.6 migration data and a test config.py data file for config 
migration. &quot;config.py&quot; is a naming convention, and the file has to have a 
certain format (see the example). Will allow to rename, delete and recalculate 
the value of uniquely addressable config keys (unique either on the top- or 
job-level).

With r28386.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26372</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-08-02 20:16:34 +0200</bug_when>
            <thetext>I forgot: If the existing config.json in the project will be changed, it will 
be backup&#39;ed and be overwritten by the new version. Comments, formatting and 
sorting of the keys in the config cannot be retained, sorry, due to limitations 
in the Json processing. But you should get a working config.json with all the 
new settings that can lateron be edited by hand, e.g. to re-insert the old 
comments.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26578</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-08-23 17:38:42 +0200</bug_when>
            <thetext>(In reply to comment #8)
&gt; First whack at migrating generator configs; the implementation is still  
incomplete.

&quot;=&quot; prefixes

One thing missing before this can be called complete is the support for &quot;=&quot; 
prefixes of config keys:
- Prefixed keys must still be found by the tree path matching algorithm.
- They must be transformed if they match.
- The &quot;=&quot; prefix must be re-applied in the resulting tree, to retain the 
non-mergable semantics.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26579</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-08-23 18:38:34 +0200</bug_when>
            <thetext>(In reply to comment #10)
&gt; &quot;=&quot; prefixes

Some more thoughts about this issue:

- Prefixed entries of the source config must be retained in the target config, 
if they themselves are retained.
  E.g. in &quot;a/=b/c&quot; chaging the value of c, the path should remain &quot;a/=b/c&quot;.
- Renamings on the leaf level (of the renaming, not the config) should retain 
their block prefix.
   E.g. renaming of &quot;a/b/=c&quot; to &quot;a/b/d&quot; should result in &quot;a/b/=d&quot;.
- If nodes are renamed to whole new paths, there isn&#39;t much use of trying to 
retain intervening prefixes.
  E.g. renaming &quot;a/=b/c&quot; to &quot;a/d/e/f&quot; results in &quot;a/d/e/f&quot;.
  Of course a previous renaming of &quot;a/b&quot; to &quot;a/d&quot; would result in &quot;a/=d&quot; (but 
then renaming of c has to take the new path into account and work on &quot;a/d/c&quot;).
- Delete: Subtrees can be deleted by deleting a node.
  E.g. in &quot;a/b/c/d&quot;, setting &quot;a/b/c&quot; to &quot;&quot; results in &quot;a/b&quot;.
- Renamings are necessarily sensitive to order, and a subsequent rename must 
match the paths that result from antecedent renamings.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35509</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:46:22 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>