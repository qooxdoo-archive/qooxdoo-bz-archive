<bug>
          <bug_id>4939</bug_id>
          
          <creation_ts>2011-04-04 21:22:00 +0200</creation_ts>
          <short_desc>Guard source code changing config keys (like &quot;pretty-print&quot;, &quot;fix-files&quot;) with interactive confirmation</short_desc>
          <delta_ts>2014-03-03 08:47:13 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.system</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Derrell Lipman">derrell.lipman</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>23825</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-04-04 21:22:42 +0200</bug_when>
            <thetext>The pretty-print job should never touch source code if it is placed in a job that has nothing to do with source code. In fact, the pretty-print job is sufficiently dangerous that it should, at a minimum, generate a warning requiring human confirmation, that it is about to scribble over all source code in the project. 

It&#39;s likely that the only legitimate and safe way to run a pretty-printer is via a command line switch or separate executable, and the configuration key to do it should be removed entirely. It&#39;s simply too dangerous.

There also appears to be no warning in the documentation of just how dangerous this job is.

Very frustrating.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23826</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-04-04 21:36:51 +0200</bug_when>
            <thetext>Eeek! It doesn&#39;t only scribble over source code in the project; it also scribbles over source code of the framework. This is INCREDIBLY dangerous!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23827</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-04-04 23:36:32 +0200</bug_when>
            <thetext>Mh, I&#39;m sorry to hear you had unpleasant surprises.

But for one thing, the documentation for the pretty-print key states clearly it does in-place editing of source code. (In another world, this is called &quot;destructive writes&quot; - although it is meant very constructive :-).

Then, I hope &quot;munges&quot; and &quot;scribbles&quot; don&#39;t mean the code is mutilated, just re-formatted, right?!

Then, there is no such thing as &quot;a job that has nothing to do with source code&quot;. A job, as soon as it has libraries, has to do with source code. A single job can hold any number of unique action keys (whether this makes sense in the greater scale of things or not). We never use it that way, but nevertheless.

I agree you would normally only customize the &quot;pretty&quot; job which holds a pretty-print key, and only operates on the local library (aka application). But you are free to define jobs which combine pretty-print with any number of other keys. It&#39;s all valid, although quite powerful (aka &quot;dangerous&quot;). That&#39;s probably the price for any powerful tool.

We could add mandatory arguments to the &quot;pretty&quot; job, but that wouldn&#39;t prohibit you defining your own jobs with the pretty-print key, going off all ways. And on the other hand, it would penalize all those user that just want to make use of the &quot;pretty&quot; job as it is.

And lastly: Everything is surely under revision control, so there shouldn&#39;t be a problem reverting unwanted changes, right :-).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23828</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-04-05 01:27:00 +0200</bug_when>
            <thetext>(In reply to comment #2)

&gt; Then, I hope &quot;munges&quot; and &quot;scribbles&quot; don&#39;t mean the code is mutilated, just
&gt; re-formatted, right?!

Yes. Every single file, it appears, was reformatted, into a style that is not very qooxdoo-like at all, using the default options. (e.g. block comments indented well farther than the code just below it; lines after the first line of a comment indented farther than the first line, etc.)

&gt; And lastly: Everything is surely under revision control, so there shouldn&#39;t be
&gt; a problem reverting unwanted changes, right :-).

Yes. With every file changed greatly, I spent about an hour trying to figure out what were changes that I had made during the day, and what were reformatting changes. In the end, I fortunately had some of the files still residing in email buffers, I had to &quot;git reset --hard&quot; to get things back to how they were, and lose most of the day&#39;s work.

Although the tool is very powerful, I still believe that it should not be possible to do this much damage to source code without some warning and confirmation.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24616</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-19 11:45:49 +0200</bug_when>
            <thetext>(In reply to comment #3)
&gt; Yes. Every single file, it appears, was reformatted, into a style that is not 
very qooxdoo-like at all, using the default options. (e.g. block comments 
indented well farther than the code just below it; lines after the first line 
of a comment indented farther than the first line, etc.)

This was another bug that has been fixed in trunk meanwhile (bug#1467).

&gt; Yes. With every file changed greatly, I spent about an hour trying to figure 
out what were changes that I had made during the day, and what were 
reformatting changes. In the end, I fortunately had some of the files still 
residing in email buffers, I had to &quot;git reset --hard&quot; to get things back to 
how they were, and lose most of the day&#39;s work.

Ah, sorry to hear that. But the bottom line of this is not to play with 
code-changing jobs (pretty, fix, ...) if you have too many uncommited changes.

&gt; 
&gt; Although the tool is very powerful, I still believe that it should not be 
possible to do this much damage to source code without some warning and 
confirmation.

I&#39;m not so sure, Derrell. It&#39;s all well documented, and apart from you nobody 
else seems to struggle with the general availability of the tool. To me it 
appears as a case of individual user misunderstanding. Regrettable, yes, but 
unavoidable in general. I&#39;m sure if we add an interactive confirmation somebody 
will rush to hit yes and then claim it meant something else to him/her ... ;-).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24617</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-19 11:55:09 +0200</bug_when>
            <thetext>Changed bug summary, to better reflect the current discussion (Hope that&#39;s fine 
with you, Derrell).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24622</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-05-19 14:15:56 +0200</bug_when>
            <thetext>Yes, the summary change is appropriate.

I believe that *I* have learned my lesson on this, and will hopefully forever remember not to use the pretty-print option without far more careful reflection on the consequences. I still believe, though, that a warning is in order. If they don&#39;t heed the warning, at least they can&#39;t say they weren&#39;t warned. (As a general concept, I believe that anything that has the potential of doing something different than, or more wide-ranging than a reasonable interpretation of the command name should have a confirmation or warning about what it will do.

It&#39;s up to you. If you decide not to add a confirmation or warning, then feel free to close the bug. You&#39;ve heard my argument and you know my very strong recommendation.

Cheers,

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24625</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-19 14:50:29 +0200</bug_when>
            <thetext>Setting the bug to enhancement &amp; unspec. Maybe it gets additional votes in the future.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35826</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:13 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>