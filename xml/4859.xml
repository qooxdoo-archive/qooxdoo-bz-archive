<bug>
          <bug_id>4859</bug_id>
          
          <creation_ts>2011-03-24 17:26:00 +0100</creation_ts>
          <short_desc>Add Optimization Support for qx.core.Environment.useCheck() Calls</short_desc>
          <delta_ts>2014-03-03 15:20:31 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>1.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.5</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>23535</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-03-24 17:26:31 +0100</bug_when>
            <thetext>This is a follow-up for bug#4734.

Prune code in the qx.core.Environment class that is guarded by this.useCheck() 
calls, for feature keys that are not queried in the application.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23552</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-25 09:22:24 +0100</bug_when>
            <thetext>Just a little addition, this is not necessary for the 1.4 release as the deprecated code will need every class so the removal of the dependencies would help anyway.

But I had to the debugging warnings in qx.core.Environment from  a useCheck to qx.Bootstrap.DEBUG. Maybe we can move that back after the release as soon as this bug is fixed. (r26095)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>25091</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-06-14 17:46:25 +0200</bug_when>
            <thetext>- If variants are being optimized, after building the initial class list, all 
actually used environment keys are collected across the class list.

- Environment.useCheck() calls to keys not in this list are removed from 
Environment&#39;s code tree.

- With Environment&#39;s dependencies changed, the class list is re-calculated. 
(Re-calculation is simpler and more reliable than trying to remove classes from 
the initial class list).

- The new class list is then used to generate the application. It is currently 
not possible that the set of used environment keys could have changed again 
(due to dropped classes), as the removed dependencies of Environment are only 
qx.bom.client.* classes which do not use Environment.*() calls in their own 
code. If this should change at some point, the process has to be repeated until 
the class list doesn&#39;t change anymore.

- Built the class sorting into the generation of the class list, thereby saving 
an additional call to sortClassList.

This all amounts to that if variants are on, the class list is calculated twice 
for each build, but class sorting is omitted, so we roughly end up again with 
two runs through the classes and their dependencies.

As another consequence, the class dependencies of qx.core.Environment cannot be 
cached across build jobs anymore, and have to be calculated anew with every 
job. The reason is that the dependencies of q.c.Environment no longer only 
depend only on its own code, nor only on the code of its transitive 
requirements, but on the code of *all* classes in the class list, as they 
influence the set of used environment keys, and this may change from job to 
job. (You could only cache those dependencies by keying them with something 
like a hash over all classes in the class list; oh well ....).

With r27653.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36920</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:20:31 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>