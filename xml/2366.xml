<bug>
          <bug_id>2366</bug_id>
          
          <creation_ts>2009-05-11 11:09:00 +0200</creation_ts>
          <short_desc>Add Concurrency Support to the Generator</short_desc>
          <delta_ts>2014-03-03 08:46:18 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          <blocked>5285</blocked>
    
    <blocked>5295</blocked>
          <votes>30</votes>
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          <cc>j-b.briaud</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>9892</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-05-11 11:09:36 +0200</bug_when>
            <thetext>Currently, the generator is not able to exploit concurrency features of the 
underlying platform like multiple threads, multi-core or multiple-processors 
architectures. This bug suggests to investigate possibilities to improve on 
that.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10100</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-05-25 14:43:29 +0200</bug_when>
            <thetext>compileClassesMP: added way to escape deadlocks (seen on Windows) when pipes 
are full but process not terminated. better version would use 
pid.stdout.read(N) to read parts of buffer, then continue. - pending problem 
still unsynchronized access to cache objects (privates.names).

with r19212</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20072</commentid>
            <who name="Jean-Baptiste Briaud -- Novlog">j-b.briaud</who>
            <bug_when>2010-09-03 12:15:58 +0200</bug_when>
            <thetext>Using more than one core is very important for us.
Generate take too long and it look like a very good way to improve performance.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20082</commentid>
            <who name="Jean-Baptiste Briaud -- Novlog">j-b.briaud</who>
            <bug_when>2010-09-03 16:04:17 +0200</bug_when>
            <thetext>Speed up the build is really important for us, so we all vote here.
However one should check that it really save time to allow using multicore because it also depends on software algorithm and it is not always possible to speed up things using parallelism.
Do you already have an idea on how it improve speed ?
If you think there is better way to improve toolchain pefrormances let us know so we can vote elsewhere to help deciding.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20085</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-09-03 17:23:49 +0200</bug_when>
            <thetext>The compile actions of the generator lend themselves very well to parallelism, as they exhibit true data, shared-nothing parallelism (the same process is applied to a lot of similar data items, where the outcome of action on one of those items is completely independent from the outcome of the others). These actions include:

- parsing a class source into a syntax tree

- extracting the dependencies of a class from its source

- extracting api docs from a class source

- serializing a class tree into Javascript again, applying transformations like optimizations (apart from, currently, the private optimization which needs global knowledge, in the form of a shared privates registry in the cache)

This is a situation that is most susceptible to parallelism.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>25807</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-07-06 15:25:12 +0200</bug_when>
            <thetext>un-assign, as it is re-targeted</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27455</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-11-08 15:03:43 +0100</bug_when>
            <thetext>Untargeting this issue.

Tests showed only a small increase in overall time performance, using the Pyro 
infrastructure, in the range of 5-10%. Pyro is a really good framework for this 
(pure Python, good API, ...). But even with a running &quot;generator daemon&quot; for 
e.g. compiling classes, the overhead of establishing connections and passing 
information over them was eating significantly into the overall performance, 
taking much of the gain that was achieved by doing things in parallel.

On the other hand, adapting the generator code to Pyro is cutting deeply into 
the existing code base. A lot of different place would have to be adapted, and 
the code for the distribution would complicate those places significantly.

With the current state of things, I don&#39;t think it&#39;s worth going this way. 
Current efforts are probably better spent looking into single-core approaches 
like using pypy, when looking for substantial speed up&#39;s for the generator.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27456</commentid>
            <who name="Jean-Baptiste Briaud -- Novlog">j-b.briaud</who>
            <bug_when>2011-11-08 15:26:43 +0100</bug_when>
            <thetext>OK, thanks for the deep investigation.
I removed my vote as we&#39;re closing the company, all that is unfortunately too late now.
Long life to Qooxdoo, maybe in another professional life for me ...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35488</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:46:18 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>