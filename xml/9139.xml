<bug>
          <bug_id>9139</bug_id>
          
          <creation_ts>2015-05-19 09:46:00 +0200</creation_ts>
          <short_desc>Changing of an controller model with more properties then the old model instance occurs in an assertion error</short_desc>
          <delta_ts>2015-05-19 09:58:53 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.databinding</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mustafa Sak">mustafa.sak</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>43295</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2015-05-19 09:46:48 +0200</bug_when>
            <thetext>Mind you have a model generated by Json marshaler with 2 properties. Furthermore mind you generated a second model with same structure but one more optional property.

Now bind the 2-property model to a list controller, which will work as expected. But now switch the model to the second 3-property model. You shall realize a assertion error.

My example is to long for tinyurl. So please copy the following code in to the playground manually:


qx.Class.define(&quot;List&quot;,
{
  extend : qx.ui.container.Scroll,

  include : [
    qx.ui.core.MRemoteChildrenHandling
  ],


  construct : function()
  {
    this.base(arguments);

    // Create content
    this.__content = this._createListItemContainer();

    var controller = new qx.data.controller.List(null, this.getChildrenContainer());
    controller.setDelegate(this);

    this.bind(&quot;model&quot;, controller, &quot;model&quot;);
  },


  properties :
  {
    model : {
      init : null,
      nullable : true,
      check : &quot;qx.data.Array&quot;,
      event : &quot;changeModel&quot;
    }
  },


  members :
  {
    __content : null,

    // overridden
    getChildrenContainer : function() {
      return this.__content;
    },


    _createListItemContainer : function()
    {
      var cont = new qx.ui.container.Composite(new qx.ui.layout.VBox());
      this.getChildControl(&quot;pane&quot;).add(cont);
      return cont;
    },


    createItem : function()
    {
      return new ListItem();
    },


    bindItem : function(controller, item, id)
    {
      controller.bindProperty(&quot;key&quot;, &quot;key&quot;, null, item, id);
      controller.bindProperty(&quot;value&quot;, &quot;value&quot;, null, item, id);
      controller.bindProperty(&quot;valueOptions&quot;, &quot;valueOptions&quot;, null, item, id);
    }
  }
});


qx.Class.define(&quot;ListItem&quot;,
{
  extend : qx.ui.container.Composite,


  construct : function()
  {
    this.base(arguments);
    this.set({
      layout : new qx.ui.layout.HBox()
    });

    this.bind(&quot;key&quot;, this.getChildControl(&quot;key&quot;), &quot;value&quot;);
    this.bind(&quot;value&quot;, this.getChildControl(&quot;value&quot;), &quot;value&quot;);
  },


  properties :
  {
    key : {
      init : null,
      nullable : true,
      check : &quot;String&quot;,
      event : &quot;changeKey&quot;
    },


    value : {
      init : null,
      nullable : true,
      check : &quot;String&quot;,
      event : &quot;changeValue&quot;
    },


    valueOptions : {
      init : null,
      nullable : true,
      check : &quot;Object&quot;,
      event : &quot;changeValueOptions&quot;,
      apply : &quot;_applyValueOptions&quot;
    }
  },

  members :
  {
    // overridden
    _createChildControlImpl : function(id)
    {
      var control;

      switch(id)
      {
        // TOPLINE
        case &quot;key&quot;:
          control = new qx.ui.basic.Label();
          this.add(control);
          break;

        case &quot;value&quot;:
          control = new qx.ui.basic.Label();
          control.set({
            rich : true,
            wrap : true
          });
          this.add(control, {flex:1});
          break;
      }

      return control || this.base(arguments, id);
    },


    _applyValueOptions : function(value, old)
    {
      var properties;
      if (old) {
        properties = qx.Class.getProperties(old.constructor);
        properties.forEach(function(key) {
          // reset old properties
          var func = qx.lang.String.camelCase(&quot;reset-&quot; + key);
          this.getChildControl(&quot;value&quot;)[func]();
        }.bind(this));
      }

      if (value) {
        properties = qx.Class.getProperties(value.constructor);
        // apply options as properties of the value label widget
        properties.forEach(function(key) {
          var func = qx.lang.String.camelCase(&quot;set-&quot; + key);
          this.getChildControl(&quot;value&quot;)[func](value.get(key));
        }.bind(this));
      }
    }
  }
});



var dataNoOptions = qx.data.marshal.Json.createModel([
  {
    key : &quot;key1.1&quot;,
    value : &quot;value1.1&quot;
  },
  
  {
    key : &quot;key2.1&quot;,
    value : &quot;value2.1&quot;
  }
]);


var dataWithOptions = qx.data.marshal.Json.createModel([
  {
    key : &quot;key1&quot;,
    value : &quot;value1&quot;,
    valueOptions : null
  },
  
  {
    key : &quot;key2&quot;,
    value : &quot;value2&quot;,
    valueOptions : null
  }
]);


var list = new List();
// set the 2-property model first
list.setModel(dataNoOptions);

this.getRoot().add(list, {edge : 10});

// switch to the 3-property model after 2 sec
window.setTimeout(function() {
  list.setModel(dataWithOptions);
}.bind(this), 2000);</thetext>
          </long_desc>
      
      

    </bug>