<bug>
          <bug_id>3838</bug_id>
          
          <creation_ts>2010-07-06 15:05:00 +0200</creation_ts>
          <short_desc>Generator does not Schema Check Class Definitions</short_desc>
          <delta_ts>2014-03-03 08:46:06 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>1.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          <bug_file_loc>http://manual.qooxdoo.org/1.3.x/pages/core/class_quickref.html</bug_file_loc>
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="John Spackman">john.spackman</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          <cc>carsten.lergenmueller</cc>
    
    <cc>thron7</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>19157</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2010-07-06 15:05:21 +0200</bug_when>
            <thetext>Typos in class definitions are not detected by the generator, EG create a skeleton  named &quot;test&quot; and create a class in test/MyTest.js:

  qx.Class.define(&quot;test.MyTest&quot;,
  {
    extend : qx.core.Object,
    mmembers: {              // Typo
	getMyValue: function() {
		return 1234;
	}
    }
  });

And create an instance of test.MyTest in Application.js.

The generator does not pick up the mistyped &quot;mmembers&quot; with either the &quot;ource&quot; or &quot;lint&quot; jobs</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19165</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-07 09:25:14 +0200</bug_when>
            <thetext>I&#39;m not sure if we need such a feature because it could be possible to have such a member in the class itself. What do you think Thomas?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19166</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-07-07 09:34:11 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; I&#39;m not sure if we need such a feature because it could be possible to have
&gt; such a member in the class itself. What do you think Thomas?

It all depends whether we regard the set of possible class map keys as strict, or if we want to allow additional keys that are not pre-defined. If there are no good reasons to allow additional keys, I would argue in favour of a strict set as it would allow close checking of the map (-&gt; Json schema), and we can make better guaranties about the run time features of qooxdoo classes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19168</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-07 11:58:56 +0200</bug_when>
            <thetext>(In reply to comment #2)
&gt; It all depends whether we regard the set of possible class map keys as strict,
&gt; or if we want to allow additional keys that are not pre-defined. If there are
&gt; no good reasons to allow additional keys, I would argue in favour of a strict
&gt; set as it would allow close checking of the map (-&gt; Json schema), and we can
&gt; make better guaranties about the run time features of qooxdoo classes.

Yes, thats the general question here. I don&#39;t like the idea to restrict the map to only predefined keys. What if you just want to add a quick and dirty key for debugging?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19169</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2010-07-07 12:09:35 +0200</bug_when>
            <thetext>Wouldn&#39;t you add that key as a static member of the class?  

You currently get an error at runtime if you add keys to the class definition, and properties do not support additional keys either.

I think that an &quot;authorised&quot; mechanism to add property keys (and therefore maybe class keys) could be really useful...but that&#39;s another conversation :).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19170</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-07-07 13:23:31 +0200</bug_when>
            <thetext>(In reply to comment #4)
&gt; Wouldn&#39;t you add that key as a static member of the class?  

That&#39;s exactly my point. Why would you want to add keys on the level of statics, members, construct, ...? They all receive their semantics through qx.Class.define (e.g. add to prototype, add to function object, etc.). What would be the semantics of an additional key? What should qx.Class.define do with it? Is there something you essentially *cannot* achieve by working with the existing keys?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19177</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-08 11:00:14 +0200</bug_when>
            <thetext>Sorry guys, ad the wrong place in mind. I usually add debug infomations in the members section which is fine. Adding those information parallel to members doesn’t do anything.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28397</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-01-31 12:25:23 +0100</bug_when>
            <thetext>From bug#4829:

qooxdoo&#39;s class maps have  an own syntax, a schema if you will (formal  
description see URL of this bug). This schema should be checked by the  
generator. Currently, violations to that schema are accepted by the parser (as  
long as it is valid JS), and only the backend modules (like compiler or api  
generation) bomb if they encounter this violation. If you just build a &#39;source&#39; 
 version, you don&#39;t get any generator errors at all, it only shows when running 
 in the browser. Maybe an earlier validation would be sensible.

An example would be a class map with:

  members : function ()
  {
     var foo = 14;
  }

The same applies to themes, mixins, interfaces and the likes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28399</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-01-31 12:26:32 +0100</bug_when>
            <thetext>*** Bug 4829 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30103</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-07-11 16:40:57 +0200</bug_when>
            <thetext>*** Bug 2953 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35415</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:46:06 +0100</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>