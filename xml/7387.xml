<bug>
          <bug_id>7387</bug_id>
          
          <creation_ts>2013-05-06 14:31:00 +0200</creation_ts>
          <short_desc>Warn about usage of deprecated methods during build time</short_desc>
          <delta_ts>2014-05-26 12:34:34 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Richard Sternagel">richard.sternagel</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>derrell.lipman</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>32686</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2013-05-06 14:31:11 +0200</bug_when>
            <thetext>For methods which are annotated with &quot;@deprecated {2.1} Please use ... instead&quot; the Generator could already print warnings during build time. 

This would be a supplement to the warnings we create during runtime:

if (qx.Bootstrap.DEBUG) { 
  qx.Bootstrap.warn(&quot;... is deprecated. Use ... instead.&quot;) 
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32691</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-05-07 07:54:39 +0200</bug_when>
            <thetext>I am not sure if thats a thing I want to have. Thomas, what do you think?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32692</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-05-07 09:16:14 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; I am not sure if thats a thing I want to have. Thomas, what do you think?

Given the possibilities with JSDoc hints we have, I think it&#39;s feasible. One consequence of having this could be that deprecations need not be reflected in framework class code (a la &quot;if(qx.debug)console.log(&quot;This method is deprecated&quot;);&quot;). You could just add the @deprecated hint in the JSDoc and leave the method implementation as is, you wouldn&#39;t have to touch its source. On the other hand the deprecation check would add another performance penalty to Generator compile runs.

But the question really is what is more appropriate for the user. Will users be more likely looking at Generator output, or at browser console output?! It probably depends on the user, but the tendency so far was to make the OS shell interface of qooxdoo thinner rather than thicker.

A good compromise might be to add this check to the lint checking of the Generator.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32694</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2013-05-07 12:51:19 +0200</bug_when>
            <thetext>One advantage I see is that you get deprecation warnings for your entire code base and not just for the methods your app calls during runtime or more specifically during *that* certain run. 

To also get rid of the deprecation warnings in the framework code (a la &#39;if(qx.debug)console.log(&quot;This method is deprecated&quot;);&#39;) seems compelling because of an violation of DRY (JS code *and* JS doc hint) but I would keep them because this is valuable information for the developer.

To integrate this only within lint runs seems to me a good compromise. During every build would be annoying because some of the deprecations I probably know, but can&#39;t change them at the moment. A sub config key of the &quot;lint-check&quot; key could enable/disable it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32696</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2013-05-07 14:22:17 +0200</bug_when>
            <thetext>As a user of qooxdoo and developer of qooxdoo apps, I have a very strong opinion on this. I would definitely like to see deprecation warnings when I run the generator (especially in &#39;generate.py source&#39;). That would give me the earliest indication that I have to make changes, and allow me the longest possible time for testing those changes.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32705</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-05-08 07:59:52 +0200</bug_when>
            <thetext>I think  the lint check is a good starting point. Having that, we can promote it in a blog post / mailing list and see if the users, as Derrell already mentioned, are willing to toke the build time penalty for that feature. In any case, it would be possible to enable it for source building if its in the lint module, right?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32707</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-05-08 09:11:25 +0200</bug_when>
            <thetext>(In reply to comment #5)
&gt; I think  the lint check is a good starting point. Having that, we can promote 
it in a blog post / mailing list and see if the users, as Derrell already 
mentioned, are willing to toke the build time penalty for that feature. In any 
case, it would be possible to enable it for source building if its in the lint 
module, right?

Yep.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40399</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-05-26 12:34:34 +0200</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>