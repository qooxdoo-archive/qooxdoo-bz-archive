<bug>
          <bug_id>3481</bug_id>
          
          <creation_ts>2010-02-26 17:57:00 +0100</creation_ts>
          <short_desc>Make function given to Timer.once() reachable from a debugger</short_desc>
          <delta_ts>2014-03-03 15:20:09 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>1.0.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Carsten Lergenm端ller">carsten.lergenmueller</reporter>
          <assigned_to name="Carsten Lergenm端ller">carsten.lergenmueller</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>17018</commentid>
            <who name="Carsten Lergenm端ller">carsten.lergenmueller</who>
            <bug_when>2010-02-26 17:57:35 +0100</bug_when>
            <thetext>When an exception is thrown in a timer handler, it is often difficult to find out
which of the many active timers caused the exception. Stack traces do not help
because all timers have the same stack trace (interval -&gt; Timer interval event -&gt; handler).

What really helps is the source code of the handler, if you can find it in a 
debugger. By analyzing it, you easily can find out which timer was responsible.

However, in case of Timer.once(func, obj, timeout), this is not possible, because 
no reference to func is held in the timer instance. (Func is held as local variable
which is stored in a newly opened closure, so it cannot be read by a debugger.)

It would be helpful to store func in a private field of the timer, where it can 
be read by a debugger.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17020</commentid>
            <who name="Carsten Lergenm端ller">carsten.lergenmueller</who>
            <bug_when>2010-02-26 18:10:33 +0100</bug_when>
            <thetext>Discussed with Fabian.

Implemented and committed to trunk.

Fixed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36778</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:20:09 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>