<bug>
          <bug_id>7057</bug_id>
          
          <creation_ts>2012-11-29 12:58:00 +0100</creation_ts>
          <short_desc>Resources: Extract Resource IDs from Source Code, rather than #asset Hints</short_desc>
          <delta_ts>2014-03-03 08:46:04 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>31539</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-11-29 12:58:07 +0100</bug_when>
            <thetext>The Generator is able to extract references to some resources from class code:

- other classes (&#39;dependencies&#39;), in the form of JS identifiers 
(&quot;qx.core.Object&quot;)
- translation keys, in the form of specific function calls (&quot;this.tr(&#39;foo&#39;))

It would be great if the Generator could also extract references to Resource 
IDs from source code directly, rather than relying on corresponding #asset 
hint. This would allow to be more dynamic and more precise about the resources 
that an application actually needs.

As resource IDs appear in class code as normal JS strings 
(&quot;qx.ui.form.Button(&#39;..&#39;, &#39;custom/test.png&#39;)&quot;), it is not that trivial to 
detect them reliably. A heuristic approach would be to check every string in 
the app if it represents a valid resource ID (all valid resource IDs are known 
at compile time). (This might produce false positives, which might be 
acceptable).  This could be amended by &quot;tagging&quot; resource IDs with a fake 
function call (&quot;this.asset(&#39;custom/test.png&#39;)&quot;) that evaluates in the source 
version by just returning its argument, and could be optimized away in the 
build version.

Another issue is that resource IDs might be encoded with aliases (which are 
decoded at runtime through the AliasManager), and might therefore not be 
recognizable at compile time as valid resource IDs. This could be amended by 
providing the AliasManager functionality and all aliases defined for the app 
(is this possible?) at compile time. Another option is to retain the #asset 
hints for aliased resources.

We should note that the potential solution must also work with Theme 
definitions where many references to resources are made.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35402</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:46:04 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>