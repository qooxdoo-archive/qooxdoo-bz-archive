<bug>
          <bug_id>8298</bug_id>
          
          <creation_ts>2014-04-29 18:04:00 +0200</creation_ts>
          <short_desc>Convert framework applications and components into contributions</short_desc>
          <delta_ts>2014-05-12 13:17:20 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>other</component>
          <version>3.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>4.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Boulanger">info</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          <cc>richard.sternagel</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>40101</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2014-04-29 18:04:10 +0200</bug_when>
            <thetext>The qooxdoo sdk is quite big and contains a lot of code that is not needed in the (or at least in my) normal development workflow. I would assume that typically, only the &quot;framework&quot; and &quot;tool&quot; folders are actually used. I go to the qooxdoo website for everything else: API viewer, playground, Widget browser, instead of building it locally, and I assume many developers do the same.

I wonder if it wouldn’t make sense to convert the „components“ and the „applications“ in the SDK to contributions which can be optionally installed. This would have several advantages: 

- the SDK becomes slimmer (if not much in code size, then at least in complexity) 
- this would add some top-quality contributions, increasing the value of the registry on the whole 
- the core devs would have a bigger incentive to use the contributions infrastructure themselves, thus insuring that it well-maintained and functional (for example, concerning dependency management) 

To be sure, this would mean that the process of adding the contributions back to one’s development environment must be easy to ensure that they are actually used. In a related proposal [1], I have suggested that adding and removing contributions should be possible without manually adapting the config.json, using the command line. This could be done with the applications and components, using the generator as well, for example, like so: 

./generate.py contrib-install playground 

or something like this to download and install the playground as a contribution. 

Of course, these contributions wouldn’t be „libraries“ in the sense that they would be part of the main application. Instead, they would have to be downloaded and built in separate subdirectories. 

As I said, just an idea, but in a longer perspective, it seems to make a lot of sense to remove the components and applications from the „SDK“ and put them into an infrastructure for modular pieces of code that works with the core framework code. 

[1] http://bugzilla.qooxdoo.org/show_bug.cgi?id=8285</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40183</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-05-09 18:37:56 +0200</bug_when>
            <thetext>You&#39;re right that the SDK contains code a qooxdoo developer (i.e. not the core team) probably doesn&#39;t need in his normal development workflow and it would benefit the overall contrib infrastructure if we would eat our own dog food here.

But on the other side this would mean changing so many parts of the framework for no real gain for us, that it probably won&#39;t happen. In a way it&#39;s just like moving data from one partition to another and working on tooling to bring it eventually back (on demand).

Moreover the (physically) tight coupling of the components and the apps to the framework classes and the tooling allow us to easily test our work and get fast feedback if something breaks. I&#39;m sure that the components and apps would be much more outdated or even broken if it would be optionally to install them. Precisely because they are part of the SDK we feel obligated to keep them in a good shape.

But keep suggesting things, if we say no today won&#39;t mean we don&#39;t take those ideas in consideration for future decision. :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40193</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2014-05-12 13:17:20 +0200</bug_when>
            <thetext>Makes sense. Don&#39;t worry, I&#39;ll keep suggesting stuff ;-)</thetext>
          </long_desc>
      
      

    </bug>