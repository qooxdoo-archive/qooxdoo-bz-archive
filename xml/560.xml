<bug>
          <bug_id>560</bug_id>
          
          <creation_ts>2007-07-18 21:17:00 +0200</creation_ts>
          <short_desc>Add support for sub-widgets</short_desc>
          <delta_ts>2014-03-03 15:21:24 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.core</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>0.8-alpha2</target_milestone>
          
          <blocked>116</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Werner">info</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>2021</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2007-07-18 21:17:20 +0200</bug_when>
            <thetext>The current situation where each widget itself manages the subwidgets used is not very efficient. For example a Spinner uses two buttons and a textfield. These should be managed by some widget core code instead of custom code in these widgets.

This would also add a feature to auto-dispose the keys where these elements are stored.

Also we have one common getter for all these things e.g. getChild(&quot;id&quot;) // to discuss
This is a major improvement and would also mean that all these getLabelObject(), getIconObject() etc. methods will be removed.

We could also use the same sheme when defining appearance themes to create a real structures theme e.g. instead of &quot;combobox-button&quot; we would say &quot;combobox/button&quot; or &quot;spinner/upbtn&quot; etc.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>2584</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2007-12-07 13:55:49 +0100</bug_when>
            <thetext>Next idea:

Add an optional &quot;supports&quot; attribute which lists the supported states. This would dramatically improve caching because we do not need to cache states combinations which are not result into any difference at all.

&quot;button&quot; : 
{
  supports : [ &quot;over&quot;, &quot;pressed&quot; ],
  style : function(states) 
  {
    return {
      backgroundColor : states.over ? &quot;red&quot; : &quot;blue&quot;,
      border : states.pressed ? &quot;inset&quot; : &quot;outset&quot;    
    };
  }
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3510</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2008-06-26 14:02:23 +0200</bug_when>
            <thetext>This part is done. The reworked appearance system based on this data is still 
in the works.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37273</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:21:24 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>