<bug>
          <bug_id>6722</bug_id>
          
          <creation_ts>2012-08-17 11:00:00 +0200</creation_ts>
          <short_desc>Object mocks should be derived from the class of the objects they mock</short_desc>
          <delta_ts>2014-03-03 08:45:46 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.dev.testing</component>
          <version>2.0.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Florin Jurcovici">florin.jurcovici</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>30403</commentid>
            <who name="Florin Jurcovici">florin.jurcovici</who>
            <bug_when>2012-08-17 11:00:21 +0200</bug_when>
            <thetext>A mock of an object should be assignable wherever the object itself would be - this doesn&#39;t happen for properties with check: &lt;class&gt;, because the mock seems not to be of a subclass of the mocked object&#39;s class.

Tests to prove that subclasses can be injected, but mocks cannot:

// fails
testInjectMock: function()
{
  // include qx.dev.unit.MMock in the test class.
  qx.Class.define(&quot;my.A&quot;, { extend: qx.core.Object });
  qx.Class.define(&quot;my.B&quot;, { 
    extend: qx.core.Object, 
    properties: { X: { check: &quot;my.A&quot; } } 
  });
  var a = this.mock(new my.A());
  var b = new my.B();
  b.setX(a);
},

// passes
testInjectSubclass: function()
{
  qx.Class.define(&quot;my.A&quot;, { extend: qx.core.Object });
  qx.Class.define(&quot;my.B&quot;, { extend: my.A });
  qx.Class.define(&quot;my.C&quot;, { 
    extend: qx.core.Object, 
    properties: { X: { check: &quot;my.A&quot; } } 
  });
  var b = new my.B();
  var c = new my.C();
  c.setX(b);
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30412</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-08-20 11:45:44 +0200</bug_when>
            <thetext>Thanks for the report. I totally agree with you. This could still be a hard task because the mock method is offered by the sinon.js testing framework. We&#39;ll need to check whats the source of the issue and how to work around / fix it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30418</commentid>
            <who name="Florin Jurcovici">florin.jurcovici</who>
            <bug_when>2012-08-20 13:35:37 +0200</bug_when>
            <thetext>There could be a simple way - I&#39;m not aware of the side effects:

2) set classname on mock/spy/stub objects before returning them, after Sinon has created them, as a copy of classname of the mocked object.

1) have the unit testing framework change Assert::assertInstance() upon load, so that if checks whether the received value is a mock/stub/spy, and if yes, just compare value.classname with the received string.

This way of changing things would only affect code using mock objects - i.e. exactly the objects causing the problem, and no objects being used in production. And the change should IMO be simple.

Other than that, I see no other way than manipulating prototypes on mocks. I don&#39;t know enough to suggest a solution using this approach, though.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35285</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:45:46 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>