<bug>
          <bug_id>4063</bug_id>
          
          <creation_ts>2010-09-08 16:02:00 +0200</creation_ts>
          <short_desc>Button behaviours</short_desc>
          <delta_ts>2010-11-08 09:05:02 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop</component>
          <version>1.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>2744</dup_id>
          
          
          
          
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>1.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Adrian Gheorghe">adrian.gheorghe</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>20100</commentid>
            <who name="Adrian Gheorghe">adrian.gheorghe</who>
            <bug_when>2010-09-08 16:02:15 +0200</bug_when>
            <thetext>// Toolbar radio buttons have a (display at least, didn&#39;t look at the code)
// bug: click on second button, then click again on it - the second button
// will get deselected and the first button will get selected. Of course,
// you might argue that it inherits from form.ToggleButton and thus it&#39;s
// toggled &quot;off&quot; when you click the second time. But in this case, the
// object should be called ToggleButton and not RadioButton. Another issue
// with this behaviour is that when I click the second time, the execute
// event is executed on the second button (the one that gets deactivated)
// and not on the first, which gets activated.
var button1 = new qx.ui.toolbar.RadioButton(&quot;First Button&quot;);
var button2 = new qx.ui.toolbar.RadioButton(&quot;Second Button&quot;);
var button3 = new qx.ui.toolbar.RadioButton(&quot;Third Button&quot;);

/* - uncomment this to see the bug below
// The problem I found here is that if I click a second time on the already
// selected button, I&#39;ll still get an execute event and I see no reason to
// that.
var button1 = new qx.ui.form.RadioButton(&quot;First Button&quot;);
var button2 = new qx.ui.form.RadioButton(&quot;Second Button&quot;);
var button3 = new qx.ui.form.RadioButton(&quot;Third Button&quot;);
*/

new qx.ui.form.RadioGroup(button1, button2, button3);

var tb = new qx.ui.toolbar.ToolBar();
// on rendering, the first button will be selected/toggled
// by default, although no  event is triggered
tb.add(button1);
tb.add(button2);
tb.add(button3);

// Alas, there is one thing which I find missing: the ability to cancel
// the selection of a button. Let&#39;s say I&#39;ve clicked the second button, some
// changes occured in the pages and if I were to click on the first button,
// I&#39;d lose my changes. So, naturally, I&#39;d like to display a confirmation
// dialog and allow the user to choose whether he wants to allow the change.
button1.addListener(&quot;execute&quot;, function(e) {
  alert(&quot;first&quot;);
});

button2.addListener(&quot;execute&quot;, function(e) {
  alert(&quot;second&quot;);
});

button3.addListener(&quot;execute&quot;, function(e) {
  alert(&quot;third&quot;);
});


var doc = this.getRoot();

doc.add(tb);</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20129</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-10 14:19:54 +0200</bug_when>
            <thetext>Hello Adrian,
here is my feedback to you report.

1. The execute event is fired because someone clicked the button. It is quite uncommon to use the execute event in combination with a radio manager. Usually, you would use the changeSelection of the radio group to acces which button has become the active one. So having the execute event is still a good idea if someone wants to know if the button has been clicked no matter if its getting selected or not.

2. It is more or less the same. The execute event doesn&#39;t care about the selection.

3. You are absolutely right about that! The missing before event is a general problem we have. Here is the corresponding bug report for that issue: http://bugzilla.qooxdoo.org/show_bug.cgi?id=2744

Take a look at the following example to see how it could do the thing you expected:

var button1 = new qx.ui.toolbar.RadioButton(&quot;First Button&quot;);
var button2 = new qx.ui.toolbar.RadioButton(&quot;Second Button&quot;);
var button3 = new qx.ui.toolbar.RadioButton(&quot;Third Button&quot;);

var rg = new qx.ui.form.RadioGroup(button1, button2, button3);

var tb = new qx.ui.toolbar.ToolBar();
tb.add(button1);
tb.add(button2);
tb.add(button3);

rg.addListener(&quot;changeSelection&quot;, function(e) {
  alert(e.getData()[0].getLabel());
}, this);

this.getRoot().add(tb);â€‹


I guess that solves the bug?

A little tip in general, if you have more than one problem, feel free to open up more than one report! Thats ok, we don&#39;t need to save bug in here. ;)

Best,
Martin</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20329</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-23 13:48:59 +0200</bug_when>
            <thetext>

*** This bug has been marked as a duplicate of bug 2744 ***</thetext>
          </long_desc>
      
      

    </bug>