<bug>
          <bug_id>4677</bug_id>
          
          <creation_ts>2011-02-16 14:40:00 +0100</creation_ts>
          <short_desc>Use a better strategy to deal with failed assertions</short_desc>
          <delta_ts>2014-03-03 15:21:47 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>app.testrunner</component>
          <version>1.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.4</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Wagner">daniel.wagner</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>tristan.koch</cc>
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>22776</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2011-02-16 14:40:28 +0100</bug_when>
            <thetext>Testrunner2 wraps any assert* methods on qx.dev.unit.TestCase so that AssertionErrors are stored on the function that called the assertion method. After test execution is finished, the test will be marked as &quot;failed&quot; if any exceptions are stored on the test method.
This means any assertions not called directly by a test function can fail without the Testrunner noticing.

A better strategy would be to fire a data event on the test class if an assertion fails. The TestResult responsible for the actual test execution could listen for such events and store the event data (the AssertionError) in the exception property of the TestResultData object corresponding to the currently running test just like any other error encountered during test execution.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22779</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2011-02-16 14:53:16 +0100</bug_when>
            <thetext>Implemented with r25056. Custom assertion functions should fire an &quot;assertionFailed&quot; event on the test class with the AssertionError as the event data.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37427</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:21:47 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>