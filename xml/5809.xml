<bug>
          <bug_id>5809</bug_id>
          
          <creation_ts>2011-11-16 11:03:00 +0100</creation_ts>
          <short_desc>Dependencies as Tree Annotations</short_desc>
          <delta_ts>2014-03-03 08:46:23 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.dependencies</component>
          <version>1.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>27549</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-11-16 11:03:17 +0100</bug_when>
            <thetext>We could store dependencies with the tree. In its simplest form, a 
DependencyItem would be attached at the &#39;variable&#39; or &#39;constant&#39; node it 
derives from.

This would allow gathering the depItems of a (sub) tree directly from that tree 
afterwards. The deps could be cached with the tree. Pruning parts of a tree 
during optimization (variants, statics) would simultaneously remove the 
attached depItems. This would make it fast to calculate both the deps of the 
pruned subtree, as well as the deps of the remaining file tree.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27551</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-11-16 11:47:32 +0100</bug_when>
            <thetext>Some assertions relating to this model:

- DRY: It&#39;s better to keep tree and dependencies together, as they are 1:1 
related.

- Efficiency: Collecting dependencies of a tree by walking it is efficient 
enough to be feasible. E.g. Class.dependencies() would be collecting the 
depItems from the tree. If not dependencies() could implement an own layer of 
caching.

- Efficiency: It is enough to just cache the complete source tree with its 
depItems. Optimized trees can be calculated on the fly sufficently fast. (This 
seems like a good idea, as it would make cache handling much easier, but is not 
instrumental for the intent of this bug).

 - Correctness: As long as the tree is valid, the attached depItems are valid. 
As the symbols in the tree are unchanged, the depsItems derived from them 
remain the same. This is not changed through visibility changes (e.g. a library 
being added or removed from the build), nor ignore settings (#ignore is in the 
source anyway, but if we had an &quot;ignore&quot; config key). (This means depsItems 
must not try to on that level to split class and feature, see next list item). 
They do depend on scopes (because of sorting out scoped variables), but for any 
symbol node the scopes of the entire file is considered, and they can only 
change with the file source.

- Generality: Related to the previous one, depsItems need to be generic and 
must not try to determine class borders, like when splitting 
&quot;qx.core.Environment.get&quot; into &quot;qx.core.Environment&quot; (class) and &quot;get&quot; 
(feature), as these borders might change with libraries (There is no general 
way of telling where in &quot;a.b.c.d.e()&quot; the class determinator ends, and a 
feature with its sub-features starts, without looking up the implementation). 

- Benefit: The dependencies of subtrees are quickly calculated from the 
attached depsItems (which is required for recursive load deps analysis and 
statics optimization).

- Benefit: The dependencies of an entire file/class are quickly re-calculated 
after pruning subtrees (variants optimization, statics optimization).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35516</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:46:23 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>