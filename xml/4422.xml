<bug>
          <bug_id>4422</bug_id>
          
          <creation_ts>2010-12-06 11:44:00 +0100</creation_ts>
          <short_desc>Processing time for request handlers is counted for timeouts</short_desc>
          <delta_ts>2011-06-21 07:21:08 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io.remote</component>
          <version>1.2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>1.3.1</target_milestone>
          
          <blocked>4607</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ronald__">rspierenburg</reporter>
          <assigned_to name="Tristan Koch">tristan.koch</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>21762</commentid>
            <who name="Ronald__">rspierenburg</who>
            <bug_when>2010-12-06 11:44:54 +0100</bug_when>
            <thetext>When you call rpc.callAsync the qx.io.remote.Requestqueue that performs the request starts a timer to check if the request times out. This request also times the handlers, &#39;punishing&#39; slower clients.

The current (relevant) steps performed by the requestqueue are:

Start timeout timer
Perform request
execute handlers for this request.
Remove request from queue
Stop timer or start new task.


While a request and handlers etc are running thet are checked by a timer to see if they timed out. At the end of the _oncompleted function the current request is removed from the queue. At this time the timer might be stopped. 

I&#39;s like to have the _remove function in the _oncompleted function moved, so that the handlers that are executed are not taken into account when calculating the timeout. So my proposed execution order looks like this:

Start timeout timer
Perform request
Remove request from queue
Stop timer or start new task.
execute handlers for the request that was just performed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21784</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-12-07 08:20:37 +0100</bug_when>
            <thetext>Thanks for the report. Sounds reasonable because the timeout should check the transport, not the handler execution.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23723</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2011-03-30 18:24:47 +0200</bug_when>
            <thetext>Moved _remove() method as suggested. Stop timeout timer / start new task is triggered at the end of _remove(). Relevant unit tests still pass. Double checked that code path is executed by deliberately commenting out code.

Fixed with r26403 on trunk and r26404 on branch_1_3_x.</thetext>
          </long_desc>
      
      

    </bug>