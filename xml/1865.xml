<bug>
          <bug_id>1865</bug_id>
          
          <creation_ts>2009-01-23 22:23:00 +0100</creation_ts>
          <short_desc>Request for enhancement of form widgets</short_desc>
          <delta_ts>2009-03-17 17:01:20 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.form</component>
          <version>0.8.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>2099</dup_id>
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Roman Schmid">mailbox</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>7443</commentid>
            <who name="Roman Schmid">mailbox</who>
            <bug_when>2009-01-23 22:23:53 +0100</bug_when>
            <thetext>In order to easily handle forms, it would be very useful if all the form-widgets could be controlled using a common interface. This is especially important, when forms are generated using factory methods. Common tasks, such as serializing and restoring form values, as well as validation could be simplified/automated for all elements.

There is already such an Interface (IFormElement: http://demo.qooxdoo.org/current/apiviewer/#qx.ui.form.IFormElement) which covers already a lot of the important form-element properties. 
Namely: 
* enabled (can be used to determine if a value should be sent to the server)
* name (the name of the form element)
* value (the value that will be sent to the server)

There&#39;s another property &quot;checked&quot; which isn&#39;t covered by the interface. It is currently being used by &quot;CheckBox&quot; and &quot;ToggleButton&quot;. This property is some sort of a special case when it comes to form-elements and can&#39;t be adequately handled by using the methods provided by the IFormElement interface.

It&#39;s usually sufficient to check an element for it&#39;s enabled state to determine if it should be serialized or not. When looking at the CheckBox, one would have to check the &quot;enabled&quot; *and* the &quot;checked&quot; property.
In addition to that, all form widgets fire changeValue events on User-Input, whereas CheckBoxes don&#39;t. Actually, this behavior is correct, since the value doesn&#39;t really change, the thing that changes however is the resulting serialized form.

That being said as preliminary note, i&#39;d suggest to enhance the IFormElement interface in a way, that it covers all the important aspects necessary for successful form handling.
Sebastian Werner proposed a new property called &quot;serializable&quot;. One could check using &quot;isSerializable&quot; to determine if a form value should be considered for serialization. In case of most Form-Elements this would simply map to the &quot;enabled&quot; property. In case of a CheckBox, it would be defined by &quot;checked&quot; and/or &quot;enabled&quot;. There could be other use-cases for this property as well. One could think about a disabled form element that will still be serialized (for example if the user-input should be prevented, but the value should still be sent to the server). Introducing this new property would facilitate such a task.

Other than that, we could also introduce an event called &quot;serializeResultChange&quot; which will be fired whenever the serialization &quot;result&quot; changes. Eg. if a checkbox is being checked, the serialization output *will* change and therefore this event should be fired. Same goes for regular user-input. Separating the value and the serialization-result can have some benefits for current and future form-elements. Mostly value and serialization-result will map to the same value though.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8674</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-03-17 17:01:20 +0100</bug_when>
            <thetext>

*** This bug has been marked as a duplicate of bug 2099 ***</thetext>
          </long_desc>
      
      

    </bug>