<bug>
          <bug_id>1361</bug_id>
          
          <creation_ts>2008-09-02 16:11:00 +0200</creation_ts>
          <short_desc>SW knowledge transfer: Improve cache invalidation</short_desc>
          <delta_ts>2014-03-03 15:26:02 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>0.8.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>4997</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-09-02 16:11:39 +0200</bug_when>
            <thetext>The cache handler of the generator often misses dirty items in the cache, using the cached version instead of re-generating it. We have too many situations where a result is wrong because a cached version has been used during the build, and the cure is too often &quot;Delete the cache!&quot;. While it is not always easy to detect that a cached item is dirty, it is necessary to take a defensive approach and re-generate in the face of uncertainty.

Sebastian, could you please add your brain dump on this?!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5039</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-09-03 13:36:58 +0200</bug_when>
            <thetext>Sebastian&#39;s take on this is that the cache mgr is basically correct, so there is no issue with cache invalidation :-).

- All cache objects are linked to file system object(s), even complex ones like the multi-deps objects. So there is essentially always a time-stamped object to compare the cache object with. 
- (I&#39;m not so sure about this one, I faintly remember putting data structures into the cache which lack a file reference. Have to check this).
- Issues can arise when e.g. unpacking a new SDK and using an existing cache: Since SDK files have timestamps from the packaging stage, such a time stamp might be older than the corresponding cache object, although the file&#39;s contents is newer. So it is simply a bad idea to use old caches with newly installed SDKs. Alternatively, we could change the zip settings so that time stamps are not carried over to the user machine, but rather the time of unpacking the zip is used to time stamp the SDK files.
- Another possible cause of trouble are classes that reference other classes which haven&#39;t been written yet (which could be considered bad practice). The cure is to write the referenced class and to &quot;touch&quot; (update time stamp) the referencing class, so its cache object will be updated.
- In case of a problem, this should be further analyzed, rather than wiping the whole cache. It is probably more efficient to selectively &quot;touch&quot; files on disk, or delete single cache objects (like a multi-deps object).
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38966</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:26:02 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>