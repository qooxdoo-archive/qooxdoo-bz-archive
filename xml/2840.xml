<bug>
          <bug_id>2840</bug_id>
          
          <creation_ts>2009-09-24 14:40:00 +0200</creation_ts>
          <short_desc>Compress qx.$$resources</short_desc>
          <delta_ts>2014-03-03 08:47:57 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          <keywords>Performance</keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>dev</cc>
    
    <cc>gradinf</cc>
    
    <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>12605</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-09-24 14:40:31 +0200</bug_when>
            <thetext>In a generated application, the loader part (usually part of the boot package) 
contains the qx.$$resources map that represents resources like images, css 
files, etc. to the run time. In large applications this can become rather 
large, adding to the tranfer and load time of the loader in the browser. 

As an interim solution and in default of bug#2129, and more general than 
bug#2115, attempts should be made to reduce the size of this data structure 
(e.g. by factoring out common string components).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12632</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-09-24 18:52:13 +0200</bug_when>
            <thetext>May one could use some kind of self-expension here? Do you know the packer by Dean Edwards? This is nothing for a large application but could work wonders here because of so-many self-repeating strings:

http://dean.edwards.name/packer/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12637</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-09-24 23:06:22 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; May one could use some kind of self-expension here? Do you know the packer by 
Dean Edwards? This is nothing for a large application but could work wonders 
here because of so-many self-repeating strings:

Sounds good, I&#39;ll have a look.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12786</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-10-01 13:33:07 +0200</bug_when>
            <thetext>to Thomas</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13064</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-10-12 11:39:09 +0200</bug_when>
            <thetext>down prio</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14817</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:26:47 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15008</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-27 10:42:12 +0100</bug_when>
            <thetext>to 1.0.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16527</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 16:31:11 +0100</bug_when>
            <thetext>moved to target 1.0.2</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17434</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-03-22 12:38:20 +0100</bug_when>
            <thetext>-&gt; Daniel</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17808</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-04-15 19:08:29 +0200</bug_when>
            <thetext>Carsten&#39;s and Tino&#39;s suggestions:

 * Shorten map keys from the end

Rather than having the key 
&quot;qx/decoration/Modern/arrows/arrow_left.png&quot; 
use 
&quot;arrow_left.png&quot;
if this is unique. If not use 
&quot;arrows/arrow_left.png&quot;
and so forth. This would require the same heuristics for the lookup at runtime: 
The ResourceManager would have to shorten the requested resource id from the 
end and try as many lookups until it gets a unique answer.


 * Put image types and name spaces names into lookup tables

Rather
&quot;mail_ww_headline_en.gif&quot;: [260, 34, &quot;gif&quot;, &quot;myapp&quot;]
use
&quot;mail_ww_headline_en.gif&quot;: [260, 34, 2, 0]

with lookup tables for image types and name spaces
types=[&quot;png&quot;, &quot;bmp&quot;, &quot;gif&quot;]
libs=[&quot;myapp&quot;, &quot;foo&quot;, &quot;qx&quot;]

The ResourceManager would need to make the necessary lookups at run time.


 * Put image dimensions into lookup tables

Rather than
&quot;mail_ww_headline_en.gif&quot;: [260, 34, 2, 0]
use
&quot;mail_ww_headline_en.gif&quot;: [3 , 2, 0]

with a lookup table
dimensions=[[16,16], [22, 22], [260, 34],....]

Again, the ResourceManager has to do the lookup at run time. The benefit in 
space will only show when you have multiple images with same dimensions.


 * Replace resource id&#39;s in the JS source with short id&#39;s

Rather than
&quot;qx/decoration/Modern/arrows/arrow_left.png&quot;
use
$$[34243]

NB: You would still need some lookup table short id -&gt; resource id, as you need 
the resource id eventually to find the image on disk.


 * Run the sting optimization over it

Common strings and string parts could be extracted into variables and the 
variables be used in the resource map.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18015</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-04-26 16:39:34 +0200</bug_when>
            <thetext>As a first step, the resources map can now be generated as a nested tree so that each &quot;directory&quot; component of a resource ID only occurs once. This saves around 20% in character length. Savings are much smaller after gZipping the loader script, of course.
The resource manager must use a hierarchical lookup which still requires testing (performance and behavior compared to the current implementation). Moved to 1.2.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18030</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2010-04-26 21:01:50 +0200</bug_when>
            <thetext>I have a fixed feeling about these changes. GZip is pretty good at compressing repeating strings, and even in mobile apps which are loading all files from disk (a couldn&#39;t benefit of gzip at all) a fast lookup is really the issue with the highest priority. Space savings are nice, but in our apps performance is much more interesting. (I strongly hope that there will be an option to force the old behavior).

In my experience with all these mobile platforms I am currently developing for, I can really say, that you can easily underestimate such an issue (I did this a few times as well here). We have partly measured 2-3ms performance decrease on desktop which results into 200ms on mobile clients. There are no small impacts when dealing with mobile and as such a feature is that deeply in the core of qooxdoo it might be a good idea to have all possible platforms on the radar.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18031</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2010-04-26 21:06:24 +0200</bug_when>
            <thetext>Part of the problem is here that the incoming value to resolve is always quite long as it is the app-developer given path of the image. If you don&#39;t make this available with an easy to resolve hash lookup than you loose performance. Quite simple. All other stuff requires some kind of string operations which are quite slow and memory intensive.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19447</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-07-27 17:28:22 +0200</bug_when>
            <thetext>I ran some tests on the framework apps that showed pretty significant space savings, but as Sebastian said the difference after GZipping is very small. Could still be worth it for applications with huge amounts of resources, especially combined with some of the other suggestions. I&#39;ll look into those after the 1.2 release and run performance comparisons on the resource manager as well. Of course application developers will be able to (de)activate these optimizations through the config.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22289</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-01-17 11:51:29 +0100</bug_when>
            <thetext>*** Bug 4117 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23834</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-04-05 08:04:19 +0200</bug_when>
            <thetext>Do we really still want / need that feature?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23839</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2011-04-05 09:03:37 +0200</bug_when>
            <thetext>Oh yes, we do for our apps! THere is a significant difference.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36087</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:57 +0100</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>