<bug>
          <bug_id>1139</bug_id>
          
          <creation_ts>2008-08-05 12:37:00 +0200</creation_ts>
          <short_desc>config.json feature: make macros available from included config files</short_desc>
          <delta_ts>2014-03-03 08:47:19 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>4173</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-08-05 12:37:22 +0200</bug_when>
            <thetext>The goal is to have macro definitions that are defined in &#39;lower-level&#39; config files (like e.g. application.json) available in &#39;higher-level&#39; config files that include those others.

Currently, the only way to make use of lower-level macro definitions in a locally defined job is by &#39;extend&#39;ing a lower-level job that includes these macro definitions. If the local job does not extend the external job, it will never see the macro definition.

Through the introduction of (config-) global &#39;let&#39; keys, there are already macro definitions that are independent of any specific job. But these global &#39;let&#39;s are confined to their config, and their settings can again only be exported through jobs.

One approach might be to implement an extension strategy for global lets, so that the local top-level let is automatically extended through import if the imported config also features a top-level let.

Another possibility would be to add another top-level key like &#39;let-global&#39; that will have this behaviour so that the original top-level let will retain it&#39;s local semantics.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4524</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-08-21 09:37:47 +0200</bug_when>
            <thetext>to 0.8.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5381</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2008-09-07 00:43:52 +0200</bug_when>
            <thetext>As enhancement</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35863</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:19 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>