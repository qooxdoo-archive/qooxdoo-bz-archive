<bug>
          <bug_id>1961</bug_id>
          
          <creation_ts>2009-02-17 12:37:00 +0100</creation_ts>
          <short_desc>New variableoptimizer increases built-size compared to old tool chain</short_desc>
          <delta_ts>2014-03-03 15:19:53 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>0.8.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Werner">info</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>7816</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-17 12:37:41 +0100</bug_when>
            <thetext>The current variable optimizer uses a counter which seems never to be resetted. Currently even small packages result into variable names with 3 characters. Even four have been seen in larger packages. That&#39;s a huge increase compared to the typical 1 character used by the old implementation. Finally the implementation should help to reduce the size, that&#39;s the major idea of the whole script.

Maybe fixed through some reset of the counter after every closing function.

Tested with revision 17878 in trunk.

Feedreader old script: 604099
Feedreader new script: 640938

About six percent size increase!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7827</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-02-17 14:25:38 +0100</bug_when>
            <thetext>to Thomas</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7829</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-17 14:44:40 +0100</bug_when>
            <thetext>To post-0.8.2.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7831</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-17 14:55:41 +0100</bug_when>
            <thetext>As mentioned this is fundamental worse than the implementation of 0.8.1 It should even be discussed, in my opinion, if its worth to fix the bugs of this version, which were quite rare, with the current size increase of at least 6 percent (and more in larger applications).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7840</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-02-17 16:21:22 +0100</bug_when>
            <thetext>It is currently being evaluated if improving the current optimization back to the compression level of the previous versions can make it into the release schedule. 

Without a doubt, we are determined to have both features improved: being fail-safe(r) at a high(er) compression rate. I&#39;ll definitely put that task back to the 0.8.2 target milestone, potentially postponing it only as a last resort in case schedule can&#39;t be met.

On an additional note, even if it&#39;s not a real cure for the current deterioration of the private optimization: as large applications are affected the most, gzipping the resulting JS code as recommended may mitigate the impact (temporarily).
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7842</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-17 16:25:38 +0100</bug_when>
            <thetext>We normally can reuse variables even in a closure like this:

(function()
{
  var test;

  function foo() {
   var elem;
  }

  function bar() {
   var doc;
  }
})();

which is perfectly OK to being translated into:

(function()
{
  var a;

  function foo() {
   var b;
  }

  function bar() {
   var b;
  }
})();

Not sure how to implement it though :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7882</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-18 09:55:09 +0100</bug_when>
            <thetext>What&#39;s about resetting the counter with every call of the search() method. Could be a pragmatic solution for fixing the major size increase as with every class the counter is resetted. What do you think?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7913</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-18 14:28:07 +0100</bug_when>
            <thetext>In with r17915 - works like a charm :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7914</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-18 14:35:42 +0100</bug_when>
            <thetext>Current feedreader is down to: 598661. Not sure about why it&#39;s better than the old engine or if some other code has changed until then. 

Maybe it&#39;s a good idea to close this bug and open another one for tracking ideas for further optimizations?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7915</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-18 14:44:53 +0100</bug_when>
            <thetext>Sure, go ahead.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7919</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-18 15:17:55 +0100</bug_when>
            <thetext>Regarding this as FIXED with the latest changes.

Further enhancements are planned in bug #1965.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36670</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:53 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>