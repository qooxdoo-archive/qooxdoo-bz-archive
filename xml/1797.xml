<bug>
          <bug_id>1797</bug_id>
          
          <creation_ts>2008-12-18 11:02:00 +0100</creation_ts>
          <short_desc>Add disposed check to qx.lang.Function.bind</short_desc>
          <delta_ts>2014-03-03 15:26:52 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tino Butz">tinobutz</reporter>
          <assigned_to name="Fabian Jakobs">fabian.jakobs</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>7155</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2008-12-18 11:02:32 +0100</bug_when>
            <thetext>The function qx.lang.Function.bind should check, if the scope/context of the function is wraps is a qooxdoo object and if so, it should check if this object is disposed. If the object is disposed it shouldn&#39;t call its function and throw an error &quot;object already disposed&quot;. 

Scenario the current behaviour might be a problem: Bound function is called by an timeout after the object is disposed. Error will be something strange like &quot;this._foo is null&quot;. Might help developers to determine the real problem better.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7156</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2008-12-18 11:05:09 +0100</bug_when>
            <thetext>Please add this functionality to 0.7.x as well</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7157</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2008-12-18 11:18:54 +0100</bug_when>
            <thetext>For discussion: What would happen if we wouldn&#39;t throw an error if the object is disposed and just do not call the function (and ignore this silently)? Would this just cover a theoretical bug and prevent to find it or would be the behaviour, not to call the function when the object is disposed, the right one and expected one. Is there any situation i would want a function to be called, when its object is disposed?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7922</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-02-18 15:44:16 +0100</bug_when>
            <thetext>There might not be a solution that fits all situations. In general I&#39;m in favor of explicit warnings  cmp. to handling potential issues silently. Why not check for the dispose state of the instance and generate a warning? @Fabian, any suggestions on this one?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8259</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-03-04 11:19:35 +0100</bug_when>
            <thetext>to 0.8.3</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8984</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-03-27 14:55:36 +0100</bug_when>
            <thetext>I would add an assertion, which throws an assertion error if the object is disposed. If the context is disposed it is certainly a bug and should not be hidden.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9001</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-03-30 14:09:24 +0200</bug_when>
            <thetext>i&#39;ve added this assertion in rev. 18595</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39260</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:26:52 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>