<bug>
          <bug_id>5030</bug_id>
          
          <creation_ts>2011-04-15 15:49:00 +0200</creation_ts>
          <short_desc>qx.type.Array#append fails for BaseArray, add qx.type.Array#prepend</short_desc>
          <delta_ts>2012-01-24 08:13:23 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>1.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Malte S. Stretz">qooxdoo-bugs</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>24071</commentid>
            <who name="Malte S. Stretz">qooxdoo-bugs</who>
            <bug_when>2011-04-15 15:49:19 +0200</bug_when>
            <thetext>Looks like bug 4488 didn&#39;t fix the problem completely; at least in Chromium 10.0.648.133 Array.append still fails if the method parameter is a BaseArray.

I&#39;ll attach a patch (including tests) which fixes this.

It will also contain an addition to the Array API:  qx.type.Array.prepend which I was missing for my app.  Sorry that I didn&#39;t split the patch but I found the bug while I added the feature and currently don&#39;t have the time to split.

You can find the big patch broken down to three commits at &lt;https://github.com/mss/qooxdoo/compare/array-prepend-append&gt;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24072</commentid>
              <attachid>970</attachid>
            <who name="Malte S. Stretz">qooxdoo-bugs</who>
            <bug_when>2011-04-15 15:50:08 +0200</bug_when>
            <thetext>Created attachment 970
The announced patch.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24093</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-04-18 09:28:29 +0200</bug_when>
            <thetext>Thanks for the report and the patch. :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28082</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-12-21 11:57:49 +0100</bug_when>
            <thetext>I could not reproduce the error you described with the current dev chrome (17) on OSX. But still, added the new check because I don&#39;t see a reason why we should restrict that to a Array and not to the base array.

Also added the prepend method and your unit test. Thanks for the good quality patch!

master: 9b61d695fdb6bcca8e970f652aacdc98c60dde49</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="1" isprivate="0" isurl="0">
            <attachid>970</attachid>
            <date>2011-04-15 15:50:00 +0200</date>
            <delta_ts>2011-04-15 15:50:08 +0200</delta_ts>
            <desc>The announced patch.</desc>
            <filename>qooxdoo-1.4-array-prepend-append.patch</filename>
            <type>text/plain</type>
            <size>3739</size>
            <attacher>qooxdoo-bugs</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL3Fvb3hkb28vZnJhbWV3b3JrL3NvdXJjZS9jbGFzcy9xeC90ZXN0L3R5cGUv
QXJyYXkuanMgYi9xb294ZG9vL2ZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvdGVzdC90eXBlL0Fy
cmF5LmpzCmluZGV4IDAwZGMzM2YuLmQxY2ViN2EgMTAwNjQ0Ci0tLSBhL3Fvb3hkb28vZnJhbWV3
b3JrL3NvdXJjZS9jbGFzcy9xeC90ZXN0L3R5cGUvQXJyYXkuanMKKysrIGIvcW9veGRvby9mcmFt
ZXdvcmsvc291cmNlL2NsYXNzL3F4L3Rlc3QvdHlwZS9BcnJheS5qcwpAQCAtMjYsMjMgKzI2LDUw
IEBAIHF4LkNsYXNzLmRlZmluZSgicXgudGVzdC50eXBlLkFycmF5IiwKIAogICAgIHNldFVwIDog
ZnVuY3Rpb24oKQogICAgIHsKLSAgICAgIHRoaXMuX19hcnIgPSBuZXcgcXgudHlwZS5BcnJheSgp
OworICAgICAgdGhpcy5fX2FyciA9IG5ldyBxeC50eXBlLkFycmF5KCJ4Iik7CisgICAgfSwKKwor
ICAgIHRlc3RDb25zdHJ1Y3QgOiBmdW5jdGlvbigpIHsKKyAgICAgIHRoaXMuYXNzZXJ0RXF1YWxz
KHRoaXMuX19hcnJbMF0sICJ4Iik7CiAgICAgfSwKIAogICAgIHRlc3RBcHBlbmQgOiBmdW5jdGlv
bigpIHsKICAgICAgIC8vIG5hdGl2ZSBhcnJheQogICAgICAgdGhpcy5fX2Fyci5hcHBlbmQoWzEs
IDJdKTsKKyAgICAgIHRoaXMuYXNzZXJ0RXF1YWxzKHRoaXMuX19hcnJbMV0sIDEpOworICAgICAg
dGhpcy5hc3NlcnRFcXVhbHModGhpcy5fX2FyclsyXSwgMik7CisKKyAgICAgIC8vIHR5cGUgYXJy
YXkKKyAgICAgIHZhciBhID0gbmV3IHF4LnR5cGUuQXJyYXkoMywgNCk7CisgICAgICB0aGlzLl9f
YXJyLmFwcGVuZChhKTsKKyAgICAgIHRoaXMuYXNzZXJ0RXF1YWxzKHRoaXMuX19hcnJbM10sIDMp
OworICAgICAgdGhpcy5hc3NlcnRFcXVhbHModGhpcy5fX2Fycls0XSwgNCk7CisKKyAgICAgIC8v
IHR5cGUgYmFzZSBhcnJheQorICAgICAgdmFyIGIgPSBuZXcgcXgudHlwZS5CYXNlQXJyYXkoNSwg
Nik7CisgICAgICB0aGlzLl9fYXJyLmFwcGVuZChiKTsKKyAgICAgIHRoaXMuYXNzZXJ0RXF1YWxz
KHRoaXMuX19hcnJbNV0sIDUpOworICAgICAgdGhpcy5hc3NlcnRFcXVhbHModGhpcy5fX2Fycls2
XSwgNik7CisKKyAgICB9LAorCisgICAgdGVzdFByZXBlbmQgOiBmdW5jdGlvbigpIHsKKyAgICAg
IC8vIG5hdGl2ZSBhcnJheQorICAgICAgdGhpcy5fX2Fyci5wcmVwZW5kKFsxLCAyXSk7CiAgICAg
ICB0aGlzLmFzc2VydEVxdWFscyh0aGlzLl9fYXJyWzBdLCAxKTsKICAgICAgIHRoaXMuYXNzZXJ0
RXF1YWxzKHRoaXMuX19hcnJbMV0sIDIpOwogCiAgICAgICAvLyB0eXBlIGFycmF5Ci0gICAgICB2
YXIgYSA9IG5ldyBxeC50eXBlLkFycmF5KCk7Ci0gICAgICBhLnB1c2goMyk7Ci0gICAgICBhLnB1
c2goNCk7CisgICAgICB2YXIgYSA9IG5ldyBxeC50eXBlLkFycmF5KDMsIDQpOworICAgICAgdGhp
cy5fX2Fyci5wcmVwZW5kKGEpOworICAgICAgdGhpcy5hc3NlcnRFcXVhbHModGhpcy5fX2Fyclsw
XSwgMyk7CisgICAgICB0aGlzLmFzc2VydEVxdWFscyh0aGlzLl9fYXJyWzFdLCA0KTsKIAotICAg
ICAgdGhpcy5fX2Fyci5hcHBlbmQoYSk7Ci0gICAgICB0aGlzLmFzc2VydEpzb25FcXVhbHModGhp
cy5fX2FyclsyXSwgMyk7Ci0gICAgICB0aGlzLmFzc2VydEpzb25FcXVhbHModGhpcy5fX2Fyclsz
XSwgNCk7CisgICAgICAvLyB0eXBlIGJhc2UgYXJyYXkKKyAgICAgIHZhciBiID0gbmV3IHF4LnR5
cGUuQmFzZUFycmF5KDUsIDYpOworICAgICAgdGhpcy5fX2Fyci5wcmVwZW5kKGIpOworICAgICAg
dGhpcy5hc3NlcnRFcXVhbHModGhpcy5fX2FyclswXSwgNSk7CisgICAgICB0aGlzLmFzc2VydEVx
dWFscyh0aGlzLl9fYXJyWzFdLCA2KTsKICAgICB9CiAgIH0KIH0pOwpkaWZmIC0tZ2l0IGEvcW9v
eGRvby9mcmFtZXdvcmsvc291cmNlL2NsYXNzL3F4L3R5cGUvQXJyYXkuanMgYi9xb294ZG9vL2Zy
YW1ld29yay9zb3VyY2UvY2xhc3MvcXgvdHlwZS9BcnJheS5qcwppbmRleCA5YWI0ZWZlLi42YWVj
NzZlIDEwMDY0NAotLS0gYS9xb294ZG9vL2ZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvdHlwZS9B
cnJheS5qcworKysgYi9xb294ZG9vL2ZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvdHlwZS9BcnJh
eS5qcwpAQCAtMTM0LDggKzEzNCwxMCBAQCBxeC5DbGFzcy5kZWZpbmUoInF4LnR5cGUuQXJyYXki
LAogICAgICAgfQogCiAgICAgICB2YXIgYXJnID0gYXJyOwotICAgICAgLy8gcHVzaCBuZWVkcyBh
IHBsYWluIGFycmF5IGFzIGFyZ3VtZW50cyBsaXN0IFtCVUcgIzQ0ODhdCi0gICAgICBpZiAoYXJy
IGluc3RhbmNlb2YgcXgudHlwZS5BcnJheSkgeworICAgICAgLy8gYXBwbHkgbmVlZHMgYSBwbGFp
biBhcnJheSBhcyBhcmd1bWVudHMgbGlzdCBbQlVHICM0NDg4XTsgdGVzdGluZyAKKyAgICAgIC8v
IHNob3dzIHRoYXQgd2hpbGUgRmlyZWZveCA0IGFjY2VwdHMgYSBCYXNlQXJyYXksIGF0IGxlYXN0
IENocm9tZSAxMCAKKyAgICAgIC8vIGRvZXNuJ3QuICBUaGlzIGNvdWxkIHByb2JhYmx5IGJlIG9w
dGltaXplZCB3aXRoIGEgdHJ5Li4uY2F0Y2gKKyAgICAgIGlmIChhcnIgaW5zdGFuY2VvZiBxeC50
eXBlLkJhc2VBcnJheSkgewogICAgICAgICBhcmcgPSBbXTsKICAgICAgICAgZm9yICh2YXIgaT0w
OyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgYXJnW2ldID0gYXJyW2ldOwpAQCAt
MTQ1LDYgKzE0NywzNSBAQCBxeC5DbGFzcy5kZWZpbmUoInF4LnR5cGUuQXJyYXkiLAogICAgICAg
QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcywgYXJnKTsKICAgICAgIHJldHVybiB0aGlz
OwogICAgIH0sCisgICAgCisgICAgCisgICAgLyoqCisgICAgICogUHJlcGVuZCB0aGUgZWxlbWVu
dHMgb2YgdGhlIGdpdmVuIGFycmF5CisgICAgICoKKyAgICAgKiBAcGFyYW0gYXJyIHtBcnJheX0g
dGhlIGVsZW1lbnRzIG9mIHRoaXMgYXJyYXkgd2lsbCBiZSBwcmVwZW5kZWQgdG8gb3RoZXIgb25l
CisgICAgICogQHJldHVybiB7QXJyYXl9IFRoZSBtb2RpZmllZCBhcnJheS4KKyAgICAgKiBAdGhy
b3dzIGFuIGV4Y2VwdGlvbiBpZiBvbmUgb2YgdGhlIGFyZ3VtZW50cyBpcyBub3QgYW4gYXJyYXkK
KyAgICAgKi8KKyAgICBwcmVwZW5kIDogZnVuY3Rpb24oYXJyKQorICAgIHsKKyAgICAgIC8vIHRo
aXMgY2hlY2sgaXMgaW1wb3J0YW50IGJlY2F1c2UgT3BlcmEgdGhyb3dzIGFuIHVuY2F0Y2hhYmxl
IGVycm9yIGlmCisgICAgICAvLyBhcHBseSBpcyBjYWxsZWQgd2l0aG91dCBhbiBhcnIgYXMgc2Vj
b25kIGFyZ3VtZW50LgorICAgICAgaWYgKHF4LmNvcmUuRW52aXJvbm1lbnQuZ2V0KCJxeC5kZWJ1
ZyIpKSB7CisgICAgICAgIHF4LmNvcmUuQXNzZXJ0LmFzc2VydEFycmF5KGFyciwgIlRoZSBwYXJh
bWV0ZXIgbXVzdCBiZSBhbiBhcnJheS4iKTsKKyAgICAgIH0KKworICAgICAgdmFyIGFyZyA9IGFy
cjsKKyAgICAgIC8vIGNvbmNhdCBuZWVkcyBhIHBsYWluIGFycmF5IGFzIGFyZ3VtZW50CisgICAg
ICBpZiAoYXJyIGluc3RhbmNlb2YgcXgudHlwZS5CYXNlQXJyYXkpIHsKKyAgICAgICAgYXJnID0g
W107CisgICAgICAgIGZvciAodmFyIGk9MDsgaSA8IGFyci5sZW5ndGg7IGkrKykgeworICAgICAg
ICAgIGFyZ1tpXSA9IGFycltpXTsKKyAgICAgICAgfTsKKyAgICAgIH0KKworICAgICAgQXJyYXku
cHJvdG90eXBlLnNwbGljZS5hcHBseSh0aGlzLCBbMCwgMF0uY29uY2F0KGFyZykpOworICAgICAg
cmV0dXJuIHRoaXM7CisgICAgfSwKIAogCiAgICAgLyoqCg==
</data>

          </attachment>
      

    </bug>