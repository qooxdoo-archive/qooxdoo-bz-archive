<bug>
          <bug_id>5466</bug_id>
          
          <creation_ts>2011-08-01 11:10:00 +0200</creation_ts>
          <short_desc>Make compile-options/code/optimize a Map</short_desc>
          <delta_ts>2014-03-03 08:47:00 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.config</component>
          <version>1.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>26333</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-08-01 11:10:55 +0200</bug_when>
            <thetext>Currently, compile-options/code/optimize is an array. But it cannot take 
arbitrary values. Rather, it is actually an enumeration type where all 
potential values come from a fixed set (ie. &quot;variables&quot;, &quot;variants&quot;, 
&quot;basecalls&quot;, &quot;privates&quot;, &quot;strings&quot;). This might be better modelled as a map 
where the keys are the current values, and the values are simply true/false:

  &quot;optimize&quot; : {
      &quot;variants&quot; : false,
      &quot;variables&quot; : true,
      &quot;basecalls&quot; : true,
      &quot;private&quot; : false,
      &quot;strings&quot; : true
   }

(This idea stems from John Spackman in bug#5459).

base.json would continue to set all keys to true. It would be easier and more 
explicit to turn off a specific optimization by setting it to false. This would 
never be overwritten, and it would be easier to control,  instead of just 
leaving the keyword away from the list (as is the currently the case). Many 
people are surprised that the keyword is merged in from base.json nevertheless, 
and they have to use &quot;=optimize&quot; to prevent this.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26362</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-08-02 09:04:09 +0200</bug_when>
            <thetext>Agree. But we should keep migration steps in mind and see how we can get that deprecated.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35744</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:00 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>