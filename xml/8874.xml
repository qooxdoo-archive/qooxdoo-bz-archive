<bug>
          <bug_id>8874</bug_id>
          
          <creation_ts>2015-01-20 20:41:00 +0100</creation_ts>
          <short_desc>Support authenticated cross-origin XHR</short_desc>
          <delta_ts>2015-01-26 18:14:30 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Schmidt">c4145780</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>richard.sternagel</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>42236</commentid>
            <who name="Martin Schmidt">c4145780</who>
            <bug_when>2015-01-20 20:41:47 +0100</bug_when>
            <thetext>qooxdoo&#39;s qx.data.store.Json, when used for cross-origin requests, won&#39;t send any cookies or authentication data. This is the default behavior for XMLHttpRequest, which can be controlled with XMLHttpRequest#withCredentials property.

This requirement is not as uncommon as it may seem. Imagine a typical developer&#39;s setup: a JavaEE backend running on localhost:8080, and qooxdoo application served by &quot;source-server&quot; generator task or IDE&#39;s built-in web server at, say, localhost:8181.

After successful authentication, a JSESSIONID cookie will be set for localhost. For XHR (localhost:8181 -&gt; localhost:8080) to succeed, this cookie should be sent along with the request.

As a user mentioned on StackOverflow [1], the problem can be solved with the help of store delegate. But this can become cumbersome if we have dozens of qx.data.store.Json invocations across application. With above, it would be very nice to have an ability to turn XMLHttpRequest#withCredentials on for the whole application, or maybe based on URL pattern.

[1] http://stackoverflow.com/questions/28045033/authenticated-cross-origin-xhr-with-qooxdoo</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42242</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2015-01-21 09:45:20 +0100</bug_when>
            <thetext>Thanks for the report. Will check that and see if changing the default is a good idea.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42293</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2015-01-26 18:14:30 +0100</bug_when>
            <thetext>We could add the method &quot;setWithCredentials()&quot; to the public API of &quot;qx.io.request.Xhr&quot;. But currently this wouldn&#39;t help, because there is no way to inject this request to &quot;qx.data.store.Json&quot;.

So, if using a delegate doesn&#39;t fit then just write your own implementation of &quot;qx.data.store.Json&quot; (as saaj pointed out at StackOverflow). This is currently the easiest way. You could also extend our store and overwrite just some of the methods.</thetext>
          </long_desc>
      
      

    </bug>