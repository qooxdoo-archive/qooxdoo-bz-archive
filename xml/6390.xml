<bug>
          <bug_id>6390</bug_id>
          
          <creation_ts>2012-05-09 09:56:00 +0200</creation_ts>
          <short_desc>qx.data.Array::unshift() produces incorrect changeBubble event</short_desc>
          <delta_ts>2012-10-01 14:14:32 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.databinding</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>2.0.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Boulanger">info</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>29371</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2012-05-09 09:56:28 +0200</bug_when>
            <thetext>qx.data.Array::unshift() contains this code for firing a bubble event

        // fire change bubbles event 
        this.fireDataEvent(&quot;changeBubble&quot;, { 
          value: [this.__array[0]], 
          name: &quot;0&quot;, 
          old: [this.__array[1]], 
          item: this 
        }); 

 the &quot;old&quot; property contains the second array item, which seems incorrect.

 The corresponding push() method does this: 

        // fire change bubbles event 
        this.fireDataEvent(&quot;changeBubble&quot;, { 
          value: [arguments[i]], 
          name: (this.length - 1) + &quot;&quot;, 
          old: [], 
          item: this 
        }); 

&quot;old&quot; contains an empty array. This makes much more sense, since push(), just like unshift() doesn&#39;t delete anything. 

See http://qooxdoo.678.n2.nabble.com/databinding-changeBubble-event-details-td7540785.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30509</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-08-28 10:11:56 +0200</bug_when>
            <thetext>After checking that problem in detail, I think the current behavior is correct. The &#39;old&#39; data contains always the data, which has been in the spot where the change happened. Thats why its called &#39;old&#39; and not &#39;removed&#39; or something similar.
So in the case of &#39;push&#39;, its quite clear that the array needs to be empty because the new item is appended to the end of the list where nothing has been before.
In the case of &#39;unshift&#39;, the old item is the one next to the new item because the new item will take the first place in the array. So the second place will be the item which has been in the first place before the unshift.

The current API doc describes the old data as:
old: The old value of the property.
Which is in the case of an array the index so it means the old value should be the data at that index before the action took place.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30520</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2012-08-28 21:21:27 +0200</bug_when>
            <thetext>(In reply to comment #1)

Ok, makes sense. Thanks for the explanation.</thetext>
          </long_desc>
      
      

    </bug>