<bug>
          <bug_id>5679</bug_id>
          
          <creation_ts>2011-10-05 10:07:00 +0200</creation_ts>
          <short_desc>Add generator &quot;watch for changes&quot; jobs / incremental build</short_desc>
          <delta_ts>2014-03-03 15:20:38 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.0</target_milestone>
          
          
          <votes>1</votes>
          <everconfirmed>1</everconfirmed>
          <reporter name="Tino Butz">tinobutz</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>christopher.zuendorf</cc>
    
    <cc>qooxdoo</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>27101</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-10-05 10:07:42 +0200</bug_when>
            <thetext>For a better developer / IDE integration support we should introduce a generator.py watch-source / watch-build job. 

These jobs will watch all project related files and check edited classes for changes and will, when needed, rebuild the source/build version automatically. Best case scenario would be, if only the effected classes would be considered in the build.

When the developer would call the index.html file in the browser and the build is not ready yet, a waiting message should be shown, e.g. &quot;Still building the Project. File will reload automatically when done.&quot; (reload can be done by long polling on a lock file/ or writing a &quot;lock&quot; variable in the index.html / or websockets, e.g. with socket.io).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30446</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-08-21 15:38:16 +0200</bug_when>
            <thetext>Additionally, if we can check check on every file for changed dependencies, we might not need to build at all, at least for the source version. Don&#39;t know if its a good idea to have it for the build version at all.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31295</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-11-08 16:16:12 +0100</bug_when>
            <thetext>Further use cases are Less-to-Css compilation, and running the Sphinx command on changed .rst files.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31296</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2012-11-08 16:25:23 +0100</bug_when>
            <thetext>Here&#39;s some input that might be helpful when addressing this task: while not
dealing with (re-)building a qooxdoo app, at least the automatic
browser-reloading of an app is nicely handled by &quot;livereload&quot;. As such, it could be a good starting point to enhance its existing functionality.

The local &quot;server&quot; is available as a Python implementation
(https://github.com/lepture/python-livereload). For instance, start
&quot;livereload&quot; from the shell in the source/ folder of a qooxdoo app.

The browser-side part could simply be an included JS file, e.g. in the
index.html add to the head section:
  &lt;script src=&quot;http://localhost:35729/livereload.js&quot;&gt;&lt;/script&gt;

Now every time a file within the source/ tree changes, the browser gets
reloaded automatically. Works nicely for rapid prototyping, at least when no
rebuilding is required.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31298</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-11-08 16:53:53 +0100</bug_when>
            <thetext>Possible generator config key:

    &quot;file-watch&quot; : {
      &quot;shell&quot; : &quot;lessc %{f} &gt; css/%{f.b}.css&quot;  // shell command arguments!!!
      ,&quot;root-path&quot; : &quot;./source/class&quot;          // dir or file to watch, dir is 
recursive
      ,&quot;include&quot; : [&quot;*.js&quot;, &quot;*.json&quot;]                // file globs, default 
[&#39;*&#39;] for all
      ,&quot;exclude&quot; : [&quot;__init__*.js&quot;]                 // file globs, default [] 
for none
      ,&quot;check-interval&quot; : 2                           // secs. for polling, 
2secs as default
    }</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31587</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-12-03 14:47:44 +0100</bug_when>
            <thetext>first implementation commited, using polling

open issue: add &#39;watch&#39; job to skeletons</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31589</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-12-03 14:51:58 +0100</bug_when>
            <thetext>master: 64e9450</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31745</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-12-14 16:25:09 +0100</bug_when>
            <thetext>There is an implementation for file watching, controlled by the &#39;watch-files&#39; 
configuration key. It has been applied to skeletons&#39; .js files and manual&#39;s 
.rst files.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36972</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:20:38 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>