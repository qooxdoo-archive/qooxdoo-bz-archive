<bug>
          <bug_id>8607</bug_id>
          
          <creation_ts>2014-10-02 09:15:00 +0200</creation_ts>
          <short_desc>Refactor selection handling in the next branch</short_desc>
          <delta_ts>2014-11-21 16:43:42 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>next</product>
          <component>ui</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>41302</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-10-02 09:15:09 +0200</bug_when>
            <thetext>The current selection handling in the next branch can be found in two widgets. The first and most obvious widget is the list which only supports a pretty basic selection which is only a event triggered on a selection change.
The second widget is the RadioGroup which is basically the same thing used for desktop widgets. This is quite complex and not necessarily the best fit for the next widget. Additionally, most of the code is not located in the mobile sub namespace which should be.

Another widget we added recently which should be considered as well is the tree widget.

Having these three widgets, we should think about a selection handling which is consistent and easy to understand.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41664</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-21 09:22:41 +0100</bug_when>
            <thetext>Finally, we managed to refactor the selection handling and came up with three individual groups of selectables:

Widgets switching its view based on a selection
-------------------------------------------------------
* Tabs
* Carousel

This widgets now offer a common API: an active property and its change event holding the active page / button

Form widgets
----------------
* Selectbox
* Picker (as soon as bug #8712 is fixed)

Those widgets offer a value which maps to the value DOM property for form handling. The Widgets property holds the model item used to create the view item.


Data Selection
-----------------
* Menu
* List
* Tree
* Calendar

Those widgets only visualize a set of data and should not include any selection behavior at all. Those widgets feature a event named &#39;selected&#39; which emits a collection of the selected DOM node. This DOM node features a property called &#39;model&#39; which holds the model used to create the item. That way, all selection modes can be configured easily within the user code.

next: ce0e2fa0e6fc5605d364964667efdfd9a8d964ea</thetext>
          </long_desc>
      
      

    </bug>