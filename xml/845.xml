<bug>
          <bug_id>845</bug_id>
          
          <creation_ts>2008-04-24 09:29:00 +0200</creation_ts>
          <short_desc>TestRunner build is not the same as normal build</short_desc>
          <delta_ts>2014-03-03 15:21:56 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>app.testrunner</component>
          <version>0.7.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>3.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Hugh Gibson">hgibson</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>2983</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-04-24 09:29:49 +0200</bug_when>
            <thetext>In 0.7.3 I did &quot;make test&quot;. The compiled file from our test application didn&#39;t have any line breaks in it, even though my normal &quot;make build&quot; output includes line breaks.

The test build should have the same compilation flags as the normal build so that the tests are carried out in the same environment.

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5322</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2008-09-06 15:31:10 +0200</bug_when>
            <thetext>Thomas, can you have a look how 0.8 behaves here?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5342</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2008-09-06 16:04:50 +0200</bug_when>
            <thetext>to 0.8.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5732</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2008-10-07 14:31:37 +0200</bug_when>
            <thetext>Please also check if this applies to 0.8+</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10641</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-06-29 15:50:11 +0200</bug_when>
            <thetext>Hmm, somehow the assignment to Thomas is missing. Re-added it, so you could check the issue described here.

I think only 0.8+ is relevant for now. Is it feasible at all to automatically use the settings for &quot;build&quot; also for the &quot;test&quot; target, or has the developer to take care of that himself/herself?
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10722</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-07-01 20:41:25 +0200</bug_when>
            <thetext>(In reply to comment #4)
&gt; I think only 0.8+ is relevant for now. Is it feasible at all to automatically 
use the settings for &quot;build&quot; also for the &quot;test&quot; target, or has the developer 
to take care of that himself/herself?

Currently, the &quot;test&quot; is a separate application that is created in the context 
of the custom application, integrating some of its classes (namely, the test 
classes). But all the profiling of the test app is done in the testrunner 
config.

This has several disadvantages, for example:

Maybe the custom test classes need special settings when a build version of 
them is created, e.g. maybe a special optimization should be left out, or like 
in the bug description, code formatting should be on. It is currently not 
straight forward how to pass those settings to the test building process.

Macros might be able to alleviate some of this burden.

Maybe we should carve out more of the compile-dist key settings in separate 
keys, e.g. the &quot;code&quot; subkey, which would cover optimization and formatting. 
This separate &quot;code&quot; key would be declarative and would not be an action key, 
not triggering some action. Hence it could be safely added to a &quot;test&quot; job 
creating the AUT in the custom config.json, to overwrite the corresponding key 
in the testrunner job. This could be a way to pass deviating settings into the 
build process for the test job.

Libraries have a similar problem, but in the other direction. The classes of a 
library might have special requirements for the build run. But if they are used 
by a custom application, the custom application&#39;s build settings are &quot;forced&quot; 
onto them. This issue was discussed with Sebastian some time ago, and he 
suggested e.g. extending the library&#39;s Manifest.json to include settings that 
&quot;have to go&quot; with the library classes, and would be honored by the build 
process when compiling the custom application.

So this hits on a more general issue: How should (a) libraries and (b) 
components be used so that the library (in case a) or the custom application 
(in case b) have more control over the way their classes are compiled. I think 
this deserves an own bug, which should be created when the issue can be 
formulated more precisely.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11603</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-08-26 19:23:59 +0200</bug_when>
            <thetext>down prio for now</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11957</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-08 09:41:28 +0200</bug_when>
            <thetext>moved from 0.8.3 to 0.9</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14707</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:25:43 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15017</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-27 10:57:09 +0100</bug_when>
            <thetext>to 1.0.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16493</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 16:30:46 +0100</bug_when>
            <thetext>moved to target 1.0.2</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32918</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-06-12 10:28:55 +0200</bug_when>
            <thetext>Meanwhile, the separate key for compilation options is available (called 
&#39;compile-options&#39;) which can be used to tailor arbitrary compiles, without 
itself triggering the compile (so it can easily piggyback on e.g. &#39;run&#39; jobs). 
To tailor the AUT building of the &#39;test&#39; job, you could overwrite the 
&#39;testrunner::tests-common&#39; job, to achieve the desired effect.

There is no solution concerning library-specific build options, as mentioned in 
one of the comments. This should be addressed in an own bug should the need 
arise.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37479</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:21:56 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>