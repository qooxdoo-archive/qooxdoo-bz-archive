<bug>
          <bug_id>6366</bug_id>
          
          <creation_ts>2012-05-01 20:43:00 +0200</creation_ts>
          <short_desc>Resize browser too small for table and lock it up</short_desc>
          <delta_ts>2012-07-09 09:29:28 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.table</component>
          <version>1.6</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>1.6.1</target_milestone>
          
          
          <votes>10</votes>
          <everconfirmed>1</everconfirmed>
          <reporter name="Scott Chapman">scott</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>marcputs</cc>
    
    <cc>mevers47</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>29304</commentid>
            <who name="Scott Chapman">scott</who>
            <bug_when>2012-05-01 20:43:05 +0200</bug_when>
            <thetext>I have the following code which will demonstrate this.  I run it in Playground and it works like it should.
I run it in a browser and it locks up every time.

Start the browser big, then resize it down to where it is smaller than the width of the table.  It will lock up the browser.  I&#39;m seeing this in Firefox and Chrome (latest versions) on Windows and Linux.

I tried making a tinyurl out of this in the Playground but TinyURL didn&#39;t like it, so here it is.

I&#39;d love to know how to prevent this problem. This is an application in production and it&#39;s causing serious problems with my users.

Scott

qx.Class.define(&quot;TabView&quot;,
{
  extend : qx.ui.tabview.TabView,
  construct : function(label)
    {
      this.base(arguments, label);
      this.__main_page = new TabUploadFile();
      this.add(this.__main_page);
    }
});
qx.Class.define(&quot;TabUploadFile&quot;,
{
  extend : qx.ui.tabview.Page,
  construct : function()
    {
      this.base(arguments, &#39;UPLOAD&#39;);
      this.setLayout(new qx.ui.layout.VBox().set({spacing: 4}));
     
      this.__downloadable_files_table = new TableDownloadableFiles().set({
        maxWidth: 775
      });

      this.add(this.__downloadable_files_table);
    }
});
qx.Class.define(&quot;TableDownloadableFiles&quot;,
{
  extend : qx.ui.table.Table,
  construct : function()
    {
      this.base(arguments);
      this.setInitiallyHiddenColumns([0]);
      this.setColumnVisibilityButtonVisible(false);
      var tableModel = new qx.ui.table.model.Simple();
      tableModel.setColumns([ &quot;ID&quot;, &quot;FileName&quot;, &quot;Destination&quot;, &quot;MakePath&quot;, &quot;Overwrite&quot;,&quot;Owner&quot;, &quot;Permissions&quot;, &quot;Description&quot;]);
      this.setTableModel(tableModel);
      this.setColumnWidth(1, 120);
      this.setColumnWidth(2, 120);
      this.setColumnWidth(3, 80);
      this.setColumnWidth(4, 80);
      this.setColumnWidth(5, 80);
      this.setColumnWidth(6, 90);
      this.setColumnWidth(7, 200);
      this.setStatusBarVisible(true);
      this.setShowCellFocusIndicator(false);
      this.__tcm = this.getTableColumnModel();
      this.__tcm.setDataCellRenderer(3, new qx.ui.table.cellrenderer.Boolean());
      this.__tcm.setDataCellRenderer(4, new qx.ui.table.cellrenderer.Boolean());
      var nativeData = [ ];
      var row = [1, &quot;syslog.txt&quot;, &quot;/tmp/&quot;, 0, null, &quot;root&quot;, &quot;0644&quot;, &quot;Test&quot;];
      if (row[3] == 1) {
        row[3] = true;
      } else {
        row[3] = false;
      }
      if (row[4] == 1) {
        row[4] = true;
      } else {
        row[4] = false;
      }
      nativeData.push(row);
      tableModel.setData(nativeData);
      var row_count = tableModel.getRowCount();
      this.setHeight(40 + 20 * row_count);
  }
});
var root = this.getRoot();
this.__tabView = new TabView();
qx.core.Init.getApplication().setUserData(&quot;mainTabs&quot;, this.__tabView);
root.add(this.__tabView, {edge: 0});</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29415</commentid>
            <who name="Martijn">mevers47</who>
            <bug_when>2012-05-11 12:35:12 +0200</bug_when>
            <thetext>We are running into this issue too. Any hope an a fix yet?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29611</commentid>
            <who name="Marc Puts">marcputs</who>
            <bug_when>2012-05-30 14:11:41 +0200</bug_when>
            <thetext>(In reply to comment #0)
&gt; I&#39;d love to know how to prevent this problem. This is an application in
&gt; production and it&#39;s causing serious problems with my users.
&gt; 
&gt; Scott

Same for us. It&#39;s a serious issue affecting many of our users in production.
If anyone can come up with a fix (or workaround), that would be highly appreciated!

I would also like to suggest to increase the  priority to critical.

Marc</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29614</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-05-30 17:41:39 +0200</bug_when>
            <thetext>It is planed to take care of that for the upcoming release which is not that far ahead.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29658</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-06-04 16:07:29 +0200</bug_when>
            <thetext>Shrinked it down to a simpler sample: 

var table = new qx.ui.table.Table();
var tableModel = new qx.ui.table.model.Simple();
tableModel.setColumns([ &quot;ID&quot; ]);
table.setTableModel(tableModel);
var data = [[&quot;xyz&quot;]];
tableModel.setData(data);

// enforce a horizontal scrollbar
table.setColumnWidth(0, 200);
table.setWidth(150);
// choose a hight where the horizontal scrollbar does not fit in
table.setHeight(60);

this.getRoot().add(table);

The problem seems to be in the horizontal scrollbar which does not have enough space to be rendered. As a quick workaround, add another 16 px (depending on the theme) to the calculated height to make sure the scrollbar has enough space to render and the bug should be gone.
I gave that new code snippet a try in the playground and could not reproduce it either. The playground uses native scrollbars and thats most likely the reason why it does not break in the playground.

With that, I will not go into fixing the issue.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29667</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-06-05 10:42:57 +0200</bug_when>
            <thetext>In the end, it was not an issue of the tabel. It was a problem of the scroll bars which broke the layout rendering. Here is how:

1. content area is bigger than the view --&gt; show scroll bar
2. scrollbar added, content area will increase due to the fact of the min size of the buttons
3. content area not bigger than the view --&gt; remove scrollbar
4. scrollbar removed, content are will decrease in size
5. &lt;see 1.&gt;

This was only true in case the custom scroll bars were used. The native scroll bars simply removed the buttons and thats it (tested on OSX). So I decided to do the same with the custom scroll bars. As soon as there is not enough space to show the buttons, they simply disappear. With that, the content area does not increase in size and the endless loop is broken.

master: 9f4abbb709a6e421eeadc960f4dd50106a73f729
1.6.x: 1dca8773e981f9f652f08f5e943726f05cf0c477</thetext>
          </long_desc>
      
      

    </bug>