<bug>
          <bug_id>8407</bug_id>
          
          <creation_ts>2014-06-10 14:51:00 +0200</creation_ts>
          <short_desc>Define a set of necessary, qooxdoo specific optimizations</short_desc>
          <delta_ts>2014-12-16 11:44:28 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.grunt</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>4.1</target_milestone>
          <dependson>8406</dependson>
          <blocked>8468</blocked>
    
    <blocked>8469</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>40473</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-06-10 14:51:25 +0200</bug_when>
            <thetext>We currently have a set of different optimizer in the toolchain. We should take the opportunity before migration the optimizer to JavaScript to check weather all those optimizers are still necessary or can be replaced with a component out of the box like closure compiler e.g..
Based on that set and tests, we can create further issues to migrate the necessary optimizers.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40476</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-06-10 16:48:51 +0200</bug_when>
            <thetext>Related code/information:

https://github.com/qooxdoo/qooxdoo/tree/master/tool/pylib/ecmascript/transform/optimizer
http://manual.qooxdoo.org/devel/pages/tool/generator/generator_optimizations.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40593</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-06-27 19:16:25 +0200</bug_when>
            <thetext>We currently support 8 types of optimizations (see link in comment #1):

1) basecalls
2) comments
3) privates
4) strings
5) statics
6) variables
7) variants 
8) whitespace

Some of them are very common and don&#39;t need a reimplementation when using a standard compressor/minifier (groub a).

Some of them are obsolete now and were only important for older browsers (groub b).

Some of them could be reimplemented but need further investigation if the effort is worth it (group c).

The remaining ones are qooxdoo specific and should be reimplemented (group d).

Here&#39;s my categorization:
a) 2, 6, 8
b) 4, 1?
c) 1?
d) 3, 5, 7</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40594</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-06-27 19:32:12 +0200</bug_when>
            <thetext>There are several modern compressor/minifier tools available:

1) Google Closure Compiler
2) UglifyJS2
3) esmangle

1) The &quot;Google Closure Compiler&quot; [1] has a good overall performance but is unfortunately written in Java which would only allow a integration but no further improvements on top of it.

2) &quot;UglifyJS2&quot; [2] seems promising and is used in many places (sometimes still UglifyJS version 1). Written in JavaScript, available on npm, good documentation, fast and extensible through walkers are the main selling points.

3) &quot;esmangle&quot; [3] is in an early stage of development and falls behind the first two ones as far as compression and speed is concerned. Also written in JavaScript and available on npm it furthermore uses the Mozilla Parser API (i.e. the Mozilla AST format) which is also used by esprima and others. However the documentation is sparse and the development slow.

I will start implementing the privates optimization on top of UglifyJS2 to see how good it fits into our existing grunt toolchain.

[1] https://developers.google.com/closure/compiler/
[2] http://lisperator.net/uglifyjs/
[3] https://github.com/Constellation/esmangle

Performance comparison:
http://lisperator.net/uglifyjs/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40695</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-07-04 13:26:05 +0200</bug_when>
            <thetext>Implemented privates optimization on top of UglifyJS2.
For other optimizations see bug #8468 and bug #8469.

master: 2373416856eb80d3d64ebdf828a436b74be52305</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40710</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-07-07 13:44:05 +0200</bug_when>
            <thetext>Added tests (and added compression package within dedicated Jenkins project).

master: fd25ae0febfd82ebc92ee2a24ae9c0db2377a07c</thetext>
          </long_desc>
      
      

    </bug>