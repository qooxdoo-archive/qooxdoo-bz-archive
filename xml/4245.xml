<bug>
          <bug_id>4245</bug_id>
          
          <creation_ts>2010-10-27 11:49:00 +0200</creation_ts>
          <short_desc>ImageLoader: Not recognized format of external image</short_desc>
          <delta_ts>2014-03-03 15:24:53 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.table</component>
          <version>1.2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>INVALID</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ronald__">rspierenburg</reporter>
          <assigned_to name="Tristan Koch">tristan.koch</assigned_to>
          <cc>alexander.steitz</cc>
    
    <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>20893</commentid>
            <who name="Ronald__">rspierenburg</who>
            <bug_when>2010-10-27 11:49:56 +0200</bug_when>
            <thetext>I&#39;m using a tablecell renderer to load an external image. My renderer extends the qooxdoo class qx.ui.table.cellrenderer.AbstractImage and returns the image url of a dynamically generated image like this:

imageHints.url = &quot;/Images/arrow/arrow_&quot; + cellInfo.value + &quot;.png&quot;;


This results in the following error when displaying the table: 

ImageLoader: Not recognized format of external image &#39;/Images/arrow/arrow_120.png&#39;!

This message comes from the qx.bom.element.Decoration class, which checks both the resourcemanager and the imageloader for the format of this image.

The abstractimage renderer doesn&#39;t use the imageloader to fetch (and cache) these images.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20963</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-10-29 09:13:12 +0200</bug_when>
            <thetext>Tristan, you may want to briefly check with Alex.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20988</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2010-10-29 13:07:32 +0200</bug_when>
            <thetext>In case the resource is not known by the resource manager, qx.bom.element.Decoration#getAttributes expects that the image in question has been loaded before with qx.io.ImageLoader.load. As you pointed out, AbstractImage is not doing this for you (maybe it should).

Could you perhaps send us more code snippets? Right now, we cannot determine whether it is a bug in our framework code or misleading API documentation.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20989</commentid>
            <who name="Ronald__">rspierenburg</who>
            <bug_when>2010-10-29 13:20:31 +0200</bug_when>
            <thetext>Offcourse, here are some more snippets.

My tablemodel contains a column that contains integers. My table uses the renderer specified below to show an image generated by the server.

/**
 * This class retrieves images from the specified url with the cell value in their name.
 */
qx.Class.define(&quot;org.example.ExternalImageCellRenderer&quot;,
{
  extend : qx.ui.table.cellrenderer.AbstractImage,

  construct : function()
  {
    this.base(arguments);
    this.__am = qx.util.AliasManager.getInstance();
  },

  members :
  {
    __am : null,
    __imageHeight : 16,
    __imageWidth : 16,

    // overridden
    _identifyImage : function(cellInfo)
    {
      var imageHints =
      {
        imageWidth  : this.__imageWidth,
        imageHeight : this.__imageHeight
      };

      imageHints.url = &quot;/Images/arrow/arrow_&quot; + cellInfo.value + &quot;.png&quot;;

      imageHints.tooltip = cellInfo.tooltip;

      return imageHints;
    }
  },

  destruct : function() {
    this.__am = null;
  }
});

If you need any more info, please let me know.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21120</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2010-11-05 14:58:54 +0100</bug_when>
            <thetext>As the implementation stands right now (detecting the file format in your case), I&#39;m afraid you&#39;ll have to pre-load external images for all possible cellInfo.values with qx.io.ImageLoader.load â€“ or manage them with the resource manager.

I opened a related bug (bug 4289), which you might want to follow.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21123</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2010-11-05 15:35:47 +0100</bug_when>
            <thetext>I&#39;m closing this bug. If you cannot work-around as suggested, please feel free to reopen.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38552</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:24:53 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>