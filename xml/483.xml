<bug>
          <bug_id>483</bug_id>
          
          <creation_ts>2007-06-12 15:29:00 +0200</creation_ts>
          <short_desc>variable optimization:  wrong substitution in closures</short_desc>
          <delta_ts>2008-06-05 14:29:08 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WORKSFORME</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="David Werner">david.werner</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>1558</commentid>
            <who name="David Werner">david.werner</who>
            <bug_when>2007-06-12 15:29:44 +0200</bug_when>
            <thetext>If you are using closures with more than one function, the same (substituted) names might be used for variables and inner functions in the same scope. 

Take a look at $3 in the following example of an optimized function, where the boolean argument is mistaken for the second inner function (error &quot;$3 is not a function&quot;).

qx.Proto.test = function($0)
{
  var $1=this;
  $2($0,true);

  function $2($0,$3)
  {
    ...
    // 
    var $8=$3($7);
    ...
  }

  function $3($4)
  {
    ...
  }
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>1723</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2007-07-02 19:00:24 +0200</bug_when>
            <thetext>Cannot reproduce - awaiting further info from Dave.

compile test.js:
qx.Proto.test = function (x1)
{
  var x2 = this;
  f1(x1,true);

  var isMshtml = qx.core.Client.getInstance().isMshtml();

  function f1(x3,x4)
  {
    var x5 = f2(23);
  }

  function f2(x6)
  {
    return;
  }
}

with generator.py --class-path=. --generate-compiled-script --compiled-script-file=test.jsc --optimize-strings --optimize-variables --cache-directory=./.qxcache --add-new-lines
yields:

$=];if(!window.qxsettings)qxsettings={};
if(qxsettings[&quot;qx.version&quot;]==undefined)qxsettings[&quot;qx.version&quot;]=&quot;0.0&quot;;
if(qxsettings[&quot;qx.isSource&quot;]==undefined)qxsettings[&quot;qx.isSource&quot;]=false;
if(!window.qxvariants)qxvariants={};
qx.Proto.test=function($0){var $1=this;
$3($0,
true);
var $2=qx.core.Client.getInstance().isMshtml();
function $3($4,
$5){var $6=$7(23);
}function $7($8){return;
}};

which is what you would expect. x4 and f2 become distinct variables ($5 and $6 repectively). The clash only appears if you use the *same* name for parameter and function name (replace x4 with f2 in the param list of f1). The resulting error then is standard JS behaviour (local var (param) shadowing name in parent name space (function)).
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>1730</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2007-07-03 13:55:58 +0200</bug_when>
            <thetext>Definitely not reproducable in 0.7. Seems like it has been fixed meanwhile, together with related issue in bug#484. See there for more info.</thetext>
          </long_desc>
      
      

    </bug>