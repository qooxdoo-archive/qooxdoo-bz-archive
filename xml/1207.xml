<bug>
          <bug_id>1207</bug_id>
          
          <creation_ts>2008-08-19 21:51:00 +0200</creation_ts>
          <short_desc>Variable Optimizer has a problem with IE scoping of catch statements</short_desc>
          <delta_ts>2014-03-03 15:19:00 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>master</version>
          <rep_platform>IE 7</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc>http://qooxdoo-contrib.svn.sourceforge.net/viewvc/qooxdoo-contrib/trunk/qooxdoo-contrib/Bugs/1207/</bug_file_loc>
          
          
          <priority>P1</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>0.8.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Eric Dacquay">eric.dacquay</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>Internet Explorer</cf_browser>
          <cf_browser_version>7</cf_browser_version>

      

      

      

          <long_desc isprivate="0">
            <commentid>4471</commentid>
            <who name="Eric Dacquay">eric.dacquay</who>
            <bug_when>2008-08-19 21:51:28 +0200</bug_when>
            <thetext>I&#39;ve got a relatively large table which I&#39;m displaying and works without any issues in firefox.  However, when I view it in IE7, I get a strange behavior when I try and scroll horizontally.  The first few rows don&#39;t seem to scroll but the headers and the rows below do.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4472</commentid>
              <attachid>330</attachid>
            <who name="Eric Dacquay">eric.dacquay</who>
            <bug_when>2008-08-19 21:52:22 +0200</bug_when>
            <thetext>Created attachment 330
Screenshot of the problem described</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4481</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-08-20 12:37:05 +0200</bug_when>
            <thetext>Do you use trunk or the legacy 0.7 branch?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4498</commentid>
            <who name="Eric Dacquay">eric.dacquay</who>
            <bug_when>2008-08-20 16:24:11 +0200</bug_when>
            <thetext>As specified in the version field of the bug, this is occuring in the trunk.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4504</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-08-20 19:03:16 +0200</bug_when>
            <thetext>I am not able to reproduce the problem here. We have fixed two IE bugs but they are not directly related to the table, maybe this already fixed it.

Could you please check, whether you still have the problem. If this is the case I need some additional information of how to reproduce the problem. Does it occur in one of the online demos? Maybe you can prepare a little demo code, which exposes the error.

thanks, Fabian

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4505</commentid>
              <attachid>333</attachid>
            <who name="Eric Dacquay">eric.dacquay</who>
            <bug_when>2008-08-20 23:46:59 +0200</bug_when>
            <thetext>Created attachment 333
Code to reproduce problem

Here&#39;s a quick little something which demonstrates the problem.  I just took the skeleton, added some table code from the demos and made the table a lot bigger.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4531</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-08-21 10:44:55 +0200</bug_when>
            <thetext>Really appreciated.

Still I have the problem that I cannot reproduce the error :-(. I have added a new table demo based on your example into the demo browser. Its called table/Table_Huge and has 50 columns and 10000 rows. I works well for me (IE7 on WinXP). We&#39;ll release 0.8-RC1 today and will publish the demos online. Maybe you can check, whether you have still the problems with this demo. </thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4582</commentid>
            <who name="Eric Dacquay">eric.dacquay</who>
            <bug_when>2008-08-22 04:24:25 +0200</bug_when>
            <thetext>For some reason, on all the computers that I&#39;ve tried the new demo browser on I can&#39;t get any of the demos to actually load.  However, I downloaded the rc1 sdk, created a new skeleton app using the create-application.py script and then put the code I provided in it and was able to immediately reproduce the problem.  I could try tracking down the problem, however I&#39;m not familiar enough with the inner workings of the framework to know where to begin.  If you still can&#39;t reproduce it, maybe you could give me a few things to try to pinpoint the problem on my side.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4617</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-08-22 13:37:52 +0200</bug_when>
            <thetext>I can see the problem in the API viewer now. This is a good start for me to debug it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4691</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-08-25 15:28:47 +0200</bug_when>
            <thetext>This seems to happen only in the &quot;build&quot; and not in the &quot;source&quot; version. This may be the reason I have never seen the problem.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4700</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-08-25 16:03:00 +0200</bug_when>
            <thetext>the method &quot;_scrollContent&quot; seems to have a problem in IE</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4707</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-08-25 16:46:57 +0200</bug_when>
            <thetext>I think I have finally found the error. It is a combination of the qooxdoo variable optimizer and a strange scoping behavior in IE. The EcmaScript spec says that variables defined in a catch statement (e.g. catch(e)) create a new scope. In IE however the variable is always defined and shadows a variable of the same name in the outer scope. This becomes a problem if the variable optimizer choses the same variable name as the variable in the catch block.

(function() {
    var e = 123;
    
    function foo()
    {
        try {
            var x = 1+2;
        } catch(e) {
            
        }
        
        alert(e); // alerts &quot;undefined&quot; in IE and &quot;123&quot; in other browsers
    }
    
    foo();
    
})()</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4708</commentid>
              <attachid>337</attachid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-08-25 16:50:37 +0200</bug_when>
            <thetext>Created attachment 337
Test for IE scoping</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4713</commentid>
            <who name="Eric Dacquay">eric.dacquay</who>
            <bug_when>2008-08-25 16:52:56 +0200</bug_when>
            <thetext>I can confirm that your IE scoping test gives me 123 in firefox but undefined in IE</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4714</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-08-25 17:02:43 +0200</bug_when>
            <thetext>I have hot fixed the table so that the collision does no longer occur (rev. 16064).

Change bug topic as it is a variable optimizer bug. </thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4718</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2008-08-25 17:14:26 +0200</bug_when>
            <thetext>To Thomas.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7537</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-02 14:40:26 +0100</bug_when>
            <thetext>fixed with r17522. i&#39;ve added a blacklist of all known identifiers in a scope, 
to check freshness of new vars.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7538</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-02 14:40:43 +0100</bug_when>
            <thetext>That&#39;s a case of variable capture in the underlying variableoptimizer. It is 
easy to avoid if new names for the alpha-conversion (substitution of names) are 
checked for their &quot;freshness&quot; in the current scope. To do this, new names have 
not only be checked against local vars (besides key words), but more 
specifically against all *bound* variables (locals and globals).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7548</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-02 17:35:24 +0100</bug_when>
            <thetext>I think I have a simpler solution just regarding &quot;catch&quot; statements like local variable declarations. In my simple test case this works well and keep the code a lot simpler in my opinion. Hope this works for you as well.

Source Code:
(function() {
  var z=&quot;hello&quot;;
  try{throw new Error}catch(a){alert(a)}
  alert(z);
})();


Result Code:
(function(){var b=&quot;hello&quot;;
try{throw new Error;
}catch(c){alert(c);
}alert(b);
})();

Patch will follow in a few minutes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7549</commentid>
              <attachid>440</attachid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-02 17:41:14 +0100</bug_when>
            <thetext>Created attachment 440
Patch to handle catch() statements like local variable declarations</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7555</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-03 10:09:09 +0100</bug_when>
            <thetext>What I like with this patch is the fact that &#39;catch&#39; variables are included in 
the variable optimization. So far, they have been ignored, and I will apply 
this part.

But as far as variable capture during the substitution process is concerned, I 
think it is not far-reaching enough, and I don&#39;t want to step into the same 
problem again with some other construct. (I think it was actually fortunate 
that IE brought up this issue). For all kinds of alpha conversions it is 
essential to know all bound names in a scope, locals and globals, and the 
current implementation aims for that. It&#39;s certainly not perfect, but I ran 
some benchmarks and the additional overhead of tracking bound names is minimal, 
both in memory and in speed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7556</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-03 10:26:33 +0100</bug_when>
            <thetext>Still seems to be overengineerd in my opinion. I do not talk about performance or memory. This is not of major relevance because of all the caching which happens in the generator. I talk about code complexity e.g. to understand and further develop on the code base. It&#39;s much easier without adding another parameter to nearly every function IMHO.

What about to keep the current changes, attaching them as a patch to this bug and switching to the lighter variant from my solution? So you can keep your efforts in cases where it really make problems and rethink the issue. For now I would say that there are no other scenarios where variable like constructs are declared (that&#39;s why I say: overengineerd)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7557</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-03 10:43:18 +0100</bug_when>
            <thetext>Applied part of patch with r17546.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7558</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-03 11:07:15 +0100</bug_when>
            <thetext>(In reply to comment #21)
&gt; Still seems to be overengineerd in my opinion. I do not talk about 
performance or memory. This is not of major relevance because of all the 
caching which happens in the generator. I talk about code complexity e.g. to 
understand and further develop on the code base. It&#39;s much easier without 
adding another parameter to nearly every function IMHO.

Well, to two functions, to be exact (which of course is &quot;nearly every function&quot; 
in a module that has just five ;-). But I&#39;m really happy to see somebody be 
concerned about code complexity. But there are other parts in the generator 
which are much worse. In this case I think it&#39;s acceptable, especially since it 
is a step in the right direction (checking against all bound names). A point 
that is also more important to me is &quot;concept complexity&quot;: I&#39;d rather aim for a 
generic solution than dealing with a couple of corner cases (or, even worse, 
not dealing with them because I &quot;magically&quot; know they cannot appear currently). 
This is also easier to maintain.

&gt; 
&gt; What about to keep the current changes, attaching them as a patch to this bug 
and switching to the lighter variant from my solution? So you can keep your 
efforts in cases where it really make problems and rethink the issue. For now I 
would say that there are no other scenarios where variable like constructs are 
declared (that&#39;s why I say: overengineerd).

I don&#39;t think it is that bad. I&#39;d rather improve the solution just implemented 
when I see the potential, again, because I think it is generic. I see your aim 
for &quot;minimalistic&quot; code but I think that is much harder to maintain, especially 
for others, because it implements so many implicit assumptions.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7559</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-03 11:41:23 +0100</bug_when>
            <thetext>Ok, got the point. Though I would like to rename it to something more matching what it does. In fact it collects all identifiers used and blocks all of them for replacement names. So a better name would be simply &quot;used&quot; or &quot;taken&quot; which matches the style with &quot;found&quot; ;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7560</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-03 14:06:23 +0100</bug_when>
            <thetext>I tried to comply more with the general compiler lingo, which distinguishes 
between &quot;free&quot;, &quot;fresh&quot; and &quot;bound&quot; variable names. I&#39;d rather rename &quot;found&quot; 
to something that reflects what is actually in it (e.g. &quot;locals&quot;) ;-) .</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7561</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-03 14:26:16 +0100</bug_when>
            <thetext>Ok, fine. No problem with this. So it might be &quot;locals&quot; and &quot;bound&quot;. Still better than &quot;other_bound&quot; which is problematic because of the &quot;other&quot; part of it :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7754</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-13 23:32:54 +0100</bug_when>
            <thetext>A new version of the variable optimizer, based on the Scope module, is in place and working, tests look good. &#39;catch&#39; clauses are treated as their own scope, and the exception variable is optimized correspondingly. Even accidential variable capture, as could happen in IE6, will not happen with the current implementation because it will not optimize to an already used name. OTOH, if some code relied on the IE6 behaviour, the optimizer would enforce the ECMA semantics.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36305</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:00 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="0" isprivate="0" isurl="0">
            <attachid>330</attachid>
            <date>2008-08-19 21:52:00 +0200</date>
            <delta_ts>2008-08-19 21:52:22 +0200</delta_ts>
            <desc>Screenshot of the problem described</desc>
            <filename>table_bug.PNG</filename>
            <type>image/png</type>
            <size>9866</size>
            <attacher>eric.dacquay</attacher>
            
              <data encoding="base64">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
RK5CYII=
</data>

          </attachment>
          <attachment isobsolete="0" ispatch="0" isprivate="0" isurl="0">
            <attachid>333</attachid>
            <date>2008-08-20 23:46:00 +0200</date>
            <delta_ts>2008-08-20 23:46:59 +0200</delta_ts>
            <desc>Code to reproduce problem</desc>
            <filename>Application.js</filename>
            <type>application/x-javascript</type>
            <size>1857</size>
            <attacher>eric.dacquay</attacher>
            
              <data encoding="base64">LyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqDQoNCiAgIENvcHlyaWdodDoNCg0KICAgTGljZW5zZToNCg0KICAg
QXV0aG9yczoNCg0KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqICovDQoNCi8qICoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KDQoj
YXNzZXQoY3VzdG9tLyopDQoNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLw0KDQovKioNCiAqIHRlc3Rza2Vs
ZXRvbg0KICovDQpxeC5DbGFzcy5kZWZpbmUoImN1c3RvbS5BcHBsaWNhdGlvbiIsDQp7DQogICAg
ZXh0ZW5kOiBxeC5hcHBsaWNhdGlvbi5TdGFuZGFsb25lLA0KDQoNCg0KICAgIC8qDQogICAgKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioNCiAgICBNRU1CRVJTDQogICAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioN
CiAgICAqLw0KDQogICAgbWVtYmVyczoNCiAgew0KICAgICAgY3JlYXRlUmFuZG9tUm93czogZnVu
Y3Rpb24ocm93Q291bnQpIHsNCiAgICAgICAgICB2YXIgcm93RGF0YSA9IFtdOw0KICAgICAgICAg
IGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHJvd0NvdW50OyByb3crKykgew0KICAgICAgICAgICAg
ICB2YXIgcm93MSA9IFtdOw0KICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDUwOyBp
KyspIHsNCiAgICAgICAgICAgICAgICAgIHJvdzEucHVzaCgiY29sICIgKyBpKTsNCiAgICAgICAg
ICAgICAgfQ0KICAgICAgICAgICAgICByb3dEYXRhLnB1c2gocm93MSk7DQogICAgICAgICAgfQ0K
ICAgICAgICAgIHJldHVybiByb3dEYXRhOw0KICAgICAgfSwNCg0KICAgICAgY3JlYXRlVGFibGU6
IGZ1bmN0aW9uKCkgew0KICAgICAgICAgIC8vIENyZWF0ZSB0aGUgaW5pdGlhbCBkYXRhDQogICAg
ICAgICAgdmFyIHJvd0RhdGEgPSB0aGlzLmNyZWF0ZVJhbmRvbVJvd3MoMjAwKTsNCg0KICAgICAg
ICAgIC8vIHRhYmxlIG1vZGVsDQogICAgICAgICAgdmFyIHRhYmxlTW9kZWwgPSB0aGlzLl90YWJs
ZU1vZGVsID0gbmV3IHF4LnVpLnRhYmxlLm1vZGVsLlNpbXBsZSgpOw0KICAgICAgICAgIHZhciBo
ZWFkZXJzID0gW107DQogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1MDsgaSsrKSB7DQog
ICAgICAgICAgICAgIGhlYWRlcnMucHVzaCgiaGVhZGVyICIgKyBpKTsNCiAgICAgICAgICB9DQog
ICAgICAgICAgdGFibGVNb2RlbC5zZXRDb2x1bW5zKGhlYWRlcnMpOw0KICAgICAgICAgIHRhYmxl
TW9kZWwuc2V0RGF0YShyb3dEYXRhKTsNCg0KICAgICAgICAgIC8vIHRhYmxlDQogICAgICAgICAg
dmFyIHRhYmxlID0gbmV3IHF4LnVpLnRhYmxlLlRhYmxlKHRhYmxlTW9kZWwpOw0KDQogICAgICAg
ICAgcmV0dXJuIHRhYmxlOw0KICAgICAgfSwNCg0KICAgICAgbWFpbjogZnVuY3Rpb24oKSB7DQog
ICAgICAgICAgLy8gQ2FsbCBzdXBlciBjbGFzcw0KICAgICAgICAgIHRoaXMuYmFzZShhcmd1bWVu
dHMpOw0KDQogICAgICAgICAgdGhpcy5fdGFibGUgPSB0aGlzLmNyZWF0ZVRhYmxlKCk7DQoNCiAg
ICAgICAgICB0aGlzLmdldFJvb3QoKS5hZGQodGhpcy5fdGFibGUsIHsgd2lkdGg6IDEwMCwgaGVp
Z2h0OiAxMDAgfSk7DQogICAgICB9DQogIH0NCn0pOw0K
</data>

          </attachment>
          <attachment isobsolete="0" ispatch="0" isprivate="0" isurl="0">
            <attachid>337</attachid>
            <date>2008-08-25 16:50:00 +0200</date>
            <delta_ts>2008-08-25 16:50:37 +0200</delta_ts>
            <desc>Test for IE scoping</desc>
            <filename>catch.html</filename>
            <type>text/html</type>
            <size>657</size>
            <attacher>fabian.jakobs</attacher>
            
              <data encoding="base64">PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEvL0VOIgogICAiaHR0
cDovL3d3dy53My5vcmcvVFIvaHRtbDQvc3RyaWN0LmR0ZCI+Cgo8aHRtbCBsYW5nPSJlbiI+Cjxo
ZWFkPgoJPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7
IGNoYXJzZXQ9dXRmLTgiPgoJPHRpdGxlPnVudGl0bGVkPC90aXRsZT4KCTxtZXRhIG5hbWU9Imdl
bmVyYXRvciIgY29udGVudD0iVGV4dE1hdGUgaHR0cDovL21hY3JvbWF0ZXMuY29tLyI+Cgk8bWV0
YSBuYW1lPSJhdXRob3IiIGNvbnRlbnQ9IkZhYmlhbiBKYWtvYnMiPgoJPCEtLSBEYXRlOiAyMDA4
LTA4LTI1IC0tPgo8L2hlYWQ+Cjxib2R5PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQi
IGNoYXJzZXQ9InV0Zi04Ij4KICAgIAooZnVuY3Rpb24oKSB7CiAgICB2YXIgZSA9IDEyMzsKICAg
IAogICAgZnVuY3Rpb24gZm9vKCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICB2YXIg
eCA9IDErMjsKICAgICAgICB9IGNhdGNoKGUpIHsKICAgICAgICAgICAgCiAgICAgICAgfQogICAg
ICAgIAogICAgICAgIGFsZXJ0KGUpOwogICAgfQogICAgCiAgICBmb28oKTsKICAgIAp9KSgpCiAg
ICAKPC9zY3JpcHQ+Cgo8L2JvZHk+CjwvaHRtbD4K
</data>

          </attachment>
          <attachment isobsolete="0" ispatch="0" isprivate="0" isurl="0">
            <attachid>440</attachid>
            <date>2009-02-02 17:41:00 +0100</date>
            <delta_ts>2009-02-02 17:41:14 +0100</delta_ts>
            <desc>Patch to handle catch() statements like local variable declarations</desc>
            <filename>varnames.patch</filename>
            <type>application/octet-stream</type>
            <size>3197</size>
            <attacher>info</attacher>
            
              <data encoding="base64">SW5kZXg6IHRvb2wvcHlsaWIvZWNtYXNjcmlwdC9iYWNrZW5kL29wdGltaXplci92YXJpYWJsZW9w
dGltaXplci5weQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09Ci0tLSB0b29sL3B5bGliL2VjbWFzY3JpcHQvYmFja2VuZC9v
cHRpbWl6ZXIvdmFyaWFibGVvcHRpbWl6ZXIucHkJKHJldmlzaW9uIDE3NTM1KQorKysgdG9vbC9w
eWxpYi9lY21hc2NyaXB0L2JhY2tlbmQvb3B0aW1pemVyL3ZhcmlhYmxlb3B0aW1pemVyLnB5CSh3
b3JraW5nIGNvcHkpCkBAIC0xNiw2ICsxNiw3IEBACiAjICBBdXRob3JzOgogIyAgICAqIFNlYmFz
dGlhbiBXZXJuZXIgKHdwYmFzdGkpCiAjICAgICogQWxlc3NhbmRybyBTYWxhIChhc2FsYSkKKyMg
ICAgKiBUaG9tYXMgSGVyY2hlbnJvZWRlciAodGhyb243KQogIwogIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMKIApAQCAtMjMsNyArMjQsNyBAQAogZnJvbSBlY21hc2NyaXB0LmZyb250ZW5kIGltcG9y
dCBsYW5nCiAKICMgVE9ETzogQW55IGlkZWEgdG8gbWFrZSB0aGlzIG1vcmUgcmFuZG9tIHdoaWxl
IHN0aWxsIGJlaW5nIGNvbXBhY3Q/Ci1kZWYgbWFwcGVyKGZvdW5kLCBvYm91bmQpOgorZGVmIG1h
cHBlcihmb3VuZCk6CiAgICAgY291bnRlciA9IDAKICAgICB0cmFuc2xhdGlvbnMgPSB7fQogICAg
IApAQCAtMzEsNyArMzIsNyBAQAogICAgICAgICByZXBsID0gY29udmVydChjb3VudGVyKQogICAg
ICAgICBjb3VudGVyICs9IDEKICAgICAgICAgCi0gICAgICAgIHdoaWxlIHJlcGwgaW4gZm91bmQg
b3IgcmVwbCBpbiBvYm91bmQgb3IgbGFuZy5SRVNFUlZFRC5oYXNfa2V5KHJlcGwpOgorICAgICAg
ICB3aGlsZSByZXBsIGluIGZvdW5kIG9yIGxhbmcuUkVTRVJWRUQuaGFzX2tleShyZXBsKToKICAg
ICAgICAgICAgIHJlcGwgPSBjb252ZXJ0KGNvdW50ZXIpCiAgICAgICAgICAgICBjb3VudGVyICs9
IDEKICAgICAgICAgICAgIApAQCAtNTgsMTMgKzU5LDEwIEBACiAgICAgcmV0dXJuIChuYW1lIGFu
ZCBub3QgbmFtZSBpbiBmb3VuZCBhbmQgbm90IG5hbWUuc3RhcnRzd2l0aCgiXyIpKQogCiAKLWRl
ZiBzZWFyY2gobm9kZSwgZm91bmQ9Tm9uZSwgcmVnaXN0ZXI9RmFsc2UsIGxldmVsPTAsIG90aGVy
X2JvdW5kPU5vbmUpOgorZGVmIHNlYXJjaChub2RlLCBmb3VuZD1Ob25lLCByZWdpc3Rlcj1GYWxz
ZSwgbGV2ZWw9MCk6CiAgICAgaWYgZm91bmQgPT0gTm9uZToKICAgICAgICAgZm91bmQgPSBbXQog
Ci0gICAgaWYgb3RoZXJfYm91bmQgPT0gTm9uZToKLSAgICAgICAgb3RoZXJfYm91bmQgPSBzZXQo
W10pCi0gICAgCiAgICAgaWYgbm9kZS50eXBlID09ICJmdW5jdGlvbiI6CiAgICAgICAgIGlmIHJl
Z2lzdGVyOgogICAgICAgICAgICAgbmFtZSA9IG5vZGUuZ2V0KCJuYW1lIiwgRmFsc2UpCkBAIC05
MiwzMCArOTAsMzAgQEAKICAgICAgICAgaWYgcmVzcGVjdChuYW1lLCBmb3VuZCk6CiAgICAgICAg
ICAgICBmb3VuZC5hcHBlbmQobmFtZSkKIAotICAgICMgcmVnaXN0ZXIgb3RoZXIgYm91bmQgbmFt
ZXMKLSAgICAjIC0tIHRoaXMgaXMgb3ZlcmdlbmVyYXRpbmcsIGJ1dCBpcyBvayBzaW5jZSBpdCBp
cyBjaGVja2VkIGFnYWluc3Qgd2hlbiBnZW5lcmF0aW5nCi0gICAgIyAtLSAiZnJlc2giIG5hbWVz
LCB0byBtYWtlIHN1cmUgdGhleSdyZSBub3QgaW4gdXNlCi0gICAgZWxpZiBub2RlLnR5cGUgPT0g
ImlkZW50aWZpZXIiOgotICAgICAgICBuYW1lID0gbm9kZS5nZXQoIm5hbWUiLCBOb25lKQorICAg
ICMgZS5nLiBjYXRjaChleCkKKyAgICAjIFRoZXNlIGFyZSBub3QgZXhhY3RseSB2YXJpYWJsZSBk
ZWNsYXJhdGlvbnMgbGlrZSAidmFyIiwgYnV0IG1vcmUgbGlrZSBibG9jayBkZWNscmF0aW9ucyBs
aWtlICJsZXQiCisgICAgIyBUaHJvdWdoIHNvbWUgaXNzdWVzIGluIGNyb3NzLWJyb3dzZXIgKHJl
YWQgSUUpIGl0J3MgYmVzdCB0byBoYW5kbGUgdGhlc2UgbGlrZSBibG9jayBsZXZlbCB2YXJpYWJs
ZXMgdGhvdWdoCisgICAgZWxpZiByZWdpc3RlciBhbmQgbm9kZS50eXBlID09ICJjYXRjaCI6Cisg
ICAgICAgIG5hbWUgPSBub2RlLmdldENoaWxkKCJleHByZXNzaW9uIikuZ2V0Q2hpbGQoInZhcmlh
YmxlIikuZ2V0Q2hpbGQoImlkZW50aWZpZXIiKS5nZXQoIm5hbWUiKQorICAgICAgICAKKyAgICAg
ICAgaWYgcmVzcGVjdChuYW1lLCBmb3VuZCk6CisgICAgICAgICAgICBmb3VuZC5hcHBlbmQobmFt
ZSkKIAotICAgICAgICBpZiByZXNwZWN0KG5hbWUsIGZvdW5kKSBhbmQgbm90IG5hbWUgaW4gb3Ro
ZXJfYm91bmQgYW5kIG5vdCBsYW5nLlJFU0VSVkVELmhhc19rZXkobmFtZSk6Ci0gICAgICAgICAg
ICBvdGhlcl9ib3VuZC5hZGQobmFtZSkKLQogICAgICMgSXRlcmF0ZSBvdmVyIGNoaWxkcmVuCiAg
ICAgaWYgbm9kZS5oYXNDaGlsZHJlbigpOgogICAgICAgICBpZiBub2RlLnR5cGUgPT0gImZ1bmN0
aW9uIjoKICAgICAgICAgICAgIGZvciBjaGlsZCBpbiBub2RlLmNoaWxkcmVuOgotICAgICAgICAg
ICAgICAgIHNlYXJjaChjaGlsZCwgZm91bmQsIHJlZ2lzdGVyLCBsZXZlbCsxLCBvdGhlcl9ib3Vu
ZCkKKyAgICAgICAgICAgICAgICBzZWFyY2goY2hpbGQsIGZvdW5kLCByZWdpc3RlciwgbGV2ZWwr
MSkKIAogICAgICAgICBlbHNlOgogICAgICAgICAgICAgZm9yIGNoaWxkIGluIG5vZGUuY2hpbGRy
ZW46Ci0gICAgICAgICAgICAgICAgc2VhcmNoKGNoaWxkLCBmb3VuZCwgcmVnaXN0ZXIsIGxldmVs
LCBvdGhlcl9ib3VuZCkKKyAgICAgICAgICAgICAgICBzZWFyY2goY2hpbGQsIGZvdW5kLCByZWdp
c3RlciwgbGV2ZWwpCiAKICAgICAjIEZ1bmN0aW9uIGNsb3NlZAogICAgIGlmIG5vZGUudHlwZSA9
PSAiZnVuY3Rpb24iOgogICAgICAgICBpZiBsZXZlbD09MDoKICAgICAgICAgICAgICMgR2VuZXJh
dGUgdHJhbnNsYXRpb24gbGlzdAotICAgICAgICAgICAgdHJhbnNsYXRpb25zID0gbWFwcGVyKGZv
dW5kLCBvdGhlcl9ib3VuZCkKKyAgICAgICAgICAgIHRyYW5zbGF0aW9ucyA9IG1hcHBlcihmb3Vu
ZCkKICAgICAgICAgICAgIAogICAgICAgICAgICAgIyBTdGFydCByZXBsYWNlbWVudCB3aGVuIGdl
dCBiYWNrIHRvIGZpcnN0IGxldmVsCiAgICAgICAgICAgICB1cGRhdGUobm9kZSwgdHJhbnNsYXRp
b25zKQo=
</data>

          </attachment>
      

    </bug>