<bug>
          <bug_id>5038</bug_id>
          
          <creation_ts>2011-04-18 22:58:00 +0200</creation_ts>
          <short_desc>Apply Optimization to &#39;hybrid&#39; Code Generation</short_desc>
          <delta_ts>2014-03-03 15:20:18 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>1.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.5</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>24114</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-04-18 22:58:46 +0200</bug_when>
            <thetext>This is a follow-up to bug#2008. One of the comments of this bug talks about the possible optimizations applied to the &#39;compiled&#39; classes of the source-hybrid build. Here is this comment again:

&lt;quote&gt;
Concerning optimizing the &quot;compiled&quot; parts of a source-hybrid build:
Andreas suggested that if optimization is applied, it should be rather light as 
it is still a development version:
- qx.debug should be &quot;on&quot;
- variable names should not be optimized (=&gt; readability, error messages)
- privates should not be optimized  (dito)
- strings optimization?
- basecall optimization is ok
- stripping comments is ok
&lt;/quote&gt;

If the &#39;hybrid&#39; build of an application supported optimization in general, the above could be easily achieved, and tweaked by a custom job configuration, to apply more or less optimization to the non-excepted code.

If the hybrid build would then also support the inclusion of a (completely inlined) boot package into the loader, the hybrid build mode would cover the classical source and build modes as corner cases, and could replace both. (On the implementation level, that is; jobs &#39;source&#39;, &#39;build&#39; and &#39;source-hybrid&#39; would remain as they are).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24259</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-04-29 19:11:46 +0200</bug_when>
            <thetext>There are a few occasions where there is special code if we run &quot;build&quot; mode, 
e.g. CodeGenerator.loaderClosureParts, which have to be treated when changing 
to a &#39;hybrid-only&#39; build mode. (E.g. in the loaderClosureParts case, I&#39;m not 
sure what the semantics would be under a hybrid mode. I guess a part could be a 
ClosurePart if it is all compiled!?).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24444</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-11 17:38:20 +0200</bug_when>
            <thetext>All build jobs (source, source-hybrid, build) are now generated over the 
source-hybrid pipeline. This is fortunate, as now all script building is along 
a single code path, hence easier to track and easier to maintain.

The script.buildType is still significant (contrary to my earlier believes), 
e.g. the libinfo code needs to know whether resources are copied to the common 
build path, or are still with their original library paths. So we will retain 
at least &quot;source&quot; and &quot;build&quot; as general build types. Consequently, generator 
code will continue to use this information for branching.

The ClosurePart issue has been resolved, at least for the moment. I think it 
would generally be more interesting to think in terms of &quot;ClosurePackages&quot; 
rather than ClosureParts (see related bug#5079). For the moment, the definition 
of a ClosurePart is:

  &quot;A part that consists only of ClosurePackages, except for the potential boot 
package (which can never  be a ClosurePackage). A ClosurePackage in this 
context is a package that consists only of a single script file that is 
closure-wrapped (qx.Part.$$notifyLoad(...)).&quot;

Also, a ClosurePackage could consist of multiple script files if all of them 
are closure-wrapped. But this would require a closure key for each (currently, 
the part key is used as closure key).

There are a few loose ends which should be sorted out over time:

- The information needed to calculate uris is (again) dispersed, having both 
the &quot;paths/app-root&quot; and &quot;uris/[script,resource]&quot; config keys. I feel there is 
redundancy here which should be resolved.

- Build type &quot;source-hybrid&quot; could be removed again. I think &#39;source&#39; and 
&#39;build&#39; are enough. &quot;source&quot; and &quot;source-hybrid&quot; only distinguish themselves by 
their &quot;code/except&quot; config setting.

I&#39;m closing this, as the immediate goal has been achieved. If appropriate, 
follow-up bugs should be opened.

With r27173.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36834</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:20:18 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>