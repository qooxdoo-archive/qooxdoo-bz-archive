<bug>
          <bug_id>1965</bug_id>
          
          <creation_ts>2009-02-18 15:14:00 +0100</creation_ts>
          <short_desc>Exploit Nesting of Scopes when Shortening Variable Names</short_desc>
          <delta_ts>2014-03-03 08:47:47 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Werner">info</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>7917</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-18 15:14:50 +0100</bug_when>
            <thetext>The new variable optimizer works on a per-class basis and optimizes all local variables of the class. This is OK, but there may be further optimizations possible. Currently there is a counter which increases with every new variable found, but ignoring when a function block is closed and therefore all the variables used there may be used by other functions again.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7918</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-18 15:16:40 +0100</bug_when>
            <thetext>We normally can reuse variables even in a closure like this:

(function()
{
  var test;

  function foo() {
   var elem;
  }

  function bar() {
   var doc;
  }
})();

which is perfectly OK to being translated into:

(function()
{
  var a;

  function b() {
   var d;
  }

  function c() {
   var d;
  }
})();

Not sure how to implement it though :) In the current version both &quot;d&quot; names are not created, but instead &quot;d&quot; and &quot;e&quot; exist. This seems to be a small issue when just dealing with small classes but may increase in large classes where the variables names reach 2 characters and more faster than necessary.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7920</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-18 15:18:50 +0100</bug_when>
            <thetext>to thomas</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22004</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-12-16 11:31:59 +0100</bug_when>
            <thetext>Short names can be re-used in new scopes, so longer replacements may not be 
necessary. Saves transfer size.

Adapted summary.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36027</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:47 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>