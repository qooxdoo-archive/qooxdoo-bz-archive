<bug>
          <bug_id>7922</bug_id>
          
          <creation_ts>2013-12-03 08:20:00 +0100</creation_ts>
          <short_desc>Restructure the website-api-viewer</short_desc>
          <delta_ts>2015-05-18 14:16:39 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>app.apiviewer.website</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>5.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          <cc>richard.sternagel</cc>
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>34462</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-12-03 08:20:35 +0100</bug_when>
            <thetext>The website api viewer has grown in the last couple of weeks before the 3.5 release. With that, the inner structure of the file did grow as well and we did not have the time to get all the code into a fitting structure. For future maintainability, it is necessary to refactor all the code. This could also be a good proof of concept how to use simple OO mechanisms and tooling in the qx.Website area.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43210</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2015-05-05 08:27:20 +0200</bug_when>
            <thetext>This is still valid.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43226</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2015-05-05 09:33:29 +0200</bug_when>
            <thetext>Another idea is to do a preprocessing of the JSON data to bring the data into a proper for. This could be easily done by a grunt task. Additionally, we could include the samples in that file as well to optimize the loading.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43238</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2015-05-06 11:23:02 +0200</bug_when>
            <thetext>The JSON format should look somehow like format we use already use in the viewer:

{
  &quot;&lt;classname&gt; / &lt;modulname&gt;&quot;: {
    &quot;desc&quot;: &quot;...&quot;,
    &quot;events&quot;: [],
    &quot;fileName&quot;: &quot;...&quot;,
    &quot;group&quot;: &quot;...&quot;,
    &quot;member&quot;: [],
    &quot;static&quot; [],
    &quot;superClass&quot;  &quot;...&quot;
    &quot;templates&quot; : &quot;...&quot;
  }
} 


This could be the first step. Based on that data, we could also create a HTML rendering process to speed up the loading of the viewer as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43288</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2015-05-18 13:42:19 +0200</bug_when>
            <thetext>Talked to Alex and integrated my solution into his build process.

What was accomplished?
The preprocessing of the JSON data used by the Website API Viewer is now done by a Grunt task. This mainly meant that the code from Data.js has to be run at buildtime and not at runtime anymore. In order to keep the class structure (for an effortless reuse) of &quot;Data.js&quot; I converted the code to ES6 classes [1] via using babel [2] during the build. This allowed me to share some needed functionality between build-/runtime (more specifically Node.js and the browser environment).

master: e319b0671b83e88625badc2fb5614febbe119ae7</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43289</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2015-05-18 14:16:39 +0200</bug_when>
            <thetext>Uh-oh!

[1] http://babeljs.io/docs/learn-es6/
[2] http://babeljs.io</thetext>
          </long_desc>
      
      

    </bug>