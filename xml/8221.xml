<bug>
          <bug_id>8221</bug_id>
          
          <creation_ts>2014-03-31 17:21:00 +0200</creation_ts>
          <short_desc>emitting of events sometimes normalizing given events, but there are missing values.</short_desc>
          <delta_ts>2015-04-07 07:58:23 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.event</component>
          <version>3.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mustafa Sak">mustafa.sak</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Christian Hagendorn">christian.hagendorn</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>39832</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2014-03-31 17:21:54 +0200</bug_when>
            <thetext>Calling emit on a collection will call the corresponding event handler, added with the on() implementation of the collection.

this.emit(&quot;change&quot;) for example, will call his handler without any paramter.

this.emit(&quot;change&quot;, &quot;foo&quot;), will forward &quot;foo&quot; to the handler.

this.emit(&quot;change&quot;, {}), will add some functions to the given object(getTarget, getRelatedTarget, ...)

this.emit(&quot;change&quot;, {getType : function(){return &quot;foo&quot;;}}, will override my custom function getType with native getType code.

Recommendations:

1. Emitted event handler should always get a normalized event object or the given data should never be manipulated.

1.1. If a event wrapper will be the chosen solution, we should be able to get corresponding values from that object. Target could be the element on the collection.

1.2. If you decided to never manipulate given parameter of emit(), we should provide a little helper, which creates a facade of an normalized event.

Please notice my small playground example!

http://tinyurl.com/ka5gawv

Steps:

1. enable logs

2. select option &quot;1&quot;, results in a log which points you to the existing functions getType and getTarget and their expected values.

3. click button &quot;set value without emitting&quot;; it will select last option but no &quot;change&quot; event will be fired.

4. click button &quot;set value with emitting empty object as parameter&quot; it will change the selection and fire change event; log will show you there are getType and getTarget, but both will return undefined.

5. click button &quot;set value with emitting no aditional paramter&quot;; results in changing the selection and calling the event handler, but the handler function will break.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39854</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2014-04-01 16:43:00 +0200</bug_when>
            <thetext>As I could see, the &quot;normalization&quot; of given object on emit() takes effect on any &quot;event&quot;, custom ones too.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43015</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2015-04-07 07:58:23 +0200</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>