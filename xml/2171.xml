<bug>
          <bug_id>2171</bug_id>
          
          <creation_ts>2009-03-27 19:51:00 +0100</creation_ts>
          <short_desc>Enhance XMLHttpRequest (XHR) implementation</short_desc>
          <delta_ts>2011-06-21 07:20:44 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io.remote</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc>http://code.google.com/p/xmlhttprequest/</bug_file_loc>
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.4</target_milestone>
          
          <blocked>4607</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Helder Magalhães">helder.magalhaes</reporter>
          <assigned_to name="Tristan Koch">tristan.koch</assigned_to>
          <cc>helder.magalhaes</cc>
    
    <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>8991</commentid>
            <who name="Helder Magalhães">helder.magalhaes</who>
            <bug_when>2009-03-27 19:51:44 +0100</bug_when>
            <thetext>Just stumbled across a nice project (see report URL) which seems to make a pretty interesting cross-browser implementation for XHR. This would allow qooxdoo to avoid quirks as much as possible by using the XMLHttpRequest standard [1].

I&#39;d say the project was already analyzed by the qooxdoo team, as it was pointed out by Ajaxian [2]. But, as this was a while ago (10/2007), in the meantime the library suffered improvements also, so it may worth to re-analyze. ;-)

I&#39;ve set this high priority to call for attention because I suspect the IE leak [3] is currently occurring with qooxdoo. I&#39;ve been noticing memory increasing steadily (though slowly) in an application which uses pooling, but I haven&#39;t (yet) been able to reduce the issue -- more investigation required. (Yes, I recognize pooling is probably the issue which should be fixed, but server push isn&#39;t yet widely supported by Web servers.)

[1] http://www.w3.org/TR/XMLHttpRequest/
[2] http://ajaxian.com/archives/re-inventing-xmlhttprequest-cross-browser-implementation-with-sniffing-capabilities
[3] http://www.ilinsky.com/articles/XMLHttpRequest/#bugs-ie-leak</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8992</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-03-30 10:40:24 +0200</bug_when>
            <thetext>This is essentially available in qx.bom.Request which is based on this library and may be the low-level implementation of a next-generation IO layer in qooxdoo.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8993</commentid>
            <who name="Helder Magalhães">helder.magalhaes</who>
            <bug_when>2009-03-30 10:59:07 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; This is essentially available in qx.bom.Request which is based on this library

Cool, I wasn&#39;t aware of that. :-)

I&#39;d just highlight (again) the suggestion of taking a look at the modifications since the library was based on, since even the smallest modification can made a difference (specially in terms of memory leak).


&gt; and may be the low-level implementation of a next-generation IO layer in
&gt; qooxdoo.

Mark this as resolved (later invalid), then? Or leave open as a reminder? (I didn&#39;t find any related bugs to mark as duplicate.)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8994</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-03-30 11:08:01 +0200</bug_when>
            <thetext>I don&#39;t know about huge updates after the release but we should double check this. I would suggest to keep this bug open and use it for updating qx.bom.Request accordingly.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23528</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2011-03-24 17:17:24 +0100</bug_when>
            <thetext>qx.bom.request.Xhr (too) is based on the idea of a cross-browser XHR implementation. It does not overwrite the original XHR, but wraps it.

All browser bugs mentioned on Ilinsky&#39;s page (and some more) have been fixed – with the exception of bugs I could not reproduce with either unit or manual testing.

Fixed with r25878 on trunk.</thetext>
          </long_desc>
      
      

    </bug>