<bug>
          <bug_id>7113</bug_id>
          
          <creation_ts>2012-12-25 13:06:00 +0100</creation_ts>
          <short_desc>Add a DemoBrowser Job to the application Skeleton.</short_desc>
          <delta_ts>2014-03-03 08:47:25 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.skeleton</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Burak Arslan">burak.arslan</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>burak.arslan</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>31797</commentid>
            <who name="Burak Arslan">burak.arslan</who>
            <bug_when>2012-12-25 13:06:47 +0100</bug_when>
            <thetext>Hi all,

Discussion:

http://sourceforge.net/mailarchive/message.php?msg_id=30261435
http://sourceforge.net/mailarchive/message.php?msg_id=30270207

Rationale:

Two use cases where I needed this:

1) In my experience, every serious qooxdoo user implements its own widgets around the low level components that qooxdoo provies. (E.g. we have a DataDisplay widget that saves / restores table configuration (col. widths, order etc) changes query parameters and does additional pagination, among other things) It&#39;d just be handy to showcase them so that new developers learn by example instead of by reading.

2) In applications that have a deeply nested screen structure, it&#39;d be handy to have each screen in its own page so that we can quickly test the look and feel of the new features in that particular screen.

How it works:

It&#39;s actually pretty similar to how the current demobrowser works:

1) The user creates app.demo.category.Demo class as a standalone app child in source/class/app/demo/category/Demo.js where he/she implements the main function. The implementation does not have to adhere to any special API besides the standard qooxdoo ones.

2) The user also creates the relevant html file in source/demo/category/Demo.html.

3) The user runs ./generate.py demobrowser-source. Similar to how ./generate.py test-source works, the demobrowser-source job creates a demobrowser folder in the project root, copies relevant files from ${QOOXDOO_PATH}/component/demobrowser and generates the json data files  with entries it found in the project folder.

Anything else you need about this subject, please let me know. I think it&#39;d be great to have this in qooxdoo, and only makes sense to have this next to jobs like ./generate.py api and ./generate.py tests-*

Best,</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31798</commentid>
            <who name="Burak Arslan">burak.arslan</who>
            <bug_when>2012-12-25 13:13:26 +0100</bug_when>
            <thetext>The live patch is here:

https://github.com/plq/qooxdoo/compare/04e91e2649d7ee3c2a044fb77abc4370b54122f0...plq:master

The test project is here:

https://gist.github.com/4353160/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31799</commentid>
            <who name="Burak Arslan">burak.arslan</who>
            <bug_when>2012-12-25 13:19:26 +0100</bug_when>
            <thetext>To get hold of the work so far:

    git clone git://github.com/plq/qooxdoo
    cd qooxdoo/framework

or
    cd /path/to/own/qooxdoo/fork/framework
    git remote add plq git://github.com/plq/qooxdoo
    git fetch plq
    git checkout -b demobrowser_skeleton_job -t plq/master

To make it run on the qooxdoo framework:

    cp -r ../application/demobrowser/source/demo source/ -r
    cp -r ../application/demobrowser/source/class/demobrowser/demo source/class/qx
    find  source/class/qx/demo -type f  | xargs sed -i s/demobrowser.demo/qx.demo/g
    ./generate.py demobrowser-source -s

This fails with:

&gt;&gt;&gt; Processing configuration
Traceback (most recent call last):
  File &quot;../tool/bin/generator.py&quot;, line 243, in &lt;module&gt;
    main()
  File &quot;../tool/bin/generator.py&quot;, line 160, in main
    config.resolveIncludes()
  File &quot;/home/plq/src/github/plq/qooxdoo/tool/pylib/generator/config/Config.py&quot;, line 396, in resolveIncludes
    econfig.resolveIncludes(includeTree)   # recursive include
  File &quot;/home/plq/src/github/plq/qooxdoo/tool/pylib/generator/config/Config.py&quot;, line 395, in resolveIncludes
    econfig = Config(self._console, fapath.decode(&#39;utf-8&#39;))
  File &quot;/home/plq/src/github/plq/qooxdoo/tool/pylib/generator/config/Config.py&quot;, line 59, in __init__
    self.__init_fname(data)
  File &quot;/home/plq/src/github/plq/qooxdoo/tool/pylib/generator/config/Config.py&quot;, line 94, in __init_fname
    data = json.loadStripComments(fname)
  File &quot;/home/plq/src/github/plq/qooxdoo/tool/pylib/misc/json.py&quot;, line 65, in loadStripComments
    s = codecs.open(path, &quot;r&quot;, &quot;utf-8&quot;).read()
  File &quot;/usr/lib64/python2.7/codecs.py&quot;, line 881, in open
    file = __builtin__.open(filename, mode, buffering)
IOError: [Errno 2] No such file or directory: u&#39;/home/plq/src/github/plq/qooxdoo/framework/demobrowser/source/demo/data/Service.json&#39;


The said file is not at:
    /home/plq/src/github/plq/qooxdoo/framework/demobrowser/source/demo/data/Service.json

but at:

    /home/plq/src/github/plq/qooxdoo/framework/source/demo/data/Service.json</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31853</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-01-08 18:43:17 +0100</bug_when>
            <thetext>Burak,

thanks again for making the effort of developing this idea and proposing it. We 
discussed it in the team, but the general impression was that it would be more 
of a custom solution than a general feature in the framework. Here are some of 
our concerns:

o We hardly know of any other project that requires such a solution. There once 
was one, but this is quite some time ago. And there is the current 
ContribDemobrowser, which is in that vein. But both are very much custom 
solutions.

o The meaning and relevance of a &#39;demobrowser&#39; skeleton job would be hard to 
convey to most users and would probably be confusing (what does it give them, 
when to use it, how to work with it, etc.). This doesn&#39;t preclude making the 
Demobrowser more accessible to the few people that actually wish to do so, like 
yourself. But a skeleton job for that seems to be overshooting.

o Demobrowser itself:

   o The Demobrowser itself deserves an overhaul, which we are thinking about 
for quite some while (e.g. bug#501, bug#2482, bug#5938).
   o But our approach would go in a different direction, trying to make the 
Demobrowser capable of integrating multiple *libraries*, rather than handling a 
plentitude of &quot;main&quot; applications all crammed together in a single library. The 
&#39;contrib&#39; skeleton goes into the same direction, organizing demos as individual 
libraries and not as a specific sub-namespace.
   o On the other hand, one of the biggest use cases for the current framework 
Demobrowser is for users to learn the framework API through working code. This 
goes more into the direction of &quot;snippets&quot; which would better be integrated 
into the application directly, rather than being loaded as stand-alone apps. 
But I doubt many other users of qooxdoo write libraries of a breadth that would 
merrit such an API-learning-tool. Maybe we&#39;ll have to have two different 
applications for these two use cases.

o There are viable alternatives which are probably more suitable:

   o A much better strategy is to fork out substantial parts of a big 
application into their own qooxdoo libraries. (This would cover your use cases 
of custom widgets and complex screens.) The big application would just use them 
like any other library. The forked-out libraries have their own code base, 
versioning, documentation, unit tests, and can have a suitable &quot;main&quot; 
Application.js to showcase the component in a stand-alone way. They could use 
the &#39;contrib&#39; skeleton to offer multiple demo apps in their dedicated 
libraries. This all would be the idiomatic &quot;qooxdoo-style&quot;.
   o If you don&#39;t like this you can still have multiple &quot;main&quot; classes in a 
single library, without the overhead of organizing them as  demos. You just 
define jobs to build them and get stand-alone apps to showcase and exercise 
individual components. But I doubt many people would find this attractive, and 
would not prefer the library approach.

o So without deploying a Demobrowser &quot;runner frame&quot; for several individual 
applications you get showcasing and testing abilities through other means. Our 
impression is that for most use cases this runner frame is rather getting in 
the way and you are better off working with the stand-alone application 
directly (that&#39;s what we do). Inspecting the demo source code is more 
interesting for snippets, while full demos consist of more than one class which 
the Demobrowser is unable to display.

o Beyond that the Demobrowser only gives you sort of an index view over the 
existing demos, and some search capabilities. As for the index, this could be 
easily replaced by a static or generated index.html that links to the apps you 
want to offer. The search capabilities are again more for the snippets and 
API-learning approach. Inspecting source code is better done through an editor 
or IDE.

In all the cost-benefit ratio for a &#39;demobrowser&#39; job seems questionable, and 
other ways more suitable to achieve the same thing. I hope these thoughts allow 
you to re-consider and maybe show you alternative ways to achieve what you want.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35897</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:25 +0100</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>