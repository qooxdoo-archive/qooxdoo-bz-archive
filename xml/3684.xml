<bug>
          <bug_id>3684</bug_id>
          
          <creation_ts>2010-05-06 13:50:00 +0200</creation_ts>
          <short_desc>feature request for qx.io.remote.Rpc</short_desc>
          <delta_ts>2014-03-03 15:23:09 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io.remote</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Florin Jurcovici">flj</reporter>
          <assigned_to name="Derrell Lipman">derrell.lipman</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>18234</commentid>
            <who name="Florin Jurcovici">flj</who>
            <bug_when>2010-05-06 13:50:52 +0200</bug_when>
            <thetext>Right now, there is no way client programmers can access/influence the qx.io.remote.Request used by qx.io.remote.Rpc. For instance, right now I need to add a custom http header to the request, but can&#39;t. There are other features of the request which one might need to access when doing Rpc.

My proposal to solving this problem is to provide a factory method in qx.io.remote.Rpc, which should be responsible for building the qx.io.remote.Request, having a default implementation in the base class. Then, whoever needs to change the way the request is built, can inherit from qx.io.remote.Rpc and just override the factory method.

As advised by thron7, I&#39;ll provide a patch in a few days, as soon as I have it ready.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18247</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-05-07 08:27:31 +0200</bug_when>
            <thetext>--&gt; Martin</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18325</commentid>
              <attachid>742</attachid>
            <who name="Florin Jurcovici">flj</who>
            <bug_when>2010-05-12 20:42:29 +0200</bug_when>
            <thetext>Created attachment 742
Proposed replacement for qx.io.remote.Rpc._callInternal

Classes inheriting from qx.io.remote.Rpc could just override buildRequest and buildRequestParameters to implement whatever protocol they want/whatever the server-side backend expects.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18326</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2010-05-12 20:47:56 +0200</bug_when>
            <thetext>Martin, feel free to assign this to me. I&#39;ll look at it in detail two weeks from now, if you reassign it prior to then.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18327</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-05-12 22:18:55 +0200</bug_when>
            <thetext>Thanks for the offer Derrell. I&#39;m sure I can&#39;t take care of that in the near future.

--&gt; to Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18459</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2010-05-21 16:44:10 +0200</bug_when>
            <thetext>This has now been implemented in trunk (r22228). The proposed replacement did not quite work, and I made a few other small changes to what was done there, but the basic principle is the same.

Thanks for the suggestion.

Florin, please check out trunk and test this. Note the different method names than you had proposed, so your extending class will require minor adjustments. Please either mark the bug as verified (assuming it works correctly), or let me know of any problems. I&#39;ve tested it without extending and all seems fine.

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19518</commentid>
            <who name="Florin Jurcovici">flj</who>
            <bug_when>2010-07-30 08:10:01 +0200</bug_when>
            <thetext>Sorry for being so late. Unfortunately, I&#39;ll probably not be able to do the tests until October. But after October we will definitely switch to 1.2, and I will necessarily refactor the rpc code we use now to use the new implementation, and thus also test the new implementation using derived classes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37910</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:23:09 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="1" isprivate="0" isurl="0">
            <attachid>742</attachid>
            <date>2010-05-12 20:42:00 +0200</date>
            <delta_ts>2010-05-12 20:42:29 +0200</delta_ts>
            <desc>Proposed replacement for qx.io.remote.Rpc._callInternal</desc>
            <filename>alternative.js</filename>
            <type>text/plain</type>
            <size>5855</size>
            <attacher>flj</attacher>
            
              <data encoding="base64">cXguQ2xhc3MuZGVmaW5lKCJxeC5pby5yZW1vdGUuQ3VzdG9tUnBjIiwKewoJbWVtYmVyczoKCXsK
CQlidWlsZFJlcXVlc3Q6IGZ1bmN0aW9uKCkKCQl7CgkJCXJldHVybiBuZXcgcXguaW8ucmVtb3Rl
LlJlcXVlc3QodGhpcy5nZXRVcmwoKSwKCQkJCQkJCQkJCQkgIlBPU1QiLAoJCQkJCQkJCQkJCSAi
YXBwbGljYXRpb24vanNvbiIpOwoJCX0sCgoJCWJ1aWxkUmVxdWVzdFBhcmFtZXRlcnM6IGZ1bmN0
aW9uKG1ldGhvZCwgcGFyYW1ldGVycykKCQl7CgkJCXJldHVybiB7CgkJCQkic2VydmljZSIgOiAo
KG1ldGhvZCA9PSAicmVmcmVzaFNlc3Npb24iKSA/IG51bGwgOiB0aGlzLmdldFNlcnZpY2VOYW1l
KCkpLAoJCQkJIm1ldGhvZCIgIDogbWV0aG9kLAoJCQkJImlkIgkgIDogcmVxLmdldFNlcXVlbmNl
TnVtYmVyKCksCgkJCQkicGFyYW1zIiAgOiBwYXJhbWV0ZXJzCgkJCX07CgkJfQoKCQlfY2FsbElu
dGVybmFsIDogZnVuY3Rpb24oYXJncywgY2FsbFR5cGUsIHJlZnJlc2hTZXNzaW9uKQoJCXsKCQkg
IHZhciBzZWxmID0gdGhpczsKCQkgIHZhciBvZmZzZXQgPSAoY2FsbFR5cGUgPT0gMCA/IDAgOiAx
KTsKCQkgIHZhciB3aGljaE1ldGhvZCA9IChyZWZyZXNoU2Vzc2lvbiA/ICJyZWZyZXNoU2Vzc2lv
biIgOiBhcmdzW29mZnNldF0pOwoJCSAgdmFyIGhhbmRsZXIgPSBhcmdzWzBdOwoJCSAgdmFyIGFy
Z3NBcnJheSA9IFtdOwoJCSAgdmFyIGV2ZW50VGFyZ2V0ID0gdGhpczsKCgkJICBmb3IgKHZhciBp
PW9mZnNldCsxOyBpPGFyZ3MubGVuZ3RoOyArK2kpCgkJICB7CgkJCWFyZ3NBcnJheS5wdXNoKGFy
Z3NbaV0pOwoJCSAgfQoKCQkgIHZhciByZXEgPSB0aGlzLmJ1aWxkUmVxdWVzdCgpOwoKCQkgIHZh
ciByZXF1ZXN0T2JqZWN0ID0gdGhpcy5idWlsZFJlcXVlc3RQYXJhbWV0ZXJzKHdoaWNoTWV0aG9k
LCBhcmdzQXJyYXkpOwoKCQkgIC8vIGFkZGl0aW9uYWwgZmllbGQgJ3NlcnZlcl9kYXRhJyBvcHRp
b25hbGx5IGluY2x1ZGVkLCBiZWxvdwoJCSAgLy8gU2VlIGlmIHRoZXJlJ3MgYW55IG91dC1vZi1i
YW5kIGRhdGEgdG8gYmUgc2VudCB0byB0aGUgc2VydmVyCgkJICB2YXIgc2VydmVyRGF0YSA9IHRo
aXMuZ2V0U2VydmVyRGF0YSgpOwoKCQkgIGlmIChzZXJ2ZXJEYXRhICE9PSBudWxsKQoJCSAgewoJ
CQkvLyBUaGVyZSBpcy4gIFNlbmQgaXQuCgkJCXJlcXVlc3RPYmplY3Quc2VydmVyX2RhdGEgPSBz
ZXJ2ZXJEYXRhOwoJCSAgfQoKCQkgIHJlcS5zZXRDcm9zc0RvbWFpbih0aGlzLmdldENyb3NzRG9t
YWluKCkpOwoKCQkgIGlmICh0aGlzLmdldFVzZXJuYW1lKCkpCgkJICB7CgkJCXJlcS5zZXRVc2VC
YXNpY0h0dHBBdXRoKHRoaXMuZ2V0VXNlQmFzaWNIdHRwQXV0aCgpKTsKCQkJcmVxLnNldFVzZXJu
YW1lKHRoaXMuZ2V0VXNlcm5hbWUoKSk7CgkJCXJlcS5zZXRQYXNzd29yZCh0aGlzLmdldFBhc3N3
b3JkKCkpOwoJCSAgfQoKCQkgIHJlcS5zZXRUaW1lb3V0KHRoaXMuZ2V0VGltZW91dCgpKTsKCQkg
IHZhciBleCA9IG51bGw7CgkJICB2YXIgaWQgPSBudWxsOwoJCSAgdmFyIHJlc3VsdCA9IG51bGw7
CgkJICB2YXIgcmVzcG9uc2UgPSBudWxsOwoKCQkgIHZhciBoYW5kbGVSZXF1ZXN0RmluaXNoZWQg
PSBmdW5jdGlvbihldmVudFR5cGUsIGV2ZW50VGFyZ2V0KQoJCSAgewoJCQlzd2l0Y2goY2FsbFR5
cGUpCgkJCXsKCQkJICBjYXNlIDA6IC8vIHN5bmMKCQkJCWJyZWFrOwoKCQkJICBjYXNlIDE6IC8v
IGFzeW5jIHdpdGggaGFuZGxlciBmdW5jdGlvbgoJCQkJaGFuZGxlcihyZXN1bHQsIGV4LCBpZCk7
CgkJCQlicmVhazsKCgkJCSAgY2FzZSAyOiAvLyBhc3luYyB3aXRoIGV2ZW50IGxpc3RlbmVycwoJ
CQkJLy8gRGlzcGF0Y2ggdGhlIGV2ZW50IHRvIG91ciBsaXN0ZW5lcnMuCgkJCQlpZiAoIWV4KQoJ
CQkJewoJCQkJICBldmVudFRhcmdldC5maXJlRGF0YUV2ZW50KGV2ZW50VHlwZSwgcmVzcG9uc2Up
OwoJCQkJfQoJCQkJZWxzZQoJCQkJewoJCQkJICAvLyBBZGQgdGhlIGlkIHRvIHRoZSBleGNlcHRp
b24KCQkJCSAgZXguaWQgPSBpZDsKCgkJCQkgIGlmIChhcmdzWzBdKSAgICAgIC8vIGNvYWxlc2Nl
CgkJCQkgIHsKCQkJCQkvLyBUaGV5IHJlcXVlc3RlZCB0aGF0IHdlIGNvYWxlc2NlIGFsbCBmYWls
dXJlIHR5cGVzIHRvCgkJCQkJLy8gImZhaWxlZCIKCQkJCQlldmVudFRhcmdldC5maXJlRGF0YUV2
ZW50KCJmYWlsZWQiLCBleCk7CgkJCQkgIH0KCQkJCSAgZWxzZQoJCQkJICB7CgkJCQkJLy8gTm8g
Y29hbGVzZSBzbyB1c2Ugb3JpZ2luYWwgZXZlbnQgdHlwZQoJCQkJCWV2ZW50VGFyZ2V0LmZpcmVE
YXRhRXZlbnQoZXZlbnRUeXBlLCBleCk7CgkJCQkgIH0KCQkJCX0KCQkJfQoJCSAgfTsKCgkJICB2
YXIgYWRkVG9TdHJpbmdUb09iamVjdCA9IGZ1bmN0aW9uKG9iaikKCQkgIHsKCQkJb2JqLnRvU3Ry
aW5nID0gZnVuY3Rpb24oKQoJCQl7CgkJCSAgc3dpdGNoKG9iai5vcmlnaW4pCgkJCSAgewoJCQkJ
Y2FzZSBxeC5pby5yZW1vdGUuUnBjLm9yaWdpbi5zZXJ2ZXI6CgkJCQkgIHJldHVybiAiU2VydmVy
IGVycm9yICIgKyBvYmouY29kZSArICI6ICIgKyBvYmoubWVzc2FnZTsKCgkJCQljYXNlIHF4Lmlv
LnJlbW90ZS5ScGMub3JpZ2luLmFwcGxpY2F0aW9uOgoJCQkJICByZXR1cm4gIkFwcGxpY2F0aW9u
IGVycm9yICIgKyBvYmouY29kZSArICI6ICIgKyBvYmoubWVzc2FnZTsKCgkJCQljYXNlIHF4Lmlv
LnJlbW90ZS5ScGMub3JpZ2luLnRyYW5zcG9ydDoKCQkJCSAgcmV0dXJuICJUcmFuc3BvcnQgZXJy
b3IgIiArIG9iai5jb2RlICsgIjogIiArIG9iai5tZXNzYWdlOwoKCQkJCWNhc2UgcXguaW8ucmVt
b3RlLlJwYy5vcmlnaW4ubG9jYWw6CgkJCQkgIHJldHVybiAiTG9jYWwgZXJyb3IgIiArIG9iai5j
b2RlICsgIjogIiArIG9iai5tZXNzYWdlOwoKCQkJCWRlZmF1bHQ6CgkJCQkgIHJldHVybiAoIlVO
RVhQRUNURUQgb3JpZ2luICIgKyBvYmoub3JpZ2luICsKCQkJCQkJICAiIGVycm9yICIgKyBvYmou
Y29kZSArICI6ICIgKyBvYmoubWVzc2FnZSk7CgkJCSAgfQoJCQl9OwoJCSAgfTsKCgkJICB2YXIg
bWFrZUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG9yaWdpbiwgY29kZSwgbWVzc2FnZSkKCQkgIHsKCQkJ
dmFyIGV4ID0gbmV3IE9iamVjdCgpOwoKCQkJZXgub3JpZ2luID0gb3JpZ2luOwoJCQlleC5jb2Rl
ID0gY29kZTsKCQkJZXgubWVzc2FnZSA9IG1lc3NhZ2U7CgkJCWFkZFRvU3RyaW5nVG9PYmplY3Qo
ZXgpOwoKCQkJcmV0dXJuIGV4OwoJCSAgfTsKCgkJICByZXEuYWRkTGlzdGVuZXIoImZhaWxlZCIs
IGZ1bmN0aW9uKGV2dCkKCQkgIHsKCQkJdmFyIGNvZGUgPSBldnQuZ2V0U3RhdHVzQ29kZSgpOwoJ
CQlleCA9IG1ha2VFeGNlcHRpb24ocXguaW8ucmVtb3RlLlJwYy5vcmlnaW4udHJhbnNwb3J0LAoJ
CQkJCQkJICAgY29kZSwKCQkJCQkJCSAgIHF4LmlvLnJlbW90ZS5FeGNoYW5nZS5zdGF0dXNDb2Rl
VG9TdHJpbmcoY29kZSkpOwoJCQlpZCA9IHRoaXMuZ2V0U2VxdWVuY2VOdW1iZXIoKTsKCQkJaGFu
ZGxlUmVxdWVzdEZpbmlzaGVkKCJmYWlsZWQiLCBldmVudFRhcmdldCk7CgkJICB9KTsKCgkJICBy
ZXEuYWRkTGlzdGVuZXIoInRpbWVvdXQiLCBmdW5jdGlvbihldnQpCgkJICB7CgkJCXRoaXMuZGVi
dWcoIlRJTUVPVVQgT0NDVVJSRUQiKTsKCQkJZXggPSBtYWtlRXhjZXB0aW9uKHF4LmlvLnJlbW90
ZS5ScGMub3JpZ2luLmxvY2FsLAoJCQkJCQkJICAgcXguaW8ucmVtb3RlLlJwYy5sb2NhbEVycm9y
LnRpbWVvdXQsCgkJCQkJCQkgICAiTG9jYWwgdGltZS1vdXQgZXhwaXJlZCIpOwoJCQlpZCA9IHRo
aXMuZ2V0U2VxdWVuY2VOdW1iZXIoKTsKCQkJaGFuZGxlUmVxdWVzdEZpbmlzaGVkKCJ0aW1lb3V0
IiwgZXZlbnRUYXJnZXQpOwoJCSAgfSk7CgoJCSAgcmVxLmFkZExpc3RlbmVyKCJhYm9ydGVkIiwg
ZnVuY3Rpb24oZXZ0KQoJCSAgewoJCQlleCA9IG1ha2VFeGNlcHRpb24ocXguaW8ucmVtb3RlLlJw
Yy5vcmlnaW4ubG9jYWwsCgkJCQkJCQkgICBxeC5pby5yZW1vdGUuUnBjLmxvY2FsRXJyb3IuYWJv
cnQsCgkJCQkJCQkgICAiQWJvcnRlZCIpOwoJCQlpZCA9IHRoaXMuZ2V0U2VxdWVuY2VOdW1iZXIo
KTsKCQkJaGFuZGxlUmVxdWVzdEZpbmlzaGVkKCJhYm9ydGVkIiwgZXZlbnRUYXJnZXQpOwoJCSAg
fSk7CgoJCSAgcmVxLmFkZExpc3RlbmVyKCJjb21wbGV0ZWQiLCBmdW5jdGlvbihldnQpCgkJICB7
CgkJCXJlc3BvbnNlID0gZXZ0LmdldENvbnRlbnQoKTsKCQkJaWQgPSByZXNwb25zZVsiaWQiXTsK
CgkJCWlmIChpZCAhPSB0aGlzLmdldFNlcXVlbmNlTnVtYmVyKCkpCgkJCXsKCQkJICB0aGlzLndh
cm4oIlJlY2VpdmVkIGlkICgiICsgaWQgKyAiKSBkb2VzIG5vdCBtYXRjaCByZXF1ZXN0ZWQgaWQg
IiArCgkJCQkJCSIoIiArIHRoaXMuZ2V0U2VxdWVuY2VOdW1iZXIoKSArICIpISIpOwoJCQl9CgoJ
CQkvLyBEZXRlcm1pbmUgaWYgYW4gZXJyb3Igd2FzIHJldHVybmVkLiBBc3N1bWUgbm8gZXJyb3Is
IGluaXRpYWxseS4KCQkJdmFyIGV2ZW50VHlwZSA9ICJjb21wbGV0ZWQiOwoJCQl2YXIgZXhUZXN0
ID0gcmVzcG9uc2VbImVycm9yIl07CgoJCQlpZiAoZXhUZXN0ICE9IG51bGwpCgkJCXsKCQkJICAv
LyBUaGVyZSB3YXMgYW4gZXJyb3IKCQkJICByZXN1bHQgPSBudWxsOwoJCQkgIGFkZFRvU3RyaW5n
VG9PYmplY3QoZXhUZXN0KTsKCQkJICBleCA9IGV4VGVzdDsKCgkJCSAgLy8gQ2hhbmdlIHRoZSBl
dmVudCB0eXBlCgkJCSAgZXZlbnRUeXBlID0gImZhaWxlZCI7CgkJCX0KCQkJZWxzZQoJCQl7CgkJ
CSAgcmVzdWx0ID0gcmVzcG9uc2VbInJlc3VsdCJdOwoKCQkJICBpZiAocmVmcmVzaFNlc3Npb24p
CgkJCSAgewoJCQkJcmVzdWx0ID0gZXZhbCgiKCIgKyByZXN1bHQgKyAiKSIpOwoJCQkJdmFyIG5l
d1N1ZmZpeCA9IHF4LmNvcmUuU2VydmVyU2V0dGluZ3Muc2VydmVyUGF0aFN1ZmZpeDsKCgkJCQlp
ZiAoc2VsZi5fX2N1cnJlbnRTZXJ2ZXJTdWZmaXggIT0gbmV3U3VmZml4KQoJCQkJewoJCQkJICBz
ZWxmLl9fcHJldmlvdXNTZXJ2ZXJTdWZmaXggPSBzZWxmLl9fY3VycmVudFNlcnZlclN1ZmZpeDsK
CQkJCSAgc2VsZi5fX2N1cnJlbnRTZXJ2ZXJTdWZmaXggPSBuZXdTdWZmaXg7CgkJCQl9CgoJCQkJ
c2VsZi5zZXRVcmwoc2VsZi5maXhVcmwoc2VsZi5nZXRVcmwoKSkpOwoJCQkgIH0KCQkJfQoKCQkJ
aGFuZGxlUmVxdWVzdEZpbmlzaGVkKGV2ZW50VHlwZSwgZXZlbnRUYXJnZXQpOwoJCSAgfSk7CgoJ
CSAgcmVxLnNldERhdGEocXgudXRpbC5Kc29uLnN0cmluZ2lmeShyZXF1ZXN0T2JqZWN0KSk7CgkJ
ICByZXEuc2V0QXN5bmNocm9ub3VzKGNhbGxUeXBlID4gMCk7CgoJCSAgaWYgKHJlcS5nZXRDcm9z
c0RvbWFpbigpKQoJCSAgewoJCQkvLyBPdXIgY2hvaWNlIGhlcmUgaGFzIG5vIGVmZmVjdCBhbnl3
YXkuICBUaGlzIGlzIHB1cmVseSBpbmZvcm1hdGlvbmFsLgoJCQlyZXEuc2V0UmVxdWVzdEhlYWRl
cigiQ29udGVudC1UeXBlIiwKCQkJCQkJCQkgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5j
b2RlZCIpOwoJCSAgfQoJCSAgZWxzZQoJCSAgewoJCQkvLyBXaGVuIG5vdCBjcm9zcy1kb21haW4s
IHNldCB0eXBlIHRvIHRleHQvanNvbgoJCQlyZXEuc2V0UmVxdWVzdEhlYWRlcigiQ29udGVudC1U
eXBlIiwgImFwcGxpY2F0aW9uL2pzb24iKTsKCQkgIH0KCgkJICByZXEuc2VuZCgpOwoKCQkgIGlm
IChjYWxsVHlwZSA9PSAwKQoJCSAgewoJCQlpZiAoZXggIT0gbnVsbCkKCQkJewoJCQkgIHZhciBl
cnJvciA9IG5ldyBFcnJvcihleC50b1N0cmluZygpKTsKCQkJICBlcnJvci5ycGNkZXRhaWxzID0g
ZXg7CgkJCSAgdGhyb3cgZXJyb3I7CgkJCX0KCgkJCXJldHVybiByZXN1bHQ7CgkJICB9CgkJICBl
bHNlCgkJICB7CgkJCXJldHVybiByZXE7CgkJICB9CgkJfQoJfQp9KTs=
</data>

          </attachment>
      

    </bug>