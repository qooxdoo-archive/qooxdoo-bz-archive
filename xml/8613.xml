<bug>
          <bug_id>8613</bug_id>
          
          <creation_ts>2014-10-06 09:22:00 +0200</creation_ts>
          <short_desc>Merge the two io layers into one in the next branch</short_desc>
          <delta_ts>2014-11-21 16:37:24 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>next</product>
          <component>io</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>41314</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-10-06 09:22:47 +0200</bug_when>
            <thetext>We currently have two kinds of IO implementation in the next branch:

qx.bom.request: very low-level io layer based on bootstrap
qx.io: high-level API based on class

As there is no need to distinguish class and bootstrap, there should be no need for two io layers. So we should merge those two IO layers into one suitable for every kind of all development. We already started that with combining the rest.Resource class but the others are missing:

XHR
Script
Json-p</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41577</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-11-13 16:09:40 +0100</bug_when>
            <thetext>Done.

next: dedfbe7d6669cb97990b3ef336e28ae5ec18ef68</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41584</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-17 09:48:16 +0100</bug_when>
            <thetext>I have a few questions concerning the API:

AbstractRequest
--------------------
- We have &#39;status&#39; (and &#39;statusText&#39;) property and a public getStatus API. This means there are two ways to access the same value. Shouldn&#39;t we markt he method as internal as this should not be a user facing API?

- overrideResponseContentType is implemented in the abstract class but is only used in the XHR implementation. Could we move that to the XHR in general?


Script
-------
- Most of the member variables (e.g. readyState, status or timeout) should be properties as they were used as one. This would enabled the API docs for them and set up a proper public API what should be usable from the outside and what not. Additionally we would have the same API patterns as we use in the AbstractRequest class.

- The script class still has the on* method hocks which are not necessary if we have the events in place.

- The method &#39;__environmentGet&#39; is not necessary anymore as it should not happen anymore that qx.core.Environment is not available. This is also true for the @ignore in the class comment


JsonP
-------
- CallbackParam, CallbackName and Prefix could be properties, right?


A common thing I saw in the classes: Usually we have two empty lines between each method in a class. ;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41632</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-11-18 17:14:45 +0100</bug_when>
            <thetext>All suggestions are valid and good - they&#39;re incorporated now.

next: 1017c91cd6d0e5ca638b84f4bbf0759d386eb0e1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41636</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-19 09:01:36 +0100</bug_when>
            <thetext>Seems like the docs somehow malformed. Got this while building the mobile showcase:

- Warning: qx.io.request.AbstractRequest (624): Unable to parse JSDoc entry: @param {String} The transport’s status text.
- Warning: qx.io.request.Jsonp (355): Unable to parse JSDoc entry: @param {String} The transport’s status code.
- Warning: qx.io.request.Jsonp (375): Unable to parse JSDoc entry: @param {String} The transport’s status text.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41638</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-11-19 10:50:47 +0100</bug_when>
            <thetext>Fixed.

next: 3a6d82e19e23ea663b7975227c5c11d2e4711abf</thetext>
          </long_desc>
      
      

    </bug>