<bug>
          <bug_id>7480</bug_id>
          
          <creation_ts>2013-06-23 00:11:00 +0200</creation_ts>
          <short_desc>add an easy way to include scripts using compiler hint</short_desc>
          <delta_ts>2014-07-01 14:59:55 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Shimon Doodkin">helpmepro1</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>33073</commentid>
            <who name="Shimon Doodkin">helpmepro1</who>
            <bug_when>2013-06-23 00:11:32 +0200</bug_when>
            <thetext>to make a package of a contrib, with no changing of config.json. or using script loader function that attaches a script tag.


i could do 

  &quot;jobs&quot; :
  {
  
    &quot;add-socketio&quot; : {
        &quot;add-script&quot; : [  { &quot;uri&quot;: &quot;/socket.io/socket.io.js&quot;} ]
    },
    &quot;source-script&quot; : {
        &quot;extend&quot; : [&quot;add-socketio&quot;]
    },
    &quot;build-script&quot; : {
        &quot;extend&quot; : [&quot;add-socketio&quot;]
    }
  }

but i want to do it in a class like:

#add-script  &quot;/socket.io/socket.io.js&quot;
#add-script  &quot;http://cdn.com/script.js&quot;
or maybe like this
#add-script   { &quot;uri&quot;: &quot;http://cdn.com/myscript.js&quot;, &quot;https&quot;: &quot;https://cdn.com/script.js&quot;}

also to be able to do static include maybe something like this:

#add-script-static &quot;../resources/flotr2/flotr2.js&quot;
or
#add-script-static &quot;$DIR/../resources/flotr2/flotr2.js&quot;
or
#add-script-static &quot;$__dirname/../resources/flotr2/flotr2.js&quot;
or
#add-script-static &quot;$class/resources/flotr2/flotr2.js&quot;

something sophisticated could be to not load the class befcore the required script is ready or to have some singelton progrmming interface that can inform if a script has been loaded, but this is over the scope of this future request


there is $script.js library i could use but i do not want to use it in every custom module.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33075</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-06-24 07:56:26 +0200</bug_when>
            <thetext>Thomas, what do you think of this proposal?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33084</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-06-24 11:09:07 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; Thomas, what do you think of this proposal?

I think it is going too much in a require.js-type of dependency management 
direction, and for that it&#39;s maybe not good enough. E.g. it&#39;s questionable 
whether you want all of that in compiler hints instead of source-level 
constructs (like &quot;require([...], function ...)&quot;).

I understand there is a desire for dependency management that is recursive, so 
you don&#39;t have to handle required libraries of a library in the main 
application. But then there could be recursive resolution on the library (not 
class) level, and there is already a bug for that (bug#1603).

Also, it&#39;s unclear what an argument like &quot;/socket.io/socket.io.js&quot; should mean. 
You need to have some kind of class/module path resolution strategy, which 
again has to be managed through config.

I&#39;d rather restrict compiler hints of a class to other class id&#39;s, not paths or 
URIs, and then manage resolution of class paths outside the code.

It would be more idiomatic to wrap external scripts in a qooxdoo library (e.g. 
like QxDyGraph) which handle external script loading, and then use that 
library. OTOH, the proposed solution is much simpler and more direct.

I don&#39;t think I understand what &quot;static include&quot;/add-script-static means.

As far as load ordering and load timing is concerned I think we have all 
necessary tools in our loading layer already. As long as the requested scripts 
(like socket.io.js, script.js, myscript.js, flotr2.js, etc. in the bug 
description) are self-contained, ie. are leafs in the dependency graph, it 
should be easy to include them in a  application built. But what if they have 
their own dependencies?! - Maybe we would need to demand they are 
self-contained.

I don&#39;t understand what &quot;there is $script.js library i could use but i do not 
want ot use it in every custom module&quot; means.

To sum it up, I think it&#39;s ugly, but there could be a real use case for this. 
It probably all depends on how important we think that use case is.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40609</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-07-01 14:59:55 +0200</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year
or we don&#39;t think it will be fixed in the near future.</thetext>
          </long_desc>
      
      

    </bug>