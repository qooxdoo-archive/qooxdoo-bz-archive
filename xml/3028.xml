<bug>
          <bug_id>3028</bug_id>
          
          <creation_ts>2009-11-04 12:30:00 +0100</creation_ts>
          <short_desc>PartBuild creates Parts with unresolved Dependencies when Merging Packages</short_desc>
          <delta_ts>2014-03-03 15:24:52 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>1.0-beta1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>13856</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-04 12:30:12 +0100</bug_when>
            <thetext>Through package merging it can happen that a part has classes in its packages 
whos depenencies are not fullfilled. On loading the part, this might show up as 
run time errors in the browser.

The work-around is to disable all package merging in the config (disable all 
&quot;size&quot; options, &quot;expected-load-order&quot;, &quot;no-merge-private-package&quot;).

(The boot part is merged by default (which is also necessary for the loader), 
but shouldn&#39;t run into this problem in general).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13858</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-04 14:07:35 +0100</bug_when>
            <thetext>The basic idea to solve this is to maintain (load) dependencies between 
packages:

- these dependencies are calculated from class dependencies (direct, not 
recursive) when the packages are established
- then, on merging packages:
  - the target package &quot;inherits&quot; the dependencies that come from the source 
package
  - all parts using the target package are checked if the new dependencies are 
already fullfilled by the packages already
     present in the part
  - if not the necessary package is added to the part, and the process recurses

The expectation is:
- currently working apps (like feedreader) will see no changes at all to the 
parts, as the dependencies are automagically fullfilled already
- if packages must be added to part those will be limited, so there will be no 
&quot;monster-parts&quot; containing the majority of available packages</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13867</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-04 21:59:09 +0100</bug_when>
            <thetext>assigned</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13868</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-04 22:03:00 +0100</bug_when>
            <thetext>up prio for a project</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13958</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-05 17:50:59 +0100</bug_when>
            <thetext>The sketched solution was implemented, adding 
generator.code.Package.packageDeps to track package dependencies during 
merging. Missing packages are now detected and added to the relevant part. 
Parts that already have all necessary packages are not affected (so e.g. 
Feedreader has the same package distribution as before).

A verifier was also added to the generator that checks the parts after all 
merging has taken place, whether they are self-contained and have all 
prerequisite classes for each class they contain.

With r20570.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14675</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:16:32 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38549</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:24:52 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>