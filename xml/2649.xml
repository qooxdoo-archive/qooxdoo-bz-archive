<bug>
          <bug_id>2649</bug_id>
          
          <creation_ts>2009-08-04 17:29:00 +0200</creation_ts>
          <short_desc>Make flush more robust</short_desc>
          <delta_ts>2014-03-03 15:24:21 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.core</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.0-beta1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Fabian Jakobs">fabian.jakobs</reporter>
          <assigned_to name="Fabian Jakobs">fabian.jakobs</assigned_to>
          <cc>carsten.lergenmueller</cc>
    
    <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>11192</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-08-04 17:29:40 +0200</bug_when>
            <thetext>If an exception is thrown during the queue flush, the queue might be left in an 
inconsistent state and any further flushed fail.

We should guard all places where custom user code might be executed during a flush
with try/catch statements and try to recover to the point where we are able to run the
queue flush again.

Hooks for user code are:

 - resize/move events handler
 - styleAppearance event handler
 - invalid theme entries
 - appear/disappear event handler
 - dispose methods
 
 There might even be some more. In addition we need a way to detect if the flush fails
 all the time and abort the recovery attempts.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11197</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-08-05 10:02:04 +0200</bug_when>
            <thetext>*** Bug 2650 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11199</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-08-05 10:02:20 +0200</bug_when>
            <thetext>*** Bug 2651 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11330</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-08-14 08:23:23 +0200</bug_when>
            <thetext>Very welcome idea. Not sure though if some kind of detection mentioned is needed as it is not so easy to detect when the same error happens again and again. But generally to protect every flush &quot;components&quot; from the others sounds like a good idea.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12650</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-09-25 10:36:46 +0200</bug_when>
            <thetext>*** Bug 2804 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12655</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-09-25 10:54:27 +0200</bug_when>
            <thetext>This is how it it is implemented now:

The whole body of the flush is wrapped in a try/catch/finally clause. If an exception is thrown in the user code the flush is scheduled again. The queues have been changed to remove the entries from the queue before they are processed. This way a failing entry will not be processed again. Before the flush is rescheduled a counter is increased. If the counter exceeds a fixed number the flush gives up because it is unable to recover. After each successful flush the counter is reseted to 0.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12656</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-09-25 10:54:40 +0200</bug_when>
            <thetext>fixed in r20197</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14530</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:15:18 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38358</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:24:21 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>