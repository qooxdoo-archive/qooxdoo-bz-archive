<bug>
          <bug_id>8360</bug_id>
          
          <creation_ts>2014-05-16 16:55:00 +0200</creation_ts>
          <short_desc>get virtual item by selection (item model data)</short_desc>
          <delta_ts>2014-05-21 08:52:47 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.virtual</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WORKSFORME</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.5.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Patrick Fischer">admin</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Christian Hagendorn">christian.hagendorn</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>40302</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2014-05-16 16:55:30 +0200</bug_when>
            <thetext>Maybe there is any method described but i haven&#39;t found it in the documentation yet.

I&#39;m looking for a possibility to access an created (virtual tree) item by selection (item model data).

Ecode example:
var tree = new qx.ui.tree.VirtualTree(null, &quot;name&quot;, &quot;files&quot;).set({
itemHeight : 31,
hideRoot : true,
width : 200
});

this.getRoot().add(tree);

var model = {
name : &quot;root&quot;,
files : [
  { name : &quot;dir&quot;, files : [
    { name : &quot;dir file #1&quot; },
    { name : &quot;dir file #2&quot; }
    ] },
  { name : &quot;file #1&quot; },
  { name : &quot;file #2&quot; },
]
};

model = qx.data.marshal.Json.createModel(model, true);

tree.setModel(model);


tree.getSelection().addListener(&quot;change&quot;, function(e) {
  var selection = tree.getSelection();
  selection = selection.getLength() &gt; 0 ? selection.getItem(0) : null;

  /*
    how???
    get tree item -&gt; change property of tree item, for example textColor
    treeItem.setTextColor(&#39;red&#39;);
  */
}, this);

playground example:
http://tinyurl.com/kajgzfw</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40306</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-05-19 08:20:13 +0200</bug_when>
            <thetext>I&#39;m not sure if that would be a good idea to access the tree items in that place. If you set the textColor and the tree gets rerendered, that item could be moved to another spot and you had no chance to reset the textColor.
For such changes like the tree color, you should use the theming system which handles all the details for you. Could that be an option?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40307</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2014-05-19 09:39:58 +0200</bug_when>
            <thetext>Thank you for anwsering. maybe my example wasn&#39;t so good.

In my application a switched from a controller based default Tree to a VirtualTree because I&#39;ve got too many datasets for displaying as tree items. The startup rendering time was more than 30 seconds. Not very useful. So I changed my code.

I updated the tree item too. A TreeItem consists of an icon, labels and a button. The button is controlled by a tree item property holding the state of the button. Only the button of the selected item is active for using to avoid or reduce unwanted callings.

I try to place as much state logic as possible inside the tree item code and in the tree code.

Now I will change all this by moving the logic to the tree model, which binds my state information to the tree item property.

Hope you could follow my statements.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40328</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-05-20 09:30:52 +0200</bug_when>
            <thetext>For that purpose, we do have a delete offering a bindItem [1] method where you can bind the property holding the state of the button to the button. This method makes sure the buttons are always updated according to the virtual nature of the tree. You can check out the Tree demo [2] in the demobrowser to see how this delegate is used.

[1] http://demo.qooxdoo.org/current/apiviewer/#qx.ui.tree.core.IVirtualTreeDelegate~bindItem
[2] http://demo.qooxdoo.org/devel/demobrowser/index.html#virtual~Tree_Columns.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40331</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2014-05-20 10:08:08 +0200</bug_when>
            <thetext>ok. thank you for the solution. I will use it. So: Works4me.</thetext>
          </long_desc>
      
      

    </bug>