<bug>
          <bug_id>4624</bug_id>
          
          <creation_ts>2011-02-08 09:19:00 +0100</creation_ts>
          <short_desc>Assert Consistency between Manifest.json Namespace and Class Files</short_desc>
          <delta_ts>2014-03-03 15:19:00 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>1.6</target_milestone>
          
          <blocked>5646</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tino Butz">tinobutz</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>dev</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>22593</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-02-08 09:19:51 +0100</bug_when>
            <thetext>In the manifest.json you can declare the &quot;namespace&quot; the lib is providing:

Manifest.js
&quot;provides&quot; : 
  {
    &quot;namespace&quot;   : &quot;foo&quot;,
...

The following scenario: When you rename the namespace of the application classes (e.g. from foo.ClassName to bar.ClassName) and forget to rename the namespace entry in the manifest.json you will get the following error when you call the &quot;translate&quot; job: 

./generate.py translation -s 

============================================================================
    INITIALIZING: FOO
============================================================================
&gt;&gt;&gt; Configuration: config.json
&gt;&gt;&gt; Jobs: translation
&gt;&gt;&gt; Resolving config includes...
  - ! Shadowing job &quot;source&quot; with local one
  - ! Shadowing job &quot;build-script&quot; with local one
  - ! Shadowing job &quot;build-files&quot; with local one
&gt;&gt;&gt; Resolving jobs...
&gt;&gt;&gt; Incorporating job defaults...
&gt;&gt;&gt; Resolving macros...
&gt;&gt;&gt; Resolving libs/manifests...

============================================================================
    EXECUTING: TRANSLATION
============================================================================
&gt;&gt;&gt; Initializing cache...
&gt;&gt;&gt; Scanning libraries...
&gt;&gt;&gt; Updating translations...
Traceback (most recent call last):
  File &quot;/Documents/workspace/qx_trunk/tool/bin/generator.py&quot;, line 218, in &lt;module&gt;
    main()
  File &quot;/Documents/workspace/qx_trunk/tool/bin/generator.py&quot;, line 212, in main
    generatorObj.run()
  File &quot;/Documents/workspace/qx_trunk/tool/pylib/generator/Generator.py&quot;, line 565, in run
    self.runUpdateTranslation()
  File &quot;/Documents/workspace/qx_trunk/tool/pylib/generator/Generator.py&quot;, line 1285, in runUpdateTranslation
    lib = [x for x in self._libraries if x.namespace == namespace][0]
IndexError: list index out of range

Perhaps we should add a general check for namespace inconsistency manifest.json &lt;-&gt; application classes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27245</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-10-18 16:09:35 +0200</bug_when>
            <thetext>*** Bug 5648 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27249</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-10-19 12:11:58 +0200</bug_when>
            <thetext>Re-phrased the bug summary, to better reflect the underlying issue.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27259</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-10-19 17:01:58 +0200</bug_when>
            <thetext>Consistency between Manifest.json and file system induced namespace is now checked. If violated, the generator raises an exception.

To accomplish this, I moved the entire Manifest.json handling from the Config to the Library class (where it is better suited anyway).

With r28955.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27307</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-10-24 11:15:45 +0200</bug_when>
            <thetext>Fixed building demobrowser; i&#39;ve also added a selective re-calculation of class 
names depending on existing cache entries and their freshnes, so in case the 
lib has to be re-scanned not *all* classes have to be re-inspected; added a 
experimental class name extraction based on parse tree; the changes somehow 
affected the unpickling of cache objects in a strange way (Resource.__hash__ 
would be called with no Resource._id in place), which hasn&#39;t happened before. i 
fixed the Resource.__hash__ method to provide alternatives (when this happens 
on unpickling, the Resource&#39;s __dict__ is acutally empty!?)

With r28980.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27309</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-10-24 11:38:54 +0200</bug_when>
            <thetext>About performance and future:

There is a perceivable performance hit on empty cache. It varies starkly across 
applications, in the range of 0% - 100% additional build time! This depends on 
the ratio between parsed classes in libraries, and used classes in the app. 
E.g. the Playground has no penalty at all, as it includes *all* framework 
classes, so there is no class parsed where the parse result is not used in the 
build. On the other end, the Portal app sees 100% more build time (3m20 instead 
of 1m40) as all the ca. 500 framework classes are parsed on library scanning, 
but only 150 are used in the build. As soon as library scan results are cached, 
the performance for builds is comparable to the old system. 

Martin and I found this a step in the right direction, despite the performance 
penalty. This penalty can (and hopefully will) be ameliorated, as we plan to 
switch to an on-demand scanning of library classes in the future, as expressed 
in bug#5735. Then, a class will only be scanned if it is actually used in a 
build (and it is not already cached), so the parse result is always required.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27311</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-10-24 11:57:20 +0200</bug_when>
            <thetext>NB:

We can easily switch back to regex-based class name extraction, by flipping the 
value of Library._scanClassPath.codeIdFromTree.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28137</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2012-01-02 11:11:56 +0100</bug_when>
            <thetext>Verified</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36307</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:00 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>