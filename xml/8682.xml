<bug>
          <bug_id>8682</bug_id>
          
          <creation_ts>2014-11-05 17:49:00 +0100</creation_ts>
          <short_desc>properties should support sub key &quot;writable&quot;/&quot;readonly&quot;</short_desc>
          <delta_ts>2014-11-21 16:36:22 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>next</product>
          <component>core</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Richard Sternagel">richard.sternagel</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>41516</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-11-05 17:49:50 +0100</bug_when>
            <thetext>Standard use case:
Class should be able to make property readonly.

My (edge) use case:
Sub class should be able to make property readonly (which was fully accessible before).

.---
| qx.Class.define(&quot;my.namespace.A&quot;,
| {
|   ...
|   properties: {
|     foo: {
|       ...
|     }
|   },
|   ...
| }
|

.---
| qx.Class.define(&quot;my.namespace.B&quot;,
| {
|   extend: my.namespace.A,
|   ...
|   properties: {
|     foo: {
|       readonly: true,
|     }
|   },
|   ...
| }
|

I&#39;m not decided which one is better: &quot;writable&quot; XOR &quot;readonly&quot;.

For native support see:
https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Writable_attribute</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41580</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-14 14:21:23 +0100</bug_when>
            <thetext>Added the &#39;writable&#39; property to the property definition which behaves as the native API. It returns the init value. If no init value is given, undefined will be returned. I had to remove the accessors to get the native API going which means you can not use this feature to replace a custom getter having some kind of evaluation in it. This could be possible but nut while using the native API. If thats necessary, we still could change that later.

next: 9d1dbe5b318a02205c4017afb1e3a5c362eea2e0</thetext>
          </long_desc>
      
      

    </bug>