<bug>
          <bug_id>4641</bug_id>
          
          <creation_ts>2011-02-11 11:37:00 +0100</creation_ts>
          <short_desc>Rethink feature detection class</short_desc>
          <delta_ts>2011-05-03 09:03:12 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>website</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.4</target_milestone>
          
          <blocked>4734</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>christian.hagendorn</cc>
    
    <cc>tinobutz</cc>
          <qa_contact name="Alexander Steitz">alexander.steitz</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>22679</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-02-11 11:37:49 +0100</bug_when>
            <thetext>The current implementation of our feature detection is very monolithic which means, is in one single class. The growing number of features we ant to detect demands a rethink of the current structure. We should also think about async tests for example and all the mobile stuff, which could also nee the detection.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22943</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-02-24 13:59:17 +0100</bug_when>
            <thetext>Just an idea:

Would be nice to concatenate the feature, e.g.:

Feature.has(&quot;iphone&amp;phoneGap.featureX&quot;)

would call first the iphone check and than call the &quot;phoneGap&quot; check function:

this[&quot;phoneGap&quot;].supported()

PhoneGap.supported : function {
  return window.PhoneGap != null
}

and than the function

this[&quot;phoneGap&quot;][&quot;featureX&quot;]() 

PhoneGap.featureX = function() {
  return window.PhoneGap.featureX != null;
}

We could save the single results + the whole result in a Map and return the result the next time.

We could use Classes (or Mixins?) for the different feature categories and register the feature tests in the defer. Custom feature tests could be added like this as well.

Feature.add(&quot;phoneGap&quot;, PhoneGap);

These feature strings could be used as variants as well. The generator could optimize the code, by removing the blog or translating the feature strings to javascript code. Feature checks that never were used could than be removed by the static analysis.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22944</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-02-24 14:05:54 +0100</bug_when>
            <thetext>(In reply to comment #1)

So for me there is no difference between (browser)feature / browser / runtime / extension / device whatsoever. These are all checks that will return a boolean - why not merging it all together into one clear system.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23004</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-02-28 16:35:24 +0100</bug_when>
            <thetext>Here are some things we need to consider:

* Split up detection in separate files
* Find a way to exclude code for specific features (feature based builds)
* Handle asynchronous detection of features
* Execute the detection test on demand
* Cache already detected features
* Add a way to invalidate the cache in case a feature could be reloaded
* Find a way to include the classes implementing feature detection on demand (without #require)
* combine detection for features, browsers, engine
* Handle detections having a value like browser version e.g.
* Merge with variants
* Merge with settings
* Detections should not use much infrastructure (bootstrap classes at most)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23184</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-09 17:36:03 +0100</bug_when>
            <thetext>Just committed the move from static properties for separate method checks using a dedicated class. Still got to change settings and variants.

~ r25445-r25489</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23220</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-11 07:52:57 +0100</bug_when>
            <thetext>*** Bug 3097 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23357</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-03-17 15:24:52 +0100</bug_when>
            <thetext>*** Bug 4484 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23496</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-23 18:43:01 +0100</bug_when>
            <thetext>Finally moved all variants in the framework and the apps to the environment class. Also added deprecation warnings to all public methods of qx.core.Variant. 

trunk: r25994 - r26013

Still missing, a manual page and the class comment of qx.core.Environment.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23693</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-29 10:37:17 +0200</bug_when>
            <thetext>Class comment and manual page has been added meanwhile. Therefore, I mark that bug as fixed.</thetext>
          </long_desc>
      
      

    </bug>