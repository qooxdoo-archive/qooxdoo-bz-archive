<bug>
          <bug_id>587</bug_id>
          
          <creation_ts>2007-08-10 17:14:00 +0200</creation_ts>
          <short_desc>Add support for Label &quot;for&quot; attribute (like in HTML)</short_desc>
          <delta_ts>2014-03-03 15:22:51 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.core</component>
          <version>0.7.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          
          <blocked>2099</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stefan Kloiber">stefan.kloiber</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>info</cc>
    
    <cc>thron7</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>2117</commentid>
            <who name="Stefan Kloiber">stefan.kloiber</who>
            <bug_when>2007-08-10 17:14:44 +0200</bug_when>
            <thetext>Unlike the HTML element label, the qx.ui.basic.Label has no for attribute.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>2237</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2007-09-11 14:26:28 +0200</bug_when>
            <thetext>Marked as enhancement.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3329</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-06-12 17:23:38 +0200</bug_when>
            <thetext>to sw</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4455</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2008-08-19 17:29:53 +0200</bug_when>
            <thetext>Good idea. Basically a focus redirection.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>4463</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2008-08-19 17:39:06 +0200</bug_when>
            <thetext>to none</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9509</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-04-23 10:43:53 +0200</bug_when>
            <thetext>to martin</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9550</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-04-23 14:50:37 +0200</bug_when>
            <thetext>Assigned!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9580</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-04-24 10:11:37 +0200</bug_when>
            <thetext>Added the feature in revision 18872.
The property is called buddy (like in Qt) and can be found on every label.
http://doc.trolltech.com/4.5/qlabel.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9589</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-04-24 10:40:14 +0200</bug_when>
            <thetext>Wow, never knew that this is named &quot;buddy&quot; in other frameworks. Neat.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9593</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-04-24 10:46:57 +0200</bug_when>
            <thetext>You missed the dispose section for: &quot;__buddyEnabledBinding&quot; and the name of &quot;__clickListenerId&quot; is to generic in my opinion. Interesting that you use data binding. The events and bindings should also be cleared in dispose.

BTW: You don&#39;t need the closure at all there. Why not just attach &quot;value.focus&quot; with the context &quot;value&quot; to the listener?

Just wonder why you think that HTML&#39;s &quot;for&quot; is the same as &quot;buddy&quot; in Qt. When I read their documentation they only mention keyboard support for the underlined character (mnemonics - currently not supported in qooxdoo). Nothing regarding mouse click support. Do I overlook something or may there be another property available for this? Can you point me to your source?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9603</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-04-24 11:27:54 +0200</bug_when>
            <thetext>Thanks for reminding me. I really missed the dispose section. But its done now (revision 18877).
I have left the name __clickListenerId like it is because its a private member in a label and therefore does have no impact on other classes.

Sure i dont need the closure here. But the code is much more readable with it.

We have tested the buddy property in the Designer of Qt. The buddy property in Qt supports the click (not on OSX) for sure. But I don&#39;t know if it supports the enabled propagation.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9605</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-04-24 12:32:16 +0200</bug_when>
            <thetext>The closure is against coding guidelines of qooxdoo. We don&#39;t use closures in this way :)

At least you - if you really think it&#39;s more readable - put the function outside.

But it&#39;s definitely simpler to just attach the target function directly. And it would save you the event ID storage.

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9606</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-04-24 12:34:30 +0200</bug_when>
            <thetext>Cool, that you tested it out in the designer. At least this behavior is not covered in their API documentation.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9608</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-04-24 12:37:59 +0200</bug_when>
            <thetext>BTW: The binding should be cleared as well. It makes no sense to keep the binding active in an disposed object.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9610</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-04-24 12:58:27 +0200</bug_when>
            <thetext>I have removed the binding in the dispose.

But before i change the closure stuff, could you show me the coding guidelines? I haven&#39;t found them in the wiki and even if, I dont agree with them. So perhaps that is a topic we should change in the guidelines if there are some in written from.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9612</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-04-24 13:48:47 +0200</bug_when>
            <thetext>Closures in general are expensive. Not sure where something like this is mentioned in the documentation. Maybe it&#39;s more like a public consensus. Just look out for code like the one you have written there. The framework basically don&#39;t use closures for these things. Keep in mind that the function is (re-)created for every call of the function. What a bloat - especially in bad garbage collectors like IE6.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9613</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-04-24 14:05:44 +0200</bug_when>
            <thetext>To Andreas.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9655</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-04-25 00:29:28 +0200</bug_when>
            <thetext>Closures are ok even in IE6 if you just take care not to create circular references. See http://www.jibbering.com/faq/faq_notes/closures.html#clMem and
http://www.codeproject.com/KB/scripting/leakpatterns.aspx.

Crockford uses closures to implement private and protected class members:
http://www.crockford.com/javascript/private.html

Here is an article that warns about pitfalls of closures, but is generally positive about them when they are used considerately (avoiding unnecessary closure creation, immediate consumption of the closure, no cyclic references, etc.):
https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Working_with_Closures#Performance_considerations

A newer blog entry that compared performance of closures in certain context (but mind comment about IE): http://joose-js.blogspot.com/2009/03/closures-vs-properties-argumentscallee.html

I also found this article that compares binding and closures (not sure if it might be helpful here): http://www.alistapart.com/articles/getoutbindingsituations
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9656</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-04-25 00:57:56 +0200</bug_when>
            <thetext>Thomas, not really anything new. Would be interesting what your occasion was to answer in such a longly comment which is mainly unrelated to the bug topic. Are you our new JavaScript performance guru? ;)

To keep this producitve: Hopefully nobody want to disagree with:

1. Variable lookup in closures is slower (so the execution of their content, was reported some time ago by the webkit developers)
2. Re-creation of functions/objects is expensive (triggers garbage collectore more often - and this is an issue in IE6)
3. That Crockford uses closures says nothing. It&#39;s more interesting that his module pattern (which you mean, by the way) is slower than prototypal inheritance. For the same reason like point #2. For John Resig  this insight was one reason why jQuery now uses less closures and function calls in critical areas and that&#39;s why jQuery 1.3 is so much faster than 1.2. Another example: Atlas moved two years ago from the module pattern to prototypal inheritance. In fact all large frameworks I know off do not depend on the module pattern: qooxdoo, Bindows, Backbase, ExtJS, ...
4. Prototype-based members are shared between instances and method calls. This is good because it means less memory fluctuation, memory usage and performance.

Thomas, we can keep this going but until you throw anything new into the discussion, I would say this is useless. Especially regarding that this bug is not regarding pro/cons of closures. It was just about that this is not a common pattern in qooxdoo - and IMO for good reason. I still wonder why at all this is in question now. So, if we need further discussion on this, the mailing list might be the better channel.

BTW: In the case mentioned here, the closure is completely useless. So when we are following the Mozilla article the closure should be removed from the function.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9658</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-04-25 01:21:48 +0200</bug_when>
            <thetext>(In reply to comment #18)
&gt; Thomas, not really anything new. Would be interesting what your occasion was to
&gt; answer in such a longly comment

You don&#39;t have a monopole on this, have you?! ;)

&gt; which is mainly unrelated to the bug topic. Are

But related to the current discussion in the bug.

&gt; you our new JavaScript performance guru? ;)

Certainly not. What I wanted to bring to the discussion was *factual information* and *evidence*, in contrast to piling up claims nobody can verify. I think such a discussion style is more productive.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9659</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-04-25 07:58:48 +0200</bug_when>
            <thetext>Thomas, do you really think that it&#39;s more productive when every bug re-discusses best-practises? These are there to improve productivity. It is OK to question these from time to time, but it makes no sense to do it bug-related IMHO.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9660</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-04-25 08:01:29 +0200</bug_when>
            <thetext>Sure, some kind of own documentation in the wiki would be helpful. Maybe even for more things regarded as best-practise in the qooxdoo world. Some of these are already covered by this article:

http://qooxdoo.org/documentation/general/javascript_best_practises

but closures are really still missing.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9682</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-04-27 12:16:38 +0200</bug_when>
            <thetext>This must be some sort of a bad joke. :-( Or has this become a place to publicly disallow people from providing technical input to a discussion? Looks like it was completely misunderstood (?) that the list to articles about closures in comment #17 was just another neutral input, and not suggesting the use of closures within this specific bug. Even if it were, what should be wrong with taking into account developers&#39; different point-of-views within a technical discussion? Every developer expects to be able to provide his/her individual input and insight, so this holds for all other devs as well.

That being said I encourage everyone to return to a technical level again and to add real value to this topic (which obviously is important). Thanks for pointing out here there seems to be a lack of information about closures (also the aspects that affect qooxdoo as a framework), so let us nail things down on a wiki page. Thomas&#39; links as well as Sebastian&#39;s arguments are an excellent starting point, so I added them to 
http://qooxdoo.org/documentation/general/javascript_best_practises#using_or_not_using_closures
Please feel free to add more info that you think is relevant.

Regarding this bug-specific implementation detail that sparkled such a fierce general discussion over the weekend, I already added a suggestion on Friday evening to http://qooxdoo.org/documentation/general/coding_style that I wanted to discuss with Martin today anyway. While each of the different implementation possibilities may have their pros/cons, when looking into the existing code base I realize quite a consistent use of externalized protected event handlers in such scenarios, right? So (@Martin) I suggest to continue with that implementation style here as well, unless the more general discussion about closures may lead to a clearly superior implementation that we&#39;d have to address separately, consistently and in large.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9696</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-04-27 15:01:23 +0200</bug_when>
            <thetext>If i had known that this topic is so religious I would have just removed the closure and thats it! Have done it now (revision 18908) and I hope now is everybody pleased with it.
I guess it does not make any difference because its not really a performance critical piece of code anyway. So I think it really not worth the effort and the whole discussion!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14432</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:14:30 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14886</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 22:05:36 +0100</bug_when>
            <thetext>corrected wrong milestone (was 0.9, but was fixed for 0.8.3 already)
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37829</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:22:51 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>