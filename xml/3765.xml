<bug>
          <bug_id>3765</bug_id>
          
          <creation_ts>2010-06-14 13:32:00 +0200</creation_ts>
          <short_desc>First leaf has open/close symbol when adding to the root</short_desc>
          <delta_ts>2010-06-15 09:10:29 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.treevirtual</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>Windows</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>INVALID</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="saaj">id</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>18676</commentid>
            <who name="saaj">id</who>
            <bug_when>2010-06-14 13:32:13 +0200</bug_when>
            <thetext>It happens when adding more then one leaf directly to the virtual root

  var tree = new qx.ui.treevirtual.TreeVirtual(&quot;Tree&quot;);

  var dataModel = tree.getDataModel();

  dataModel.addLeaf(null, &quot;A&quot;);
  dataModel.addLeaf(null, &quot;B&quot;);

  dataModel.setData();

When adding a leaf, it looks correct.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18679</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2010-06-14 13:55:49 +0200</bug_when>
            <thetext>It&#39;s a feature, not a bug. :-)

You have tried to create a tree with multiple root nodes. There are places where that&#39;s appropriate, but when you do that, they would be branches, not leaves. 

If you want multiple top-level leaves then you also want to disable tree lines at the first level:

tree.setExcludeFirstLevelTreeLines(true);

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18687</commentid>
            <who name="saaj">id</who>
            <bug_when>2010-06-14 16:57:13 +0200</bug_when>
            <thetext>That&#39;s strange. Leaves haven&#39;t got nodes, branches have. So leaves don&#39;t have open/close symbol, branches have. That&#39;s clear and strict enough, in my opinion, and it doesn&#39;t depend on whether node is root or not. Why should it make sense whether it&#39;s multiple-root case or so. In other words, what is this feature&#39;s benefit, when I add a leaf and it behaves as a branch? 

The method name (setExcludeFirstLevelTreeLines) is rather obscure. What kind of lines, if there&#39;re no lines since 0.8 in trees, in default (Modern) theme? Also when I set it to true, first level&#39;s branches loose the open/close symbol. </thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18688</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2010-06-14 17:08:19 +0200</bug_when>
            <thetext>The open/close button on the leaf is a symptom of the fact that a root node is always a branch, and root nodes are treated specially. Yes, it&#39;s a bit strange that you get the open/close button on it, but that&#39;s specifically for the reason I detailed. The first node you provide is supposed to be a root, and roots are always branches, so if you want an implicit root where you add additional branches and leaves, you simply disable tree lines at the first level.

You are correct. The name of the method is outdated, but remains for historical reasons.

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18689</commentid>
            <who name="saaj">id</who>
            <bug_when>2010-06-14 17:30:40 +0200</bug_when>
            <thetext>I&#39;ve started to realize what you mean. But there&#39;re some things still seem incomplete.

1) If all root nodes are considered branches, why only first leaf-root has open/close symbol?
2) Why not to restrict addition of leaves to empty tree, which will make it clear, opposite to current silent-smart-fixing-widget with ambiguous state (of nodes)? 

saaj</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18690</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2010-06-14 17:36:56 +0200</bug_when>
            <thetext>The open/close button on the first leaf is a side effect of the &quot;misuse&quot; of the intention of top-level nodes. Since it&#39;s a side effect, it impacts only that first entry.

I would consider preventing leaf nodes from being added at the root level, but I suspect it would break existing code that depends on that feature. It&#39;s actually a reasonable thing to do; you just need to specify no first-level tree lines and the &quot;problem&quot; goes away, so I don&#39;t think I&#39;m going to change it at this point. Given that there&#39;s an easy work-around and a &quot;fix&quot; would likely cause other breakage, I&#39;ll leave it alone.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18691</commentid>
            <who name="saaj">id</who>
            <bug_when>2010-06-14 17:49:28 +0200</bug_when>
            <thetext>OK, I understand. I end up with:

    Beautiful is better than ugly.
    Explicit is better than implicit.
    Simple is better than complex.
    Complex is better than complicated.
    Flat is better than nested.
    Sparse is better than dense.
    Readability counts.
    Special cases aren&#39;t special enough to break the rules.
    Although practicality beats purity.
    Errors should never pass silently.
    Unless explicitly silenced.
    In the face of ambiguity, refuse the temptation to guess.
    There should be one-- and preferably only one --obvious way to do it.
    Although that way may not be obvious at first unless you&#39;re Dutch.
    Now is better than never.
    Although never is often better than *right* now.
    If the implementation is hard to explain, it&#39;s a bad idea.
    If the implementation is easy to explain, it may be a good idea.
    Namespaces are one honking great idea -- let&#39;s do more of those!

The Zen of Python, by Tim Peters.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18694</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-06-15 09:10:29 +0200</bug_when>
            <thetext>CLOSED</thetext>
          </long_desc>
      
      

    </bug>