<bug>
          <bug_id>3797</bug_id>
          
          <creation_ts>2010-06-25 11:36:00 +0200</creation_ts>
          <short_desc>Test specific tearDown</short_desc>
          <delta_ts>2014-03-03 15:24:23 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.dev.testing</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.3</target_milestone>
          <dependson>3798</dependson>
    
    <dependson>3954</dependson>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>18919</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-06-25 11:36:46 +0200</bug_when>
            <thetext>Our test system currently has build in support for one tearDown method each class. Most of the time, it could be useful to have also a test specific tearDown method e.g. for cleaning up the used objects.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21248</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-11-11 16:56:19 +0100</bug_when>
            <thetext>This is implemented in testrunner2.unit.TestResult (which extends qx.dev.unit.TestResult). This means the feature is only available if the new testrunner is used - tests that rely on it could cause problems if run in the current testrunner.

We could move the code to qx.dev.unit.TestResult so that it wouldn&#39;t depend on a specific runner GUI being used. It doesn&#39;t break backwards compatibility with existing unit tests, so there should be no problem.

Martin, what do you think?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21254</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-11-12 11:32:22 +0100</bug_when>
            <thetext>Agreed. Thats dev code which should be independent of the used runner. If its not a problem for existing use cases, there is no reason to keep it in the new runner.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21261</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-11-12 14:30:31 +0100</bug_when>
            <thetext>Moved the code to qx.dev.unit.TestResult with r23796.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38370</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:24:23 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>