<bug>
          <bug_id>5328</bug_id>
          
          <creation_ts>2011-07-05 14:36:00 +0200</creation_ts>
          <short_desc>removeListenerByType()  function</short_desc>
          <delta_ts>2016-03-17 18:30:34 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.event</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          <votes>2</votes>
          <everconfirmed>1</everconfirmed>
          <reporter name="Mustafa Sak">mustafa.sak</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>marcputs</cc>
    
    <cc>schnepe2</cc>
    
    <cc>volbers</cc>
          <qa_contact name="Christian Hagendorn">christian.hagendorn</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>25753</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2011-07-05 14:36:03 +0200</bug_when>
            <thetext>As I told at list:

removeListenerByType : function(target, eventType)
{
	var listenerIds = qx.event.Registration.getManager(target).getListeners(target, eventType);

	if (listenerIds == null) {
		return;
	}

	for (var i=0; i&lt;listenerIds.length; i++)
	{
		var listenerHandler = listenerIds[i].handler;
		var context = listenerIds[i].context;
		qx.event.Registration.getManager(target).removeListener(target, eventType, listenerHandler, context);
	}
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>25782</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-07-06 08:10:07 +0200</bug_when>
            <thetext>Thanks for the report. Could you maybe also post a link to the original thread on the list?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26307</commentid>
            <who name="Marc Puts">marcputs</who>
            <bug_when>2011-07-28 23:00:35 +0200</bug_when>
            <thetext>I just ran into a situation too, so here&#39;s my vote. :)

And the requested link to the ML thread:
http://qooxdoo.678.n2.nabble.com/removeListener-vs-removeListenerById-td6546722.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31491</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2012-11-28 15:28:47 +0100</bug_when>
            <thetext>What do you think Martin, should we implement such a util function? 
Best practice is still to not use anonymous function for listener, but should we be such restrictive?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31520</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-11-29 08:47:42 +0100</bug_when>
            <thetext>(In reply to comment #3)
&gt; What do you think Martin, should we implement such a util function? 
&gt; Best practice is still to not use anonymous function for listener, but should
&gt; we be such restrictive?

I think that could be a good addition but not an important one. ;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36186</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 09:34:52 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year or we don&#39;t think it will be fixed in the near future.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43716</commentid>
            <who name="Peter Schneider">schnepe2</who>
            <bug_when>2016-03-17 18:30:34 +0100</bug_when>
            <thetext>Another &quot;pro&quot; vote for this to be implemented:

I wanted to derive from qx.ui.form.SelectBox, but that class added a Listener to a private member, which I needed to override.

So here&#39;s what I could have done with this function available:

// ----------------------------------------------------------------------------
qx.Class.define(&quot;my.SelectBox&quot;, {
// ----------------------------------------------------------------------------
  extend : qx.ui.form.SelectBox,
  construct : function ()
  {
    this.base(arguments);
    this.removeListenerByType(this, &quot;changeSelection&quot;);
    this.addListener(&quot;changeSelection&quot;, this.__onChangeSelection2, this);
  },
  // ...
  members : {
    __onChangeSelection2 : function (e) { /* ... */ }
  }
});
// ----------------------------------------------------------------------------


Sure, making the event handler protected at qx.ui.form.SelectBox in the first
place would be better,...
but anyway, just my 2 ct</thetext>
          </long_desc>
      
      

    </bug>