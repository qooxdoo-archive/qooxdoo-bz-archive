<bug>
          <bug_id>4899</bug_id>
          
          <creation_ts>2011-03-31 00:12:00 +0200</creation_ts>
          <short_desc>ImageLoader not removing onload listeners on call to abort</short_desc>
          <delta_ts>2011-08-08 08:19:48 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io</component>
          <version>1.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>Windows</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc>http://demo.qooxdoo.org/1.3.x/playground/#%7B%22code%22%3A%20%22var%2520imgUrl%2520%253D%2520%2522http%253A%252F%252Fbit.ly%252FdPThCr%2522%253B%250Avar%2520img%2520%253D%2520new%2520qx.ui.basic.Image%28imgUrl%29%253B%250Avar%2520doc%2520%253D%2520this.getRoot%28%29%253B%250Adoc.add%28img%29%253B%250Aqx.io.ImageLoader.abort%28imgUrl%29%253B%250A%22%7D</bug_file_loc>
          
          
          <priority>P4</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>1.4.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Nick T">Nicholas.Tindall</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Tristan Koch">tristan.koch</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>23725</commentid>
            <who name="Nick T">Nicholas.Tindall</who>
            <bug_when>2011-03-31 00:12:20 +0200</bug_when>
            <thetext>If qx.io.ImageLoader.abort(&quot;someUrl&quot;) is called while a qx.ui.basic.Image is loading &quot;someUrl&quot;, errors are thrown when &quot;someUrl&quot; finishes loading. It appears as though the onload listeners are not being removed from the image correctly.

See attached playground URL for an example. Using this exampled I have been able to reproduce the error on Chrome 10, Firefox 4 and IE7.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23726</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-31 08:14:16 +0200</bug_when>
            <thetext>Thanks for the report. If i can get it done today, it will make it into the 1.4 release.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23730</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-31 11:54:31 +0200</bug_when>
            <thetext>Added a hotfix which handles the error in the callback. Still need to check why the callback is called in the first place because we are removing the callbacks properly. Going to check that after the 1.4 release.

trunk: r26439
1.3.x: r26441</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23740</commentid>
            <who name="Nick T">Nicholas.Tindall</who>
            <bug_when>2011-03-31 23:38:52 +0200</bug_when>
            <thetext>Yeah I had a look at the code and thought it was strange the callback was still being called. In any case, thanks for the rapid response! :)

(In reply to comment #2)
&gt; Added a hotfix which handles the error in the callback. Still need to check why
&gt; the callback is called in the first place because we are removing the callbacks
&gt; properly. Going to check that after the 1.4 release.
&gt; 
&gt; trunk: r26439
&gt; 1.3.x: r26441</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>25719</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-07-04 11:19:35 +0200</bug_when>
            <thetext>This was a good one. Hard to fix and find but a good one! The Image class itself did not handle the aborted state, which was the initial bug. With that, it acted like the image was loaded and triggered a restyling of the image widget. This method is used to load the image as well which leaded to a second load right after the abort. So in the end, the first pail of listeners have been removed as they should be not for the second load call, which was triggered by the abort! Having that in mind, the abort could not have worked at all in that scenario because the second load was triggered so the loading was done anyway!

trunk: r27954
1.4.x: r27955</thetext>
          </long_desc>
      
      

    </bug>