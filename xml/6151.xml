<bug>
          <bug_id>6151</bug_id>
          
          <creation_ts>2012-02-16 09:36:00 +0100</creation_ts>
          <short_desc>Integrate an ECMAScript 5 polyfill library</short_desc>
          <delta_ts>2012-08-27 08:03:32 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.lang</component>
          <version>1.6</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.1</target_milestone>
          
          <blocked>6503</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Wagner">daniel.wagner</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>tristan.koch</cc>
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>28574</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2012-02-16 09:36:58 +0100</bug_when>
            <thetext>We should look into integrating an existing ECMAScript 5 polyfill library into the framework to ensure a common baseline of available language features in all supported clients. This would replace the existing qx.lang.Generics class.

A good approach would be to first write unit tests for ES5 features, then find a library that makes them pass in older clients (at least as far as it&#39;s technically feasible to provide shims).

ddr-ecma5 is one candidate:
https://github.com/ddrcode/ddr-ecma5</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28575</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-02-16 09:40:44 +0100</bug_when>
            <thetext>With that, we could also deprecate some of the stuff in qx.lang because we should encurage the users to use the native features and not some kind of old implementation we have in qx.lang.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28576</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-02-16 09:43:01 +0100</bug_when>
            <thetext>Here is another candidate. I didn&#39;t test it, but seen projects using it.

https://github.com/kriskowal/es5-shim</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28577</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-02-16 09:55:05 +0100</bug_when>
            <thetext>Here is also a good documentation: http://es5.github.com/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28923</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-03-21 08:21:11 +0100</bug_when>
            <thetext>Here is a list of all functions in the qx.lang namespace which needs to be checked is still necessary or replecable with some kind of ES5 pollyfill



Array.js
67:    toArray : function(object, offset) {
84:    cast : function(object, constructor, offset)
132:    fromArguments : function(args, offset) {
143:    fromCollection : function(coll)
171:    fromShortHand : function(input)
202:    clone : function(arr) {
215:    insertAt : function(arr, obj, i)
231:    insertBefore : function(arr, obj, obj2)
253:    insertAfter : function(arr, obj, obj2)
274:    removeAt : function(arr, i) {
285:    removeAll : function(arr)
300:    append : function(arr1, arr2)
324:    exclude : function(arr1, arr2)
353:    remove : function(arr, obj)
372:    contains : function(arr, obj) {
385:    equals : function(arr1, arr2)
411:    sum : function(arr)
429:    max : function(arr)
455:    min : function(arr)
484:    unique: function(arr)

Date.js
48:    now : function() {

Function.js
56:    getCaller : function(args) {
69:    getName : function(fcn)
137:    globalEval : function(data)
150:    empty : function() {},
158:    returnTrue : function() {
168:    returnFalse : function() {
178:    returnNull : function() {
188:    returnThis : function() {
198:    returnZero : function() {
225:    create : function(func, options)
325:    bind : function(func, self, varargs)
357:    curry : function(func, varargs)
377:    listener : function(func, self, varargs)
434:    attempt : function(func, self, varargs)
469:    delay : function(func, delay, self, varargs)
501:    periodical : function(func, interval, self, varargs)

Generics.js
97:    __wrap : function(obj, func)
110:    __init : function()
140:  defer : function(statics) {

Json.js
198:  defer : function(statics)

JsonImpl.js
43:  construct : function()
76:    stringify : function(value, replacer, space)
124:    __str : function(key, holder)
260:    dateToJSON : function(date)
292:    __quote : function(string)
335:    parse : function(text, reviver)
391:    __walk : function(holder, key, reviver)

Number.js
39:    isInRange : function(nr, vmin, vmax) {
52:    isBetweenRange : function(nr, vmin, vmax) {
69:    limit : function(nr, vmin, vmax)

Object.js
33:    empty : function(map)
55:    isEmpty : function(map)
77:    hasMinLength : function(map, minLength)
139:    getValues : function(map)
177:    carefullyMergeWith : function(target, source)
196:    merge : function(target, varargs)
219:    clone : function(source, deep)
257:    invert : function(map)
282:    getKeyFromValue: function(map, value)
306:    contains : function(map, value)
323:    select: function(key, map)
342:    fromArray: function(array)
386:    toUriParameter: function(obj, post)

RingBuffer.js
42:  construct : function(maxEntries)
77:    setMaxEntries : function(maxEntries)
89:    getMaxEntries : function() {
99:    addEntry : function(entry)
122:    mark : function(){
131:    clearMark : function(){
141:    getAllEntries : function() {
156:    getEntries : function(count, startingFromMark)
198:    clear : function()
215:    __addToIndex : function (idx, addMe){

String.js
93:    camelCase : function(str)
117:    hyphenate: function(str)
138:    capitalize: function(str){
163:    clean: function(str){
174:    trimLeft : function(str) {
185:    trimRight : function(str) {
196:    trim : function(str) {
208:    startsWith : function(fullstr, substr) {
220:    endsWith : function(fullstr, substr) {
232:    repeat : function(str, times) {
245:    pad : function(str, length, ch)
289:    contains : function(str, substring) {
304:    format : function(pattern, args)
324:    escapeRegexpChars : function(str) {
336:    toArray : function(str) {
349:    stripTags : function(str) {
361:    stripScripts: function(str, exec)

Type.js
86:    isRegExp : function(value) {
97:    isNumber : function(value) {
117:    isBoolean : function(value)
138:    isDate : function(value)
159:    isError : function(value)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30208</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-07-20 12:00:39 +0200</bug_when>
            <thetext>After some discussions, we decided not to include such a library. Most of the code is already available in qx.lang.Core and can be reused. Additionally, we could benefit from the environment infrastructure to create custom builds for mobile e.g. which would reduce the code size as well.</thetext>
          </long_desc>
      
      

    </bug>