<bug>
          <bug_id>4131</bug_id>
          
          <creation_ts>2010-09-29 11:14:00 +0200</creation_ts>
          <short_desc>Automatic keys for language strings to save space</short_desc>
          <delta_ts>2014-03-03 08:47:31 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stefan Andersson">dev</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>20389</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-09-29 11:14:54 +0200</bug_when>
            <thetext>It would be good if the generator could generate keys for the strings to be localized instead of saving the long strings in the built js file. Not to loose the link, the generator could add a commented line of the original text for good visualisation.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20390</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-09-29 11:15:44 +0200</bug_when>
            <thetext>This would save space and execution time!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20394</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-29 11:37:33 +0200</bug_when>
            <thetext>Thomas, what do you think about that?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20424</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-09-30 16:00:48 +0200</bug_when>
            <thetext>I think it might be a nice feature, but I&#39;m not sure about the realization. I 
see two options here:

1) You could change the keys in the source code, some &quot;genereate.py 
translation-keys&quot; job, similar to other source code transformation jobs. Then 
you would need to add comments in the source code and the generated .po files, 
like the OP suggested. - The problem I see here is that of maintainability. 
Once you replaced the translation keys, what if the programmer wants to change 
a key? It would be quite tedious to change the comment and then expect the 
generator to pick up the change and create a new short key. Seems like too much 
work, and sort of ugly.

2) You could change the keys when creating the application (build version). You 
have the long keys in the source code and in the .po files. When generating, 
the long keys could be replaced by short keys in both the translation lookup 
tables and the generated code. This leaves souce code and .po files untouched 
and affects only generated code, which I consider fine. It would make the 
generation process slower, though, as the generator has to traverse all code 
trees and replace the keys.

A general problem here (the same as we have with private optimization) is that 
with generating good, short keys. All algorithms that do not need global 
knowledge (e.g. hash) create fairly long keys. If you want short keys, e.g. 
through enumeration as we do with privates, you need global knowledge, i.e. you 
need to know all keys of all classes that go into the app, main code as well as 
framework code as well as any library or contrib you deploy. It is doable, but 
I&#39;m not very happy with it, and it breaks independence and composability of 
generated packages.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35930</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:31 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>