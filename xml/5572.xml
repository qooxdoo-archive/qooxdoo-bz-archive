<bug>
          <bug_id>5572</bug_id>
          
          <creation_ts>2011-08-31 14:16:00 +0200</creation_ts>
          <short_desc>XHR - Abort Event: Fire Abort event, when native Xhr fires abort event</short_desc>
          <delta_ts>2012-01-02 07:35:08 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.6</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tino Butz">tinobutz</reporter>
          <assigned_to name="Tristan Koch">tristan.koch</assigned_to>
          
          <qa_contact name="Tristan Koch">tristan.koch</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>26640</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-08-31 14:16:31 +0200</bug_when>
            <thetext>In the new specification the native xhr is firing an abort event, when the abort method is called. 

http://www.w3.org/TR/XMLHttpRequest2/#the-abort-method

As you can see in the event overview the specification points out the abort event is fired &quot;When the request has been aborted. For instance, by invoking the abort() method.&quot; To be on the save side (you never know, if the abort is also called by the browser), we should listen on this event.

http://www.w3.org/TR/XMLHttpRequest2/#events

In addition to this, the &quot;abort&quot; spec points out, that the &quot;readystatechange&quot; event is fired and the error flag is set. As we only listen to the &quot;readystatechange&quot; event, our implementation will fire the &quot;error&quot; and the &quot;fail&quot; event because of this. We should document in the API, that in case of an &quot;abort&quot; also a fail and error event is fired.

Just a reminder:
Please document the interaction of the various events (error, fail, success, load, timeout, loadEnd, statusError, abort), with a nice diagram. This is kind of hard to understand, how they belong together and when one event is fired.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26664</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2011-09-02 10:00:46 +0200</bug_when>
            <thetext>With r28595 on trunk.</thetext>
          </long_desc>
      
      

    </bug>