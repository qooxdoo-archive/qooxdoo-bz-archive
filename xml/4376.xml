<bug>
          <bug_id>4376</bug_id>
          
          <creation_ts>2010-11-26 15:40:00 +0100</creation_ts>
          <short_desc>No lint warnings for missing semicolon</short_desc>
          <delta_ts>2014-03-03 15:22:31 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tristan Koch">tristan.koch</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>21589</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2010-11-26 15:40:30 +0100</bug_when>
            <thetext>In case you mistakenly hit &quot;:&quot; instead of &quot;;&quot;, then save and check the file with the built-in lint, no warning is shown. Of course, when running the script a SyntaxError is thrown.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24035</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2011-04-13 18:29:39 +0200</bug_when>
            <thetext>While experimenting with Commit Hooks and stand-alone jsl (http://www.javascriptlint.com), I found some more flaws.

As a matter of fact the built-in lint does not seem detect missing semicolons at all. This is apparent in  Class.js (qx.Class) that has missing semicolons in line 1177, 1368, 1388 and more. Moreover, jsl complains about a variable hiding an argument in line 158.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>25820</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-07-06 19:47:18 +0200</bug_when>
            <thetext>The information in this bug is too limited to allow a proper answer:

1) &quot;In case you mistakenly hit &quot;:&quot; instead of &quot;;&quot;, then save and check the file 
with the built-in lint, no warning is shown.&quot;
This is generally not true. E.g. if your file consists of the single statement 
&#39;var a = &quot;foo&quot;:&#39;, ecmalint will throw an exception. Actually,  this is an 
exception of the underlying parser, so ecmalint doesn&#39;t even get a chance to 
work on the parsed code. That means that in general un-grammatical statements 
are rejected on the parser level. You must be more specific how to reproduce 
the issue. (I assume you used &#39;:&#39; in a place where both &#39;:&#39; and &#39;;&#39; would be 
grammatical). If you can reproduce the flaw (being either a parser or ecmalint 
bug), I&#39;m interested in fixing it.

2) Missing semicolons
Firstly, missing semicolons are grammatical, so it&#39;s more a matter of style 
whether to complain about them. This raises the next question, whether *we* 
consider them bad, and want to try to avoid them. (I&#39;m also using jsl 
regularly, and it seems it is complaining a lot about things that we might 
consider acceptable, e.g. &#39;if&#39; conditions spread across multiple lines, with 
&#39;){&#39; as the last; re-declaring loop variables with &#39;var i&#39;; or local vars 
hiding arguments?!). But that&#39;s up to others to decide.

3) ecmalint / generate.py lint
ecmalint was conceived to primarily detect issues that are specific to qooxdoo 
(class) code. E.g. it detects if a map key is redefined multiple times within 
the same map (which jsl doesn&#39;t), because it is a likely issue in (big) class 
maps. I&#39;m not sure if it was meant to cover also more mundane things like 
missing semicolons (which our compiler automatically inserts, btw). I&#39;m open to 
change enhancements in this regard, but another strategy, like using jsl for 
&quot;low-level&quot; checking and ecmalint for the qooxdoo-specific stuff, seems equally 
valid. Again, this is for others to decide, but if the former approach is 
chosen (ecmalint to cover everything), I would like to have a dedicated bug for 
every jsl feature ecmalint should implement (cf. to the jsl home page that you 
linked).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26072</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-07-18 10:21:28 +0200</bug_when>
            <thetext>Martin knows example.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30459</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-08-22 16:34:49 +0200</bug_when>
            <thetext>I cannot reproduce the &quot;:&quot;-in-place-of-&quot;;&quot; issue, meaning I cannot find a case 
where the parser would accept one for the other. But if the parser is not 
accepting it, there is no lint checking taking place which could complain about 
it.

Most probably the underlying issue of the parser accepting this substitution 
has been eliminated with the introduction of the new parser in mar&#39;12.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37707</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:22:31 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>