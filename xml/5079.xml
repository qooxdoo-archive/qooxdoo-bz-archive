<bug>
          <bug_id>5079</bug_id>
          
          <creation_ts>2011-05-05 09:27:00 +0200</creation_ts>
          <short_desc>Part Loading: Replace ClosureParts by Individual Loading Decisions</short_desc>
          <delta_ts>2014-03-03 08:47:13 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>1.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>24325</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-05-05 09:27:07 +0200</bug_when>
            <thetext>Currently, we have ClosureParts (qx.io.part.ClosurePart) that are tagged by the 
generator as such. The tagging means, this part consists of only 
ClosurePackages (a concept not reflected by a framework class), execpt for a 
potential boot package. The aim for the tagging is that at run time if such a 
part is loaded, a concurrent loading mechanism can be preferred.

But the tagging of ClosureParts is less flexible, and rules out many parts that 
consist of both ClosurePackages and non-ClosurePackages. To reach the above 
aim, it would be more effective to make the decision about closure loading 
*right at the moment when the individual part is requested by application 
code*. For any given loading request, already only those packages are loaded 
which are not already in the client. It would be simple at this point to detect 
if *all remaining* packages are ClosurePackages, and load them with the closure 
technique. If one of them is a non-ClosurePackage, all can be loaded with the 
serial technique.

This approach allows to make the loading technique decisison *at part loading 
time* instead of at compile time, and has the potential of increasing the 
number of closure loading actions. All that really matters is the nature of the 
remaining packages.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35827</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:13 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>