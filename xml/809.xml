<bug>
          <bug_id>809</bug_id>
          
          <creation_ts>2008-03-25 13:13:00 +0100</creation_ts>
          <short_desc>Image preloader doesn&#39;t abort download properly</short_desc>
          <delta_ts>2010-03-11 09:56:07 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>0.7.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          <blocked>2006</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Hugh Gibson">hgibson</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>2913</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-03-25 13:13:00 +0100</bug_when>
            <thetext>We have written an image preloading system for images in our user-entered HTML. This means that large images are downloaded first via the qooxdoo preloader system so that they don&#39;t lock up the browser when rendering the HTML.

I&#39;ve discovered that in FF 2 (and probably in IE) that disposing of an qx.io.image.Preloader instance isn&#39;t sufficient to stop the preloading process. In particular, if the preloader is disposed before the image is completely downloaded, the memory for the Image object allocated by the preloader (stored in _element) is not freed. It is only freed when the image is completely downloaded again.

The workaround for this is to set _element.src to some benign small image in the destructor for qx.io.image.Preloader.

See the thread at http://www.nabble.com/Problem-parsing-HTML-documents-td16182504.html for some background on the preloading.

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>2914</commentid>
              <attachid>295</attachid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-03-25 16:23:14 +0100</bug_when>
            <thetext>Created attachment 295
Patch to fix this issue

Here is a patch that fixes the problem in 0.7.3. 

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3594</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-07-01 10:33:40 +0200</bug_when>
            <thetext>fixed in rev. 14222</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3636</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-07-03 08:03:56 +0200</bug_when>
            <thetext>Thanks for applying the patch.

Will this be ported to trunk? I&#39;ve re-opened the issue just in case you have overlooked it.

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3645</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-07-04 11:48:44 +0200</bug_when>
            <thetext>Image preloading works a bit different in 0.8 . I am confident, we don&#39;t have this issue in 0.8.</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="1" isprivate="0" isurl="0">
            <attachid>295</attachid>
            <date>2008-03-25 16:23:00 +0100</date>
            <delta_ts>2008-03-25 16:23:14 +0100</delta_ts>
            <desc>Patch to fix this issue</desc>
            <filename>qxBug809.patch</filename>
            <type>text/plain</type>
            <size>556</size>
            <attacher>hgibson</attacher>
            
              <data encoding="base64">SW5kZXg6IHFvb3hkb28vZnJvbnRlbmQvZnJhbWV3b3JrL3NvdXJjZS9jbGFzcy9xeC9pby9pbWFn
ZS9QcmVsb2FkZXIuanMNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLSBxb294ZG9vL2Zyb250ZW5kL2ZyYW1ld29y
ay9zb3VyY2UvY2xhc3MvcXgvaW8vaW1hZ2UvUHJlbG9hZGVyLmpzCShyZXZpc2lvbiAxMjU4MCkN
CisrKyBxb294ZG9vL2Zyb250ZW5kL2ZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvaW8vaW1hZ2Uv
UHJlbG9hZGVyLmpzCSh3b3JraW5nIGNvcHkpDQpAQCAtMjc2LDYgKzI3Niw3IEBADQogICB7CiAg
ICAgaWYgKHRoaXMuX2VsZW1lbnQpCiAgICAgeworICAgICAgdGhpcy5fZWxlbWVudC5zcmMgPSAi
IjsgICAgICAgICAgICAgICAgICAgLy8gdGVybWluYXRlIGFueSBkb3dubG9hZGluZyBpbiBwcm9n
cmVzcyBhbmQgZnJlZSBtZW1vcnkgZm9yIGltYWdlCiAgICAgICB0aGlzLl9lbGVtZW50Lm9ubG9h
ZCA9IHRoaXMuX2VsZW1lbnQub25lcnJvciA9IG51bGw7CiAgICAgfQogCg==
</data>

          </attachment>
      

    </bug>