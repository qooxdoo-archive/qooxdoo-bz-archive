<bug>
          <bug_id>2975</bug_id>
          
          <creation_ts>2009-10-23 17:13:00 +0200</creation_ts>
          <short_desc>API doc: Show documentation errors if a @return statement is missing or wrong.</short_desc>
          <delta_ts>2014-03-03 15:26:12 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.apidata</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Fabian Jakobs">fabian.jakobs</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>13473</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-10-23 17:13:06 +0200</bug_when>
            <thetext>The API doc generator should validate @return statements. It should add a documentation error if

1. A return type is specified but no value is returned e.g.

/**
  * @return {Integer} foo
  */
foo : function() {
  // no return here
}


2. No @return statement is present but the function does return something

/**
 */
foo : function() {
  return 12;
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13474</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-10-23 17:19:55 +0200</bug_when>
            <thetext>Is it possible to have a &quot;generate.py source&quot; and/or &quot;generate.py build&quot;  emit messages about missing or incorrect documentation? That would be even better than having the API doc generator do it, as it could be caught much earlier in the development process.

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13476</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-10-23 18:02:34 +0200</bug_when>
            <thetext>Such a warn mode at build time could be helpful for the other API docs as well. Right now its pretty painful because we always need to build the full API doc, and open the API viewer to see the errors.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13568</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-10-27 11:20:31 +0100</bug_when>
            <thetext>to Jonny</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14413</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-11-24 15:40:29 +0100</bug_when>
            <thetext>Also keep in mind to check for 
@return {var} TODOC
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15352</commentid>
            <who name="Jonathan Weiß">qooxdoo-bugs</who>
            <bug_when>2009-12-07 12:16:27 +0100</bug_when>
            <thetext>Out of timeframe.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18854</commentid>
            <who name="Jonathan Weiß">qooxdoo-bugs</who>
            <bug_when>2010-06-21 14:58:31 +0200</bug_when>
            <thetext>-&gt; Otter</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21709</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-12-02 16:33:56 +0100</bug_when>
            <thetext>I got this check mostly working, but the code isn&#39;t active yet since there&#39;s still some cases that need to be addressed:

If a an overriding method has no documentation, the APIViewer displays the overridden method&#39;s docs (as long as the signature hasn&#39;t changed). To check the return value documentation in the case it would be necessary to walk up the parent chain and retrieve the overridden method&#39;s doc node, but I haven&#39;t found a good way to do that in api.py yet.

Abstract methods can have documentation for return values but no implementation. Not all abstract methods are marked as @abstract, so this would lead to false warnings. Simply checking if the class is abstract isn&#39;t enough either since abstract classes can have concrete methods that would then fall through the check.

For 1.4, we should also add a config option for api.py&#39;s behavior if it finds any documentation errors. Currently, some errors cause it to barf while others are added to the generated JSON structure to be displayed by the APIViewer.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30972</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2012-10-16 14:08:35 +0200</bug_when>
            <thetext>Cleaned up the checks and addressed most of the open issues. Abstract methods in non-abstract classes will simply have to be marked with an @abstract hint to avoid false positives.

Fixed with 8b354778af81506f94dc1545643d0cd8d326e4c3 on master.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39030</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:26:12 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>