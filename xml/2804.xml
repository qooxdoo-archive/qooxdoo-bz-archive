<bug>
          <bug_id>2804</bug_id>
          
          <creation_ts>2009-09-16 14:37:00 +0200</creation_ts>
          <short_desc>Exceptions in disposer terminate the framework</short_desc>
          <delta_ts>2014-03-03 15:22:52 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.core</component>
          <version>0.8.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>2649</dup_id>
          
          
          
          
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>1.0-beta1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Carsten Lergenmüller">carsten.lergenmueller</reporter>
          <assigned_to name="Fabian Jakobs">fabian.jakobs</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>12355</commentid>
            <who name="Carsten Lergenmüller">carsten.lergenmueller</who>
            <bug_when>2009-09-16 14:37:17 +0200</bug_when>
            <thetext>When an error is thrown in an object&#39;s disposer, the error disrupts the frameworks queue handling and the application freezes. No more actions are possible in the app at all.

I went a little up the stacktrace. This code looks dangerous to me: Application code (disposers) is called, any error thrown by it will prevent to be set.

qx.ui.core.queue.Manager.flush:

...

if (jobs.dispose)
{
  delete jobs.dispose;
  qx.ui.core.queue.Dispose.flush();
}

// Clear flag
self.__inFlush = false; 


Or maybe we could catch errors a little lower in qx.ui.core.queue.Dispose.flush, then one exception would not prevent other objects to be disposed....</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12356</commentid>
            <who name="Carsten Lergenmüller">carsten.lergenmueller</who>
            <bug_when>2009-09-16 14:45:08 +0200</bug_when>
            <thetext>(In reply to comment #0)
&gt; I went a little up the stacktrace. This code looks dangerous to me: Application
&gt; code (disposers) is called, any error thrown by it will prevent to be set.

Prevent the flag self.__inFlush from being cleared, I meant.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12622</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-09-24 17:15:35 +0200</bug_when>
            <thetext>to me</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12623</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-09-24 17:16:17 +0200</bug_when>
            <thetext>accept</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12649</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-09-25 10:36:46 +0200</bug_when>
            <thetext>Yes this is dangerous. This is again the general problem that the flush cannot recover from exceptions in user code.

*** This bug has been marked as a duplicate of bug 2649 ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14571</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:15:37 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37837</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:22:52 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>