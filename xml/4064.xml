<bug>
          <bug_id>4064</bug_id>
          
          <creation_ts>2010-09-09 10:45:00 +0200</creation_ts>
          <short_desc>Changing source of dynamic Image widget with the same url name</short_desc>
          <delta_ts>2014-03-03 15:25:28 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.5</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stefan Andersson">dev</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>20101</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-09-09 10:45:09 +0200</bug_when>
            <thetext>Could you add this nonsense string inside qooxdoo so it always works even
with dynamic images with the SAME name when you want the image to be pulled
from the server even if it already exists in the browser cache?


 // Create a button
 var button = new qx.ui.form.Button(&quot;Change Image&quot;);
 button.setAllowGrowY(false);

 var image = new qx.ui.basic.Image();

 this.__counter = 0;


 // Document is the application root
 var doc = this.getRoot();
 doc.setLayout(new qx.ui.layout.HBox());


 // Add button to document at fixed coordinates
 doc.add(button);
 doc.add(image);

 // Add an event listener
 button.addListener(&quot;execute&quot;, function(e) {
   this.__counter++;
   var nonsense = &quot;?nonsense=&quot; + this.__counter;

   image.setSource(&quot;http://www.catify.com/demo/images/ftp.png&quot; +
 nonsense);
 }, this);</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20122</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-10 13:55:43 +0200</bug_when>
            <thetext>Stefan, could you probably explain what the problem here is? A bug report should describe a problem not a solution. ;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20147</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-09-13 17:21:39 +0200</bug_when>
            <thetext>The solution is on a problem with loading a dynamic imaged pulled from a server by a link where the url is EXACTLY the same. The browser looks in the cache and uses what it already has there and if the url has been pulled before, it will not be pulled from the external source, instead taking the cache saved version. It means that dynamic images (changing images) with the same url (name) pulled from the server will not work!

A counter has been added in the solution to overcome this problem. Thereby the url changes everytime, even though the same image is pulled from the server cause the counter is a nonsense query variable!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20149</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-09-13 17:35:31 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; Stefan, could you probably explain what the problem here is? A bug report
&gt; should describe a problem not a solution. ;)

The bug report does describe a problem. Read it again!

&quot;Could you add this nonsense string inside qooxdoo so it always works even
with dynamic images with the SAME name when you want the image to be pulled
from the server even if it already exists in the browser cache?&quot;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20152</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-14 08:33:29 +0200</bug_when>
            <thetext>(In reply to comment #3)
&gt; The bug report does describe a problem. Read it again!

&quot;Read it again!&quot;? Stefan, please be calm and keep in mind that you are asking us to do something for you for free. Maybe you should not grumble too much, ok?

I was asking for the reason why we should included that and why we should remove the caching of all images, like your code does. I know how caching works. We have had such problems with a webkit bug reloading the sources of qooxdoo as well. But its quite uncommon that the image changes loaded from the server. So for me, the default use case is that the user wants the caching. I don&#39;t see a need for adding this feature to the framework, specially in this case that you can easily add this to you application code.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20157</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-09-14 11:14:53 +0200</bug_when>
            <thetext>I don&#39;t agree as it is not rational. If you want unbroken functions, then it is the way to go. Else this will be looked upon as a bug.

If you still resist the suggestion at least a small add in the manual telling that it does not support dynamic images and refer to my example code as a solution.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20175</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-15 10:09:46 +0200</bug_when>
            <thetext>(In reply to comment #5)
&gt; I don&#39;t agree as it is not rational. If you want unbroken functions, then it is
&gt; the way to go. Else this will be looked upon as a bug.

I don&#39;t think that this is broken. Every developer should know that if he his doing such things like loading the same url expecting different results, there may be problems with caching. So he should be aware of such things. Additionally, its one line of code in the application code:

image.setSource(url + &quot;?x=&quot; + (new Date()).getTime());

On one hand, you complain about size of qooxdoo code but you would add a couple of lines just to get your features in.

&gt; If you still resist the suggestion at least a small add in the manual telling
&gt; that it does not support dynamic images and refer to my example code as a
&gt; solution.

As I said in my previos post, please be a bit more polite and don&#39;t act like you are the boss. Anyway, this could be a good idea to add such a code snippet to out user snippets section:
http://manual.qooxdoo.org/1.2.x/pages/snippets/toctree.html

If you have a patch for that manual page, feel free to reopen the bug and attach the patch. I will apply it to the manual.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20183</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-09-15 11:49:01 +0200</bug_when>
            <thetext>Caching of images in browsers is a (welcome) standard feature. It doesn&#39;t make sense to disable that implicitly by the framework for all qooxdoo apps.

If one needs to explicitly trigger an in-place update of specific images one could use an add&#39;tl unique parameter as suggested. Alternatively, if one is in control of the server, relaxing the caching parameters (e.g. on a HTTP level) could be even more transparent, without touching frontend code.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20185</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-09-15 12:19:34 +0200</bug_when>
            <thetext>Here is a first version of the text. I think it is always good that an English native reads it through later on.

Proposal to manual:

Pulling image with same source url
----------------------------------
Qooxdoo does not support pulling of an image source with the same url. First time the client web browser pulls it, but the concomitant times the browser uses the saved cache copies of the image. There seems to be no way to demand the client to pull it from the server after the first time.

A situation where it might be interesting, is when the client only knows a static url but not the image name, for example with captcha images. 

Original example:

anyImage.setSource(&quot;http://www.qooxdoo.org/image.png&quot;);

&lt;put reference to the code snippet&gt;

To overcome this lack of functionality the url needs to be changed every time the setSource is run by the following workarounds:

Simple example:

anyImage.setSource(&quot;http://www.qooxdoo.org/image.png?nonsense=&quot; + (new Date()).getTime());

&lt;put reference to the code snippet&gt;

More complicated example when a counter is needed to keep track of the number of pulls:

anyImage.setSource(&quot;http://www.qooxdoo.org/image.png?nonsense=&quot; + counter);

&lt;put reference to the code snippet&gt;

Explanations:
The query variable nonsense is exactly as the meaning, a nonsense variable and the only reason to use it is to change the url to force the client web browser to pull the image from the server again and &quot;bypass&quot; the cache copy.

By using a counter or any other identifier you can keep track of the number of pulls done.
-----------------------------
Original example:

 // Create a button
 var button = new qx.ui.form.Button(&quot;Change Image&quot;);
 button.setAllowGrowY(false);

 var image = new qx.ui.basic.Image();

 // Document is the application root
 var doc = this.getRoot();
 doc.setLayout(new qx.ui.layout.HBox());

 // Add button to document at fixed coordinates
 doc.add(button);
 doc.add(image);

 // Add an event listener
 button.addListener(&quot;execute&quot;, function(e) {
   image.setSource(&quot;http://www.qooxdoo.org/image.png);
 }, this);
-----------------------------
First example:

 // Create a button
 var button = new qx.ui.form.Button(&quot;Change Image&quot;);
 button.setAllowGrowY(false);

 var image = new qx.ui.basic.Image();

 // Document is the application root
 var doc = this.getRoot();
 doc.setLayout(new qx.ui.layout.HBox());

 // Add button to document at fixed coordinates
 doc.add(button);
 doc.add(image);

 // Add an event listener
 button.addListener(&quot;execute&quot;, function(e) {
   image.setSource(&quot;http://www.qooxdoo.org/image.png?nonsense=&quot; + (new Date()).getTime());
 }, this);
------------------------------
Second example:

 // Create a button
 var button = new qx.ui.form.Button(&quot;Change Image&quot;);
 button.setAllowGrowY(false);

 var image = new qx.ui.basic.Image();

 this.__counter = 0;

 // Document is the application root
 var doc = this.getRoot();
 doc.setLayout(new qx.ui.layout.HBox());

 // Add button to document at fixed coordinates
 doc.add(button);
 doc.add(image);

 // Add an event listener
 button.addListener(&quot;execute&quot;, function(e) {
   this.__counter++;
   var nonsense = &quot;?nonsense=&quot; + this.__counter;

   image.setSource(&quot;http://www.qooxdoo.org/image.png&quot; + nonsense);
 }, this);

--------------------
Maybe you can fix a dynamically changing image at the above url (or any) to show how it works. An image with anything within which is recreated every time you pull an image.
--------------------
Every developer should not know that! Where is that written? One of your own developers didn&#39;t know it! It is expected that qooxdoo handle such differences when it is possible or at least it has been documented that it does not handle it.

&gt;On one hand, you complain about size of qooxdoo code but you would add a couple
&gt;of lines just to get your features in.

I don&#39;t know wherefrom you get your ideas.

1. It is strange, because we have never complained about the size of qooxdoo. Others did but not we! 
2. We have no interest to get our features in! Instead we wanted to contribute with our findings of lacking functionality, but you do not seem to appreciate it.
3. if we want something in, which we have already done, we can build it ourselves and put it where we wish regardless of what you say.

So please stop inadequate commenting.

&gt;As I said in my previos post, please be a bit more polite and don&#39;t act like
you are the boss.

Please stop inadequate commenting and keep it professional! By the way, I am a boss...;-)......and you...the emperor? :-))))</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20187</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-09-15 12:24:52 +0200</bug_when>
            <thetext>(In reply to comment #7)
&gt; Caching of images in browsers is a (welcome) standard feature. It doesn&#39;t make
&gt; sense to disable that implicitly by the framework for all qooxdoo apps.
&gt; 
&gt; If one needs to explicitly trigger an in-place update of specific images one
&gt; could use an add&#39;tl unique parameter as suggested. Alternatively, if one is in
&gt; control of the server, relaxing the caching parameters (e.g. on a HTTP level)
&gt; could be even more transparent, without touching frontend code.

Relaxing caching parameters of the server is most of the time NOT a good and wise solution cause it has other side effects.

&quot;Touching&quot; the frontend code is the least intrusive and definitively the alternative in most cases.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20191</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-09-15 13:08:14 +0200</bug_when>
            <thetext>Everyone, please calm down and stop. This way of communicating doesn&#39;t lead to anything, no, even isn&#39;t entertaining.

Consider to reread the committers guide on roles and responsibilities and the way to collaborate with maintainers of the framework.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20192</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-15 13:30:02 +0200</bug_when>
            <thetext>Thanks for the patch Stefan. I will check it asap.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20618</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-10-13 07:54:12 +0200</bug_when>
            <thetext>mass retargeting to 1.2.2 due to intermediate 1.2.1 release</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33752</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-08-27 14:39:09 +0200</bug_when>
            <thetext>Added a user snippet which shows the solution mentioned:

http://qooxdoo.org/docs/general/snippets?&amp;#loading_changing_resources_with_the_same_uri</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38757</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:28 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>