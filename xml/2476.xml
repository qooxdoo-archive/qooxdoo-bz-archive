<bug>
          <bug_id>2476</bug_id>
          
          <creation_ts>2009-06-16 15:40:00 +0200</creation_ts>
          <short_desc>qx.util.range is only used in legacy code</short_desc>
          <delta_ts>2009-11-24 16:29:14 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>fabian.jakobs</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10421</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-06-16 15:40:00 +0200</bug_when>
            <thetext>All classes in qx.util.range are only used by the legacy code and therefore could be deprecated and moved to the legacy folder. That way we can reduce the code we have to maintain.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10432</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-06-17 09:05:20 +0200</bug_when>
            <thetext>Derrell mentioned a good point on the mailing list. The ProgressBar contribution, which is currently based on 0.7 uses this class too. Just a note to keep that in mind if we move / deprecate things.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10590</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-26 12:43:49 +0200</bug_when>
            <thetext>This is a re-post from the mailing list:

The ProgressBar contribution uses a class of the qx.util.range name space, but 
not Range but IntegerRange (which is non-existent in 0.8). Anybody porting the 
ProgressBar to 0.8 will have to re-invent a range type if it is not provided by 
the framework.

The main point for me is that it seems to be a sensible thing to have a general 
range data type anyway. The ProgressBar and the Slider classes should make it 
obvious that a range type is a necessary thing to have in a comprehensive 
framework.

It is a special kind of iterator, where the objects you iterate over have a 
natural order. Iterators are such a common data types that many programming 
languages provide them per default, at least in the form of interfaces (e.g. 
Python).

So I would second keeping the qx.util.range.Range anyway. If you have such a 
class you should have it in the most generic way (which rules out qx.ui.form).

More specific classes should use the generic range class. I think it is a case 
of lack of proper abstraction that there is a range implementation in the 
qx.ui.form name space. qx.util is obviously much more general than qx.ui.form!

That said, the current implementation in qx.util.range seems to be rather 
deficient. You cannot specify a step width, nor does it have a next() method to 
iterate over the range. So it seems the only thing you can do with such ranges 
are inclusion tests, but not even for that is there a suitable method. For 
reasons I don&#39;t know, this range data type has been reduced to near uselessness.

So I suggest improving it to be a proper range type, and not re-implement 
similar functionality in special-purpose name spaces (like qx.ui.form).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10637</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-06-29 15:33:12 +0200</bug_when>
            <thetext>Martin, we talked about the idea to extend to a generic Range type already (thanks to Thomas for raising some valid points here). It might actually be quite useful also in the context of data binding (e.g. binding a model range to a slider). If you come up with a nice concept, you might open a new issue report for that and link this one.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10647</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-06-29 16:06:09 +0200</bug_when>
            <thetext>I think we should keep in mind that we talk about two different interfaces. One, that one in the form namepsace, defines the methods a widget needs to display a range properly. The other one, which is currently in the util namepspace should contain the needed methods for a range data type. So in the end, we still will need two different types of interfaces because of two different things we want to get.

So should we close this bug and open a new one for extending the current range data type?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11426</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-08-21 11:21:15 +0200</bug_when>
            <thetext>to Andreas</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11834</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-03 09:56:51 +0200</bug_when>
            <thetext>accepted</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12074</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-09 14:13:56 +0200</bug_when>
            <thetext>I added deprecation info to the API docs, since the current implementation is to be replaced by a more advanced solution.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12075</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-09 14:16:28 +0200</bug_when>
            <thetext>Moved as enhancement and assigned back to Martin for a new improved range type.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14225</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-11-19 14:25:24 +0100</bug_when>
            <thetext>Should we remove the old implementation and add a bug for a new one after the 1.0 release? That would be better than having a deprecated old range type in the framework.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14229</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-11-19 14:51:42 +0100</bug_when>
            <thetext>Since it is deprecated in 0.8.3 we should remove the class from the 1.0 release. I would not open a bug &quot;just in case&quot;. We can still open one if the need arises..</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14234</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-11-19 15:28:43 +0100</bug_when>
            <thetext>One thing is for sure, we don&#39;t want the code in the 1.0 release because its deprecated. So I removed the code in the trunk with revision 20701.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14420</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-11-24 16:29:14 +0100</bug_when>
            <thetext>CLOSED</thetext>
          </long_desc>
      
      

    </bug>