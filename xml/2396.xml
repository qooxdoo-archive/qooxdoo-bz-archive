<bug>
          <bug_id>2396</bug_id>
          
          <creation_ts>2009-05-19 11:56:00 +0200</creation_ts>
          <short_desc>Add support for global error handling</short_desc>
          <delta_ts>2014-03-03 15:23:17 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Fabian Jakobs">fabian.jakobs</reporter>
          <assigned_to name="Fabian Jakobs">fabian.jakobs</assigned_to>
          <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10028</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-19 11:56:02 +0200</bug_when>
            <thetext>Right now there is no way for a qooxdoo application to catch and handle all errors/exceptions,
which are thrown inside of the application or framework. Especially aynchronous code
like remote requests or timer callbacks are immune to try/catch clauses.

We need to develop a global error handling strategy. Nicholas Zacas&#39; approach of 
wrapping the methods in question looks promising &lt;http://www.nczonline.net/blog/2009/04/28/javascript-error-handling-anti-pattern/#&gt;.

We could have something like 

window.setTimeout(qx.core.ErrorHandler.wrap(function() {...});

which on demand surrounds the method with a try/catch block and calls a user defined
error handler.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10029</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-19 12:02:47 +0200</bug_when>
            <thetext>Good presentation about JavaScript error handling

&lt;http://www.slideshare.net/nzakas/enterprise-javascript-error-handling-presentation&gt;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10059</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-20 14:28:56 +0200</bug_when>
            <thetext>Another option would be to react on &quot;onerror&quot; events fired on the window. 

In first instance it should made clear what exactly is needed. In my feeling this is not yet completely commented here. Is the first priority to hide errors from the user of the application, to react on errors with some kind of own feedback, etc.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10101</commentid>
              <attachid>515</attachid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2009-05-25 14:49:13 +0200</bug_when>
            <thetext>Created attachment 515
Test Application

Test application for performance test</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10102</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2009-05-25 14:49:46 +0200</bug_when>
            <thetext>Results:
FF 3.0.10:
Test without try/catch (passes 10): 8168.6ms (average)
Test with try/catch (passes 10): 8171.3ms (average)

IE 7:
Test without try/catch (passes 10): 50218.5ms (average) 
Test with try/catch (passes 10): 49395.4ms (average) 
Test without try/catch (passes 1): 51075ms (average) 
Test with try/catch (passes 1): 50826ms (average) 

Safari 4:
Test without try/catch (passes 10): 1355.7ms (average) 
Test with try/catch (passes 10): 1358.7ms (average) 

Safari 3.2.2:
Test without try/catch (passes 10): 9358.3ms (average)
Test with try/catch (passes 10): 9565.6ms (average)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10122</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-05-26 11:14:01 +0200</bug_when>
            <thetext>(In reply to comment #2)
&gt; Another option would be to react on &quot;onerror&quot; events fired on the window. 

Right, &quot;onerror&quot; qould be the last resort. However with &quot;onerror&quot; we loose all the context information so it cannot be the only solution. 

&gt; In first instance it should made clear what exactly is needed. In my feeling
&gt; this is not yet completely commented here. Is the first priority to hide errors
&gt; from the user of the application, to react on errors with some kind of own
&gt; feedback, etc.

The main purpose it to catch all unexpected errors in deployed applications. The user should never see a JavaScript error message. Further the developer should have the chance to show an appropriate error message and log this error on the server. This requires that every asynchronously called code must be wrapped in a try/catch statement. Christian&#39;s tests show that this is not an performance issue.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10381</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-06-15 16:21:31 +0200</bug_when>
            <thetext>feature added in rev. 19327 ff</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14503</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:15:05 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14898</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 22:13:31 +0100</bug_when>
            <thetext>corrected wrong milestone (was 0.9, but was fixed for 0.8.3 already)
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37962</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:23:17 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="0" isprivate="0" isurl="0">
            <attachid>515</attachid>
            <date>2009-05-25 14:49:00 +0200</date>
            <delta_ts>2009-05-25 14:49:13 +0200</delta_ts>
            <desc>Test Application</desc>
            <filename>Application.js</filename>
            <type>text/x-c</type>
            <size>2789</size>
            <attacher>christian.hagendorn</attacher>
            
              <data encoding="base64">cXguQ2xhc3MuZGVmaW5lKCJ0cnljYXRjaC5BcHBsaWNhdGlvbiIsDQp7DQogIGV4dGVuZCA6IHF4
LmFwcGxpY2F0aW9uLlN0YW5kYWxvbmUsDQoNCiAgbWVtYmVycyA6DQogIHsNCiAgICBtYWluIDog
ZnVuY3Rpb24oKQ0KICAgIHsNCiAgICAgIHRoaXMuYmFzZShhcmd1bWVudHMpOw0KDQogICAgICBp
ZiAocXguY29yZS5WYXJpYW50LmlzU2V0KCJxeC5kZWJ1ZyIsICJvbiIpKQ0KICAgICAgew0KICAg
ICAgICBxeC5sb2cuYXBwZW5kZXIuTmF0aXZlOw0KICAgICAgICBxeC5sb2cuYXBwZW5kZXIuQ29u
c29sZTsNCiAgICAgIH0NCg0KICAgICAgdmFyIGJ1dHRvblRlc3QxID0gbmV3IHF4LnVpLmZvcm0u
QnV0dG9uKCJSdW4gdGVzdCB3aXRob3V0IHRyeS9jYXRjaCAocGFzc2VzOiAwKSIpOw0KICAgICAg
dmFyIGJ1dHRvblRlc3QyID0gbmV3IHF4LnVpLmZvcm0uQnV0dG9uKCJSdW4gdGVzdCB3aXRoIHRy
eS9jYXRjaCAocGFzc2VzOiAwKSIpOw0KICAgICAgdmFyIGJ1dHRvblJlc3VsdCA9IG5ldyBxeC51
aS5mb3JtLkJ1dHRvbigiUHJpbnQgcmVzdWx0Iik7DQoNCiAgICAgIHZhciBkb2MgPSB0aGlzLmdl
dFJvb3QoKTsNCiAgICAgIGRvYy5hZGQoYnV0dG9uVGVzdDEsIHtsZWZ0OiAxMDAsIHRvcDogNTB9
KTsNCiAgICAgIGRvYy5hZGQoYnV0dG9uVGVzdDIsIHtsZWZ0OiAxMDAsIHRvcDogMTAwfSk7DQog
ICAgICBkb2MuYWRkKGJ1dHRvblJlc3VsdCwge2xlZnQ6IDEwMCwgdG9wOiAxNTB9KTsNCiAgICAg
IA0KICAgICAgdmFyIHJlc3VsdHNUZXN0MSA9IFtdOw0KICAgICAgdmFyIHJlc3VsdHNUZXN0MiA9
IFtdOw0KICAgICAgDQogICAgICBidXR0b25UZXN0MS5hZGRMaXN0ZW5lcigiZXhlY3V0ZSIsIGZ1
bmN0aW9uKGUpIHsNCiAgICAgICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKTsNCiAgICAgICAgdGhp
cy5lcmF0aG9zdGVuZXMoMTAwMDAwMDApOw0KICAgICAgICB2YXIgc3RvcCA9IG5ldyBEYXRlKCk7
DQogICAgICAgICAgDQogICAgICAgIHZhciBkdXJhdGlvbiA9IChzdG9wIC0gc3RhcnQpOw0KICAg
ICAgICByZXN1bHRzVGVzdDEucHVzaChkdXJhdGlvbik7DQogICAgICAgIA0KICAgICAgICBidXR0
b25UZXN0MS5zZXRMYWJlbCgiUnVuIHRlc3Qgd2l0aG91dCB0cnkvY2F0Y2ggKHBhc3NlczogIiAr
IHJlc3VsdHNUZXN0MS5sZW5ndGggKyAiKSIpOw0KICAgICAgfSwgdGhpcyk7DQogICAgICANCiAg
ICAgIGJ1dHRvblRlc3QyLmFkZExpc3RlbmVyKCJleGVjdXRlIiwgZnVuY3Rpb24oZSkgew0KICAg
ICAgICB2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpOw0KICAgICAgICB0cnkgew0KICAgICAgICAgIHRo
aXMuZXJhdGhvc3RlbmVzKDEwMDAwMDAwKTsNCiAgICAgICAgfSBjYXRjaChleCkgew0KICAgICAg
ICAgIHRoaXMuZGVidWcoImNhdGNoKGV4KSIpOw0KICAgICAgICB9DQogICAgICAgIHZhciBzdG9w
ID0gbmV3IERhdGUoKTsNCiAgICAgICAgICANCiAgICAgICAgdmFyIGR1cmF0aW9uID0gKHN0b3Ag
LSBzdGFydCk7DQogICAgICAgIHJlc3VsdHNUZXN0Mi5wdXNoKGR1cmF0aW9uKTsNCiAgICAgICAg
DQogICAgICAgIGJ1dHRvblRlc3QyLnNldExhYmVsKCJSdW4gdGVzdCB3aXRoIHRyeS9jYXRjaCAo
cGFzc2VzOiAiICsgcmVzdWx0c1Rlc3QxLmxlbmd0aCArICIpIik7DQogICAgICB9LCB0aGlzKTsN
CiAgICAgIA0KICAgICAgDQogICAgICBidXR0b25SZXN1bHQuYWRkTGlzdGVuZXIoImV4ZWN1dGUi
LCBmdW5jdGlvbihlKSB7DQogICAgICAgIHRoaXMucHJpbnRSZXN1bHQoIlRlc3Qgd2l0aG91dCB0
cnkvY2F0Y2giLCByZXN1bHRzVGVzdDEpOw0KICAgICAgICB0aGlzLnByaW50UmVzdWx0KCJUZXN0
IHdpdGggdHJ5L2NhdGNoIiwgcmVzdWx0c1Rlc3QyKTsNCiAgICAgIH0sIHRoaXMpOw0KICAgIH0s
DQogICAgDQogICAgZXJhdGhvc3RlbmVzIDogZnVuY3Rpb24obWF4KQ0KICAgIHsNCiAgICAgIHZh
ciBwcmltemFobGVuID0gbmV3IEFycmF5KG1heCk7DQogIA0KICAgICAgZm9yICh2YXIgbiA9IDI7
IG4gPCBwcmltemFobGVuLmxlbmd0aDsgbisrKSB7DQogICAgICAgIHByaW16YWhsZW5bbl0gPSB0
cnVlOw0KICAgICAgfQ0KICANCiAgICAgIGZvciAodmFyIG4gPSAyOyBuIDwgTWF0aC5zcXJ0KHBy
aW16YWhsZW4ubGVuZ3RoKTtuKyspIHsNCiAgICAgICAgaWYocHJpbXphaGxlbltuXSkgew0KICAg
ICAgICAgIGZvciAodmFyIGkgPSAyKm47IGkgPCBwcmltemFobGVuLmxlbmd0aDsgaSArPSBuKSB7
DQogICAgICAgICAgICBwcmltemFobGVuW2ldID0gZmFsc2U7DQogICAgICAgICAgfQ0KICAgICAg
ICB9DQogICAgICB9DQogIA0KICAgICAgdmFyIHJlc3VsdCA9IFtdOw0KICAgICAgZm9yICh2YXIg
biA9IDI7IG4gPCBwcmltemFobGVuLmxlbmd0aDsgbisrKSB7DQogICAgICAgIGlmIChwcmltemFo
bGVuW25dKSB7DQogICAgICAgICAgIHJlc3VsdC5wdXNoKG4pOw0KICAgICAgICB9DQogICAgICB9
DQogICAgICByZXR1cm4gcmVzdWx0Ow0KICAgIH0sDQogICAgDQogICAgcHJpbnRSZXN1bHQgOiBm
dW5jdGlvbih0ZXh0LCByZXN1bHRzKQ0KICAgIHsNCiAgICAgIHZhciBzdW0gPSAwOw0KICAgICAg
DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHsNCiAgICAg
ICAgc3VtICs9IHJlc3VsdHNbaV07DQogICAgICB9DQoNCiAgICAgIHRoaXMuZGVidWcodGV4dCAr
ICIgKHBhc3NlcyAiICsgcmVzdWx0cy5sZW5ndGggKyAiKTogIiArIA0KICAgICAgICAoc3VtIC8g
cmVzdWx0cy5sZW5ndGgpICsgIm1zIChhdmVyYWdlKSIpOw0KICAgIH0NCiAgfQ0KfSk7DQo=
</data>

          </attachment>
      

    </bug>