<bug>
          <bug_id>2148</bug_id>
          
          <creation_ts>2009-03-23 19:26:00 +0100</creation_ts>
          <short_desc>Revamp translation API</short_desc>
          <delta_ts>2014-03-03 08:47:32 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.locale</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>alexander.steitz</cc>
    
    <cc>christian.hagendorn</cc>
    
    <cc>fabian.jakobs</cc>
    
    <cc>info</cc>
    
    <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>8828</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-03-23 19:26:03 +0100</bug_when>
            <thetext>The current translation API includes:

- tr(key)
- trn(key, plural_key, selector, varargs)
- trc(comment, key)
- marktr(key)

While this API has several advantages, it also has some shortcoming:

- You cannot use the calls incrementally: 
   this.tr(&quot;One can&quot;);         // simple use
   this.tr(&quot;One can&quot;, &quot;%1 cans&quot;, 2, &quot;Many&quot;);  // plural form necessary later
   this.trc(&quot;Can contains a soft drink&quot;, &quot;One can&quot;);   // add a comment for the 
tranlator

   will not have the desired effect (i.e. the .po file will *not* have a plural 
key, plural stanzas and a comment).

- OTOH, you are forced to repeat redundant information:
   this.trn(&quot;One can&quot;, &quot;%1 cans&quot;, 1, &quot;&quot;);  // singular use
   this.trn(&quot;One can&quot;, &quot;%1 cans&quot;, 2, &quot;Many&quot;);  // plural use

- Moreover, if you repeat it wrongly, the initial information will be 
overwritten in the .po file:
   this.trn(&quot;One can&quot;, &quot;%1 cans&quot;, 1, &quot;&quot;);  // singular use
   this.trn(&quot;One can&quot;, &quot;%1 canns&quot;, 2, &quot;Many&quot;);  // Oops, typo spoils .po file

- trc should have its arguments swapped.

- marktr has the same effect (.po-wise) as tr ?!

A possible solution might be to separate the creation and shaping of a 
translatable string from its usage:

   var s1 = qx....TranslatableString(&quot;One can&quot;, &quot;%1 cans&quot;, &quot;Can contains a soft 
drink.&quot;);   // creating a translatable string
            // all possible attributes have to be in a single call so they can 
be picked up by the generator for .po generation
   ...
   // and later use it
   this.tr(s1);                 // simple case
   this.tr(s1, 2, &quot;Many&quot;)  // plural usage, 2nd and 3rd parm as 3rd and 4th of 
trn()

This (separation of creation and usage) is somewhat supported by the fact that 
quite a few qooxdoo users use dummy classes or methods just to list all 
translatable strings they want to use at some point:

  dummy : function() {  // dummy is never used, put evaluated by &#39;generate.py 
translation&#39;
     this.tr(&quot;String 1&quot;);
     this.tr(&quot;String 2&quot;);
     ...
  }

Maybe tr() could be made polymorphic, to support the old usage as well, so 
people don&#39;t have to create objects for one-case translations.

Comments welcome.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8836</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-03-24 10:08:27 +0100</bug_when>
            <thetext>Would be interesting how the &quot;normal&quot; gettext API is in PHP, Python, etc. What is the situation in these APIs. </thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9764</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-04-30 15:42:11 +0200</bug_when>
            <thetext>Fabian reported that  the current implementation was taylored along the Java 
API for gettext:

http://xnap-commons.sourceforge.net/gettext-commons/apidocs/org/xnap/commons/i18n/I18n.html, 
http://code.google.com/p/gettext-commons/wiki/Tutorial.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35937</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:32 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>