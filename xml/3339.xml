<bug>
          <bug_id>3339</bug_id>
          
          <creation_ts>2010-01-16 20:29:00 +0100</creation_ts>
          <short_desc>Support automatic loading of non-qooxdoo scripts used by contributions</short_desc>
          <delta_ts>2014-03-03 08:45:40 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Boulanger">info</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>16254</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2010-01-16 20:29:23 +0100</bug_when>
            <thetext>Currently, non-qooxdoo javascript files can be loaded by the main application&#39;s config.json by using the &quot;add-script&quot; key. However, it is necessary that contributions can specify such dependencies through their config.json. This way, the application developer does not need to worry about the contributions internal dependencies on third-party code. 

In order to realize this
1) The generator needs to pick up information from the contribution&#39;s config.json. There should be a way of adding the scripts to the &quot;source&quot; and &quot;build&quot; job with one config setting. 
2) During a &quot;build&quot; job, the generator should copy over these files into the resource folder of the application package automatically.

Maybe a separate config key should be used and the location of the added scripts then be limited to the &quot;resource&quot; folder.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16255</commentid>
              <attachid>695</attachid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2010-01-16 21:46:48 +0100</bug_when>
            <thetext>Created attachment 695
Patch to allow loading file from contribution&#39;s resource folder

With the attached patch to the loader template , it is possible to load a file from the contribution&#39;s source folder if the following jobs are added to the &quot;jobs&quot; key:

 &quot;jobs&quot; :
  {
    &quot;source-script&quot; :
    {
      &quot;add-script&quot; :
      [ 
        {
          &quot;uri&quot; : &quot;persist:resource/persist/persist-all-min.js&quot;
        }
      ]
    },
    &quot;build-script&quot; :
    {
      &quot;add-script&quot; :
      [ 
        {
          &quot;uri&quot; : &quot;persist:resource/persist/persist-all-min.js&quot;
        }
      ]
    }    
  }

What the patch does is to resolve the path through the prefix, just like the normal qooxdoo class files. Tested against the demo app in the &quot;Persist&quot; contribution. It works with FF source and build, but doesn&#39;t with Chrome in &quot;build&quot; mode.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16256</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2010-01-17 11:49:09 +0100</bug_when>
            <thetext>Forgot to add that this is still the config.json of the application, not of the contribution, as should be the case according to the aim of the bug.

(In reply to comment #1)
&gt; Created an attachment (id=695) [details]
&gt; Patch to allow loading file from contribution&#39;s resource folder
&gt; 
&gt; With the attached patch to the loader template , it is possible to load a file
&gt; from the contribution&#39;s source folder if the following jobs are added to the
&gt; &quot;jobs&quot; key:
&gt; 
&gt;  &quot;jobs&quot; :
&gt;   {
&gt;     &quot;source-script&quot; :
&gt;     {
&gt;       &quot;add-script&quot; :
&gt;       [ 
&gt;         {
&gt;           &quot;uri&quot; : &quot;persist:resource/persist/persist-all-min.js&quot;
&gt;         }
&gt;       ]
&gt;     },
&gt;     &quot;build-script&quot; :
&gt;     {
&gt;       &quot;add-script&quot; :
&gt;       [ 
&gt;         {
&gt;           &quot;uri&quot; : &quot;persist:resource/persist/persist-all-min.js&quot;
&gt;         }
&gt;       ]
&gt;     }    
&gt;   }
&gt; 
&gt; What the patch does is to resolve the path through the prefix, just like the
&gt; normal qooxdoo class files. Tested against the demo app in the &quot;Persist&quot;
&gt; contribution. It works with FF source and build, but doesn&#39;t with Chrome in
&gt; &quot;build&quot; mode. 
&gt; 

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16789</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-02-11 10:22:31 +0100</bug_when>
            <thetext>-&gt; me</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22317</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-01-17 18:50:33 +0100</bug_when>
            <thetext>I feel this should be solved in a larger context which includes dependencies of a contrib not only to non-qooxdoo scripts, but also to other qooxdoo libraries (There is probably already a bug for this). I&#39;m uncertain if the contrib&#39;s config.json is the right place to convey this dependency information, or rather its Manifest.json.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22328</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2011-01-17 19:42:46 +0100</bug_when>
            <thetext>(In reply to comment #4)
&gt; I feel this should be solved in a larger context which includes dependencies of
&gt; a contrib not only to non-qooxdoo scripts, but also to other qooxdoo libraries
&gt; (There is probably already a bug for this). I&#39;m uncertain if the contrib&#39;s
&gt; config.json is the right place to convey this dependency information, or rather
&gt; its Manifest.json.

I don&#39;t have any strong opinion on how exactly this should be implemented - you&#39;re right that this should fit into a coherent design of how to deal with contribs and their dependencies in general, and not be implemented with hacks and unintuitive &quot;micro-protocols&quot; as I have suggested in the patch.

All that would matter to me is to make it possible to treat contribs as self-contained units, which do not require manually configuring the main application&#39;s config.json file. In particular, this would make creating qooxdoo &quot;ports&quot; of third-party libraries as contribs much easier. There is so much useful stuff out there that would be worth packaging as re-usuable qooxdoo &quot;libraries&quot;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22345</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-01-18 15:17:22 +0100</bug_when>
            <thetext>(In reply to comment #5)

Completely agree.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32017</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-01-28 14:47:22 +0100</bug_when>
            <thetext>Notes:

- The bug concerned with recursive library resolution is bug#1603.

- IMO if we would add dependency (scripts, libraries) information to a library, 
it should go into the Manifest (not config.json).

- Drawback: &quot;Late-binding&quot; of libraries is no longer possible. The requiring 
library &quot;burns in&quot; which library to use for its dependencies. 

- Alternative: Using a &quot;build&quot; version of the library, where all dependencies 
are copied in!? (&quot;pre-linked&quot;)

- Pragmatic alternative: Of course you could store such information in some 
configuration file. But config.json files are actually independent of libraries 
(it just so happens that the often live in the same directory), and this 
independence should not be lost. You would need to establish another 
mini-protocol: Look into the Manifest.json. Manifest.json links to some 
libconfig.json, look there. Extract &quot;source&quot; and &quot;build&quot; job definitions that 
are then integrated with (&quot;inherited by&quot;) the app&#39;s source and build jobs. 
Extract &quot;libraries&quot; job, for further include libraries. Asf. Example:

libconfig.json:

{
  &quot;jobs&quot; : {
     &quot;buildcommon&quot; : {
         &quot;add-script&quot; : [{ &quot;uri&quot; : &quot;http://.../../..&quot;}],
         &quot;library&quot; : [
             { &quot;manifest&quot; : &quot;contrib://Contrib1/0.1/Manifest.json&quot;},
             { &quot;manifest&quot; : &quot;contrib://Contrib2/0.2/Manifest.json}
         ]
     },
     &quot;source&quot; : {
         &quot;extend&quot; : [&quot;buildcommon&quot;]
     },
    &quot;build&quot; : {
          &quot;extend&quot; : [&quot;buildcommon&quot;],
          &quot;compile-options&quot; : { ... }   // maybe this lib requires special 
options, e.g. no string optimization
    }
}

- The problem here is that the library has no way of knowing where its required 
library or external script will be located at the time and location  the 
application that *uses* the library will be built. You just need a universal 
addressing scheme (contrib:// for libs, CDN URLs for scripts, ...), otherwise 
it wouldn&#39;t work. Also see Christian&#39;s comment suggesting a prefix solution to 
address an external script in the library&#39;s resource folder; this is just 
another way to construct a universally addressable URL for the script (much 
like a CDN URL).

- The current approach resembles much more the C-style of linking, where you 
need to pass all libraries you want to link with to the linker (-lm -lpcre 
-l...) *when* you are building a specific executable. The libraries themselves 
know their dependencies (&quot;symbol table&quot;), but don&#39;t care *where* the required 
symbols come from at link time, as long as they are there.

- This allows you to switch between compatibile libraries when linking, instead 
of being pinned to one concrete implementation.

- Following dependencies recursively might work in the context of contrib:// 
only libraries: Fetching one library, looking up its own &quot;libraries&quot; 
dependencies, which must all be contrib:// libraries, fetching those again, ...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35256</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:45:40 +0100</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="1" isprivate="0" isurl="0">
            <attachid>695</attachid>
            <date>2010-01-16 21:46:00 +0100</date>
            <delta_ts>2010-01-16 21:46:48 +0100</delta_ts>
            <desc>Patch to allow loading file from contribution&#39;s resource folder</desc>
            <filename>loader.tmpl.patch</filename>
            <type>text/plain</type>
            <size>1162</size>
            <attacher>info</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBxb294ZG9vLXRydW5rCkluZGV4OiB0
b29sL2RhdGEvZ2VuZXJhdG9yL2xvYWRlci50bXBsLmpzCj09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLS0tIHRvb2wvZGF0
YS9nZW5lcmF0b3IvbG9hZGVyLnRtcGwuanMJKHJldmlzaW9uIDIxMzU1KQorKysgdG9vbC9kYXRh
L2dlbmVyYXRvci9sb2FkZXIudG1wbC5qcwkod29ya2luZyBjb3B5KQpAQCAtMzAsNyArMzAsNyBA
QAogICBib290IDogJXtCb290fSwKICAgYm9vdElzSW5saW5lIDogJXtCb290SXNJbmxpbmV9LAog
ICAKLSAgZGVjb2RlVXJpcyA6IGZ1bmN0aW9uKGNvbXByZXNzZWRVcmlzKQorICBkZWNvZGVVcmlz
IDogZnVuY3Rpb24oY29tcHJlc3NlZFVyaXMsdXNlSW5kZXhQYXRoKQogICB7CiAgICAgdmFyIGxp
YnMgPSBxeC4kJGxpYnJhcmllczsKICAgICB2YXIgdXJpcyA9IFtdOwpAQCAtMzksNyArMzksNyBA
QAogICAgICAgdmFyIHVyaSA9IGNvbXByZXNzZWRVcmlzW2ldLnNwbGl0KCI6Iik7CiAgICAgICB2
YXIgZXVyaTsKICAgICAgIGlmICh1cmkubGVuZ3RoPT0yICYmIHVyaVswXSBpbiBsaWJzKSB7Ci0g
ICAgICAgIHZhciBwcmVmaXggPSBsaWJzW3VyaVswXV0uc291cmNlVXJpOworICAgICAgICB2YXIg
cHJlZml4ID0gbGlic1t1cmlbMF1dLnNvdXJjZVVyaSArICh1c2VJbmRleFBhdGggPyAiLy4uIiA6
ICIiKTsKICAgICAgICAgZXVyaSA9IHByZWZpeCArICIvIiArIHVyaVsxXTsKICAgICAgIH0gZWxz
ZSB7CiAgICAgICAgIGV1cmkgPSBjb21wcmVzc2VkVXJpc1tpXTsKQEAgLTExMCw3ICsxMTAsNyBA
QAogcXguJCRsb2FkZXIuaW5pdCA9IGZ1bmN0aW9uKCl7CiAgIHZhciBsPXF4LiQkbG9hZGVyOwog
ICBpZiAobC51cmlzQmVmb3JlLmxlbmd0aD4wKXsKLSAgICBsb2FkU2NyaXB0TGlzdChsLnVyaXNC
ZWZvcmUsIGZ1bmN0aW9uKCl7cmV0dXJuO30pOworICAgIGxvYWRTY3JpcHRMaXN0KGwuZGVjb2Rl
VXJpcyhsLnVyaXNCZWZvcmUsdHJ1ZSksIGZ1bmN0aW9uKCl7cmV0dXJuO30pOwogICB9CiAgIHZh
ciBib290UGFja2FnZUhhc2g9bC5wYWNrYWdlSGFzaGVzW2wucGFydHNbbC5ib290XVswXV07CiAg
IGlmIChsLmJvb3RJc0lubGluZSl7Cg==
</data>

          </attachment>
      

    </bug>