<bug>
          <bug_id>7474</bug_id>
          
          <creation_ts>2013-06-20 14:49:00 +0200</creation_ts>
          <short_desc>Integrate create-application.py with generate.py</short_desc>
          <delta_ts>2014-03-03 09:44:27 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool</component>
          <version>2.1.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>derrell.lipman</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>33024</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-06-20 14:49:08 +0200</bug_when>
            <thetext>The application wizzard, create-application.py, is a stand-alone program in our 
SDK. While I&#39;m not advocating having a *single* binary  for everything, in this 
case I would prefer having the application generation as a function of the 
general generate.py user frontend, e.g. as a dedicated job &#39;generate.py 
create-application ...&#39;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33025</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2013-06-20 14:58:48 +0200</bug_when>
            <thetext>Chicken and egg problem? generate.py is a stub created by (or copied in by) create-application.py. Are you proposing that generate.py will be in .../tools/bin, the user could have .../tools/bin in the PATH (as currently, in order to access create-application.py), and then creating the application need not create an application&#39;s own copy of generate.py?

I&#39;m curious what problem this proposal is solving?

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33027</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-06-20 15:19:59 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; Chicken and egg problem? generate.py is a stub created by (or copied in by)
&gt; create-application.py. Are you proposing that generate.py will be in
&gt; .../tools/bin, the user could have .../tools/bin in the PATH (as currently,
&gt; in order to access create-application.py), and then creating the application
&gt; need not create an application&#39;s own copy of generate.py?

No, it&#39;s not about PATH resolution. create-application.py is in the SDK
top-level since some time, and we could just as well have a generate.py there.
It would be just a nicer and more integrated user interface.

As for the .../tool/bin path, I would welcome adding this to PATH, like so many
other packages do (e.g. Scala). That would get us rid of all stubs.

&gt; 
&gt; I&#39;m curious what problem this proposal is solving?

Having to use two different front-end commands for the average user.</thetext>
          </long_desc>
      
      

    </bug>