<bug>
          <bug_id>4148</bug_id>
          
          <creation_ts>2010-10-01 19:02:00 +0200</creation_ts>
          <short_desc>Generator should produce identical results given functionally identical sets of classes</short_desc>
          <delta_ts>2014-03-03 15:25:04 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Ecker">qooxdoo</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>thron7</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>20442</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-10-01 19:02:01 +0200</bug_when>
            <thetext>Right now the generator might produce an app with a random order of classes used. So it might not be guaranteed that an identical code basis will always produce the same app (e.g. on another computer, or after some local file system change).

Possible solution: Sort the following three types of internal lists: class list (global), list of all &quot;load&quot; deps (for each class), list of all &quot;use&quot; deps (for each class). This might then reproducibly generate the same resulting list of classes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20454</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-10-04 10:06:29 +0200</bug_when>
            <thetext>Thomas, do you know why the generator produces different sets? On what does it depend?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20773</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-10-19 15:34:34 +0200</bug_when>
            <thetext>After fixing the variable optimization, this can now be achieved if either
- compiling from an empty cache, or
- disabling private optimization

The private optimization is a major obstacle for an unconditional 
cross-platform, string-identical compile result (hence bug#4203), but for any 
practical situation, clearing the cache before building should be an acceptable 
prereq. As far as I can see the dependency sorting (as indicated in the bug 
summary) is stable across builds and platforms, so no changes there.

With r23546.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27712</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-11-30 15:34:42 +0100</bug_when>
            <thetext>*** Bug 2725 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38620</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:04 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>