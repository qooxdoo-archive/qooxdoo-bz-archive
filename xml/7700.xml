<bug>
          <bug_id>7700</bug_id>
          
          <creation_ts>2013-08-29 15:50:00 +0200</creation_ts>
          <short_desc>Routing needs ability to break calling any further matching route handler</short_desc>
          <delta_ts>2014-09-23 08:22:29 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.application</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mustafa Sak">mustafa.sak</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>33783</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2013-08-29 15:50:49 +0200</bug_when>
            <thetext>Think, you have a default generic page which should be shown on any route, but also you want to define some special page, which should be shown instead of the generic one by a specific route.

e.g.

r.onGet(&quot;/cat/{catId}/details&quot;, function(data){
  specialPage.show();
});


r.onGet(/.*/, function(data){
  genericPage.show();
});


Above example will execute on the route &quot;/cat/0/details&quot; both handler.
How could we prevent this?

I my opinion a new interrupt error could stop further handling of listeners. A well placed try/catch on qx.event.Messanging#_emitRoute could handle this.

So the first handler could be written like this:
r.onGet(&quot;/cat/{catId}/details&quot;, function(data){
  specialPage.show();
  throw new qx.event.InterruptHandler(); // class extended from Error
});</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33787</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-08-30 09:25:38 +0200</bug_when>
            <thetext>As these are event handlers, we can not guarantee the execution order which means that one event handler can not know which hander it would cancel. Additionally, no event handler should be able to influence another on the same level. As all these listener are added to the routing object, they are on the same level so we would break the event pattern with that.
Considering both arguments, the proposed solution should not be added in my opinion.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33793</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-08-30 11:23:25 +0200</bug_when>
            <thetext>We just took some time to find another suitable solution for the general problem. The basic idea was to provide a hock before the routes are executed in which the application developer can decide which routes should be executed or not. This hock method should have the information about the matched rout pattern and the exact route to determinate which to exclude and which to execute.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41212</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-09-23 08:22:29 +0200</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>