<bug>
          <bug_id>8315</bug_id>
          
          <creation_ts>2014-05-08 10:38:00 +0200</creation_ts>
          <short_desc>Sinon Fakeserver: Fatal check when sending (multiple) fake requests</short_desc>
          <delta_ts>2015-02-10 17:26:40 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.1.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Ecker">qooxdoo</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>christian.hagendorn</cc>
    
    <cc>daniel.wagner</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>40154</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2014-05-08 10:38:28 +0200</bug_when>
            <thetext>The latest Sinon (now in qooxdoo master) version comes with a verifyRequestOpened() check. This check throws an exception when sending (multiple) fake requests. Specific/reduced sample code to show and debug this issue: tbd.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40155</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2014-05-08 10:39:59 +0200</bug_when>
            <thetext>As discussed with Daniel.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40173</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2014-05-09 15:17:30 +0200</bug_when>
            <thetext>Fixed on master with 2b19ec0.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40314</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2014-05-19 13:37:35 +0200</bug_when>
            <thetext>There is still an issue.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40316</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2014-05-19 13:57:58 +0200</bug_when>
            <thetext>The first fix with 2b19ec0 has only fixed qx.io.rest.Resource by calling the dispose method asynchronous. But custom code are also effected with this issue. Therefore the asynchronous dispose call is moved to qx.io.request.AbstractRequest.

Done on master with c5759e1.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42340</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2015-02-02 10:45:31 +0100</bug_when>
            <thetext>This issue is not fixed when the bom request implementation (qx.bom.rest.Resource)  is used.  Then Sinon will throw an error:
Uncaught Error: Fake server request processing threw exception: INVALID_STATE_ERR - 0

We have also dispose the transport layer asynchronous.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42359</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2015-02-02 11:46:38 +0100</bug_when>
            <thetext>I done a fix on master with 8b2f902 and 4.1.x branch with 32dfdaa. The fix is only a workaround and should be improved.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42445</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2015-02-10 17:26:40 +0100</bug_when>
            <thetext>I thought we could clean this up slightly by asynchronously calling abort on the native XHR object in bom.request.Xhr but that would break expectations (and unit tests) since calling abort should trigger a synchronous ready state change. So the fix has to be applied in the next higher level, which is bom.rest.Resource and io.request.AbstractRequest, i.e. where Chris already inserted it.</thetext>
          </long_desc>
      
      

    </bug>