<bug>
          <bug_id>290</bug_id>
          
          <creation_ts>2007-02-13 10:14:00 +0100</creation_ts>
          <short_desc>Postponed update to scrollers fails if table has been disposed</short_desc>
          <delta_ts>2007-02-13 19:47:12 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.table</component>
          <version>0.6.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Hugh Gibson">hgibson</reporter>
          <assigned_to name="Til Schneider">tilman.schneider</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>884</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2007-02-13 10:14:30 +0100</bug_when>
            <thetext>In our application we can quickly create and destroy tables if the user presses a button to scroll through messages.

This can create problems in that TablePaneScroller._postponedUpdateContent can be used to call _updateContent after a timeout of 0 seconds. In this case, if the table has been disposed before _updateContent has been called, then an error occurs when _updateContent tries to manipulate parts of the table that have been deleted.

The solution is simple: just check isDisposed before calling _updateContent. A tested patch is attached.

In 0.6.5 code I worked around this by replacing the function _updateContent with another one that calls the base function *after* checking isDisposed().

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>885</commentid>
              <attachid>101</attachid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2007-02-13 10:15:54 +0100</bug_when>
            <thetext>Created attachment 101
Patch to fix the problem.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>893</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2007-02-13 19:47:12 +0100</bug_when>
            <thetext>Fixed by check-in 6189.  All setTimeout() calls now protect themselves by ensuring that the objects being manipulated within the timeout handler have not been disposed.

Thanks!

Derrell</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="1" isprivate="0" isurl="0">
            <attachid>101</attachid>
            <date>2007-02-13 10:15:00 +0100</date>
            <delta_ts>2007-02-13 10:15:54 +0100</delta_ts>
            <desc>Patch to fix the problem.</desc>
            <filename>qxBug290.patch</filename>
            <type>text/plain</type>
            <size>957</size>
            <attacher>hgibson</attacher>
            
              <data encoding="base64">SW5kZXg6IHRydW5rL3Fvb3hkb28vZnJvbnRlbmQvZnJhbWV3b3JrL3NvdXJjZS9jbGFzcy9xeC91
aS90YWJsZS9UYWJsZVBhbmVTY3JvbGxlci5qcw0KPT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tIHRydW5rL3Fvb3hk
b28vZnJvbnRlbmQvZnJhbWV3b3JrL3NvdXJjZS9jbGFzcy9xeC91aS90YWJsZS9UYWJsZVBhbmVT
Y3JvbGxlci5qcwkocmV2aXNpb24gNjE2NikNCisrKyB0cnVuay9xb294ZG9vL2Zyb250ZW5kL2Zy
YW1ld29yay9zb3VyY2UvY2xhc3MvcXgvdWkvdGFibGUvVGFibGVQYW5lU2Nyb2xsZXIuanMJKHdv
cmtpbmcgY29weSkNCkBAIC0xMjMxLDE1ICsxMjMxLDE5IEBADQogICBpZiAoISB0aGlzLl91cGRh
dGVDb250ZW50UGxhbm5lZCkgewogICAgIHZhciBzZWxmID0gdGhpczsKICAgICB3aW5kb3cuc2V0
VGltZW91dChmdW5jdGlvbigpIHsKLSAgICAgIHNlbGYuX3VwZGF0ZUNvbnRlbnQoKTsKKyAgICAg
IC8vIG1ha2Ugc3VyZSB0aGF0IGl0IGhhc24ndCBiZWVuIGRpc3Bvc2VkIHByaW9yIHRvIHVwZGF0
ZQorICAgICAgaWYgKCFzZWxmLmlzRGlzcG9zZWQoKSkgeworICAgICAgICBzZWxmLl91cGRhdGVD
b250ZW50KCk7CisgICAgICAgIHF4LnVpLmNvcmUuV2lkZ2V0LmZsdXNoR2xvYmFsUXVldWVzKCk7
CisgICAgICB9CiAgICAgICBzZWxmLl91cGRhdGVDb250ZW50UGxhbm5lZCA9IGZhbHNlOwotICAg
ICAgcXgudWkuY29yZS5XaWRnZXQuZmx1c2hHbG9iYWxRdWV1ZXMoKTsKICAgICB9LCAwKTsKICAg
ICB0aGlzLl91cGRhdGVDb250ZW50UGxhbm5lZCA9IHRydWU7CiAgIH0KIH0KIAogCisKIC8qKgog
ICogVXBkYXRlcyB0aGUgY29udGVudC4gU2V0cyB0aGUgcmlnaHQgc2VjdGlvbiB0aGUgdGFibGUg
cGFuZSBzaG91bGQgc2hvdyBhbmQKICAqIGRvZXMgdGhlIHNjcm9sbGluZy4K
</data>

          </attachment>
      

    </bug>