<bug>
          <bug_id>5500</bug_id>
          
          <creation_ts>2011-08-09 15:45:00 +0200</creation_ts>
          <short_desc>API-Data-Generation should understand filtered includes</short_desc>
          <delta_ts>2014-03-03 15:25:11 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>app.apiviewer.desktop</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>1.6</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Gabriel Munteanu">jajalinux</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>26445</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-08-09 15:45:44 +0200</bug_when>
            <thetext>We introduced the the environment method &quot;filter&quot; which is used for mixin includes. The API viewer should be able to understand those filter method and create the data for those. An example is qx.core.Object.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26599</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-08-26 14:00:42 +0200</bug_when>
            <thetext>Add support for qx.core.Environment.filter() in class &#39;include&#39; member for API 
data generation. Mixins given in the map to Environment.filter are now honored.

A requirement of Martin, not explicit in this bug, was that the list of mixins 
derived from the Environment.filter() map was sensitive to variants. I.e. if an 
environment key in the map was known to be false (from the config), the 
corresponding mixin should not be considered in the api doc.

This required that the generator honors variants when creating api data (which 
was not the case so far). Variants affect working with classes in two ways:
(a) They influence the calculated class list for the generation, through 
changing dependencies.
(b) They influence the code of the individual classes, through code pruning.

For the api data generation, (a) is still done without variants, in order to 
capture e.g. all classes of an application, not only those that are in due to 
dependencies. But this might be a point of discussion.

For (b), this is now visible in the filtered mixin list of &#39;include&#39; members, 
but shouldn&#39;t have negative impacts on other parts of the api documentation. 
E.g. class members (properties, methods, ...) will not appear or vanish due to 
variant settings, so their corresponding API doc will always be included. 

One other issue of the API data generation was that overridden features in 
child classes did not properly inherit the api doc of the implementing parent 
class. E.g. the api doc for qx.ui.table.Table#addListener was not found, which 
previously was given in qx.core.Object, but the implementation, together with 
the api documentation, has moved to the qx.core.MEvents mixin. This was due to 
the search of api doc for a feature in the parent classes: Only classes and 
interfaces where inspected, but no mixins (for reasons unclear to me). I 
changed this to take mixins into account as well.

With r28541.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26706</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-09-07 17:03:34 +0200</bug_when>
            <thetext>I am still not sure if its a good idea to show classes which are not available when the variant optimization is on because you cant use them. But on the other hand, you don&#39;t want to have n kind of API viewers each showing a different configuration...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38658</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:11 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>