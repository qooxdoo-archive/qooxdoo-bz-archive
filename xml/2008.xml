<bug>
          <bug_id>2008</bug_id>
          
          <creation_ts>2009-02-26 21:48:00 +0100</creation_ts>
          <short_desc>Source generation: Add support for hybrid source-build version</short_desc>
          <delta_ts>2014-03-03 15:20:41 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.4</target_milestone>
          <dependson>2129</dependson>
          <blocked>2587</blocked>
          <votes>6</votes>
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>alexander.steitz</cc>
    
    <cc>mshillinger</cc>
    
    <cc>qooxdoo-bugs</cc>
    
    <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>8094</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-26 21:48:21 +0100</bug_when>
            <thetext>Add support for a &quot;source&quot; version of an app that has the application class files as script includers as usual, but the framework classes in a single, non-optimized build file.

This improves load performance of the source version, allows usual debugging of application classes, and still allows meaningful inspection of framework code.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8355</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-03-06 17:23:30 +0100</bug_when>
            <thetext>to 0.8.3</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9883</commentid>
            <who name="Michael Shillinger">mshillinger</who>
            <bug_when>2009-05-08 20:49:55 +0200</bug_when>
            <thetext>As requested on the ML - Here are my experiences with a hybrid build in 
0.8.3.pre

Note:  I first attempted to do this by hacking the generator, but keeping up 
with the diff/merges got to be a headache. We use Ant for our main development 
environment, so I moved the logic into an ant task but the basic procedures 
would be the same.

Here is how I do it.

Using the Framework: build job to create a precompiled version of the qx 
library (qx,js).

Edit the file (qx.js) 
 + remove all of the qx.window settings at the begining
 + remove the last line which initializes the Application class
 + move this file to myApp/source/script (same place that &quot;target.js&quot; will be 
generated) - we check it into svn

Generate a standard source build for my app (target.js) using &quot;generate.py 
source&quot;.

Open target.js and modify the qx.$$loader.uris array so each entry is on it&#39;s 
own line ( unfortunately the &quot;format : on&quot; setting  does not do this)

In target.js replace the first element in the uris array with a reference to 
our precompiled &quot;qx.js&quot;.  Remove the reset of the references to classes from 
the SDK - but leave the references to your own classes.

If you deploy to a build output area, you will have to modify the relative path 
to your own  classes for all references

Save target.js

Copy your source classes into your build output area

Copy target.js and qx.js to your build output area.

The only JS file you have to reference from your html page will be target.js, 
since it includes a reference to qx.js.

+++++

This approach works farily well.

 + build time is extremely fast, since you are not optimizing anything.
 + your app loads much faster than a full source build.
 + you can debug &amp; step into all of your own classes
 + if you wan to revert to a full source build, you just skip modifying 
target.js
 + developers never have to run a fully optimized build, unti we are ready for 
QA testing

There are a few issues 

- the qx.js always includes ALL classes so it can be pretty big, but your 
browser should cache it. Also, you can mess around with &quot;exclude&quot; in the 
framework build to ignore classes you never  use.

- recently debug:on stopped working in compiled code - this is a drag because 
it seems to kill stack traces 

- occassionally Qooxdoo developers will used &quot;defered&quot; loading/init of classes 
which can cause problems (seems mostly to do with Assert)

- you can step into qx,js, but it is optimized and usless for debugging - also 
loading the large file in firebug will sometimes cause firebug to lock up.

-- you have to make sure the SDK and the version of qx.js are in sync - we 
store them in svn as a few tar.gz files  and have ant tasks that expand and 
configure the SDK. 

It would be really nice to have this functionaly in the default build system, 
but it would have to be pretty flexible</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11597</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-08-26 19:14:14 +0200</bug_when>
            <thetext>down prio for now</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11961</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-08 09:41:31 +0200</bug_when>
            <thetext>moved from 0.8.3 to 0.9</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13061</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-10-12 11:06:50 +0200</bug_when>
            <thetext>base.json:
  &quot;source-hybrid&quot;:
    &quot;source-hybrid-framework&quot;,
    &quot;source-hybrid-application&quot;

(missing: other libs/contribs)

loader:
  qx.$$libraries : {..., 
&quot;qx&quot;:{&quot;resourceUri&quot;:&quot;../../../qooxdoo.trunk/source/resource&quot;,&quot;sourceUri&quot;:&quot;../source/script&quot;},...

  qx.$$loader.uris : [[&quot;qx:qx-0.js&quot;, ...

  qx.$$resources: &lt;all qx images are missing!&gt;

So after manually editing the loader (qx.$$libraries[&quot;qx&quot;], 
qx.$$loader.uris[[&quot;qx:qx-0.js&quot;...) the application is running, but all 
decorations and images from the framework are missing.

base.json changes with r20326.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13159</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-10-13 12:47:20 +0200</bug_when>
            <thetext>up prio again?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13160</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-10-13 12:47:25 +0200</bug_when>
            <thetext>up prio, to support developer productivity (e.g. mailclient)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13166</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-10-13 15:07:35 +0200</bug_when>
            <thetext>plan to work on</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13797</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-02 18:20:27 +0100</bug_when>
            <thetext>add dependencies</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13959</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-05 17:52:22 +0100</bug_when>
            <thetext>unassign</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14744</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:26:04 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15700</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-12-11 11:31:20 +0100</bug_when>
            <thetext>mass move to 1.0.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16504</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 16:30:52 +0100</bug_when>
            <thetext>moved to target 1.0.2</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23055</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-03-03 19:23:01 +0100</bug_when>
            <thetext>The &#39;source-hybrid&#39; job is now supported for generation. It works on all kinds 
of apps, with and without part definitions. The classes that should remain in 
their individual source files are given as class patterns in the new config key 
&quot;compile-options/code/except&quot; (and a new value for &quot;compile/type&quot; is &quot;hybrid&quot;). 
All other classes are collected in several common files, as they are 
encountered along the load dependency ordering of classes. The current contents 
of the common files is just a concatenation of the classes&#39; source files, but 
might be extended to contain optimized code in the future.

With r25299.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23068</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-03-04 12:34:24 +0100</bug_when>
            <thetext>Removing dep on bug#3016; source-hybrid was eventually implemented using the standard loading mechanisms for part loading.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23070</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-03-04 12:40:46 +0100</bug_when>
            <thetext>*** Bug 2587 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23093</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-03-05 22:22:30 +0100</bug_when>
            <thetext>Adding support for source-hybrid to the Demobrowser surfaced two general bugs in the generator, one concerning data sharing between run keys (!bug#4738), and one concerning the sourceUri of the __out__ library.

When building the Demobrowser in its source-hybrid version, not only the GUI will be source-hybrid but each generated demo application as well! This might be handy when developing individual demos.

With r25358</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23102</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-03-07 10:44:59 +0100</bug_when>
            <thetext>Concerning optimizing the &quot;compiled&quot; parts of a source-hybrid build:
Andreas suggested that if optimization is applied, it should be rather light as 
it is still a development version:
- qx.debug should be &quot;on&quot;
- variable names should not be optimized (=&gt; readability, error messages)
- privates should not be optimized  (dito)
- strings optimization?
- basecall optimization is ok
- stripping comments is ok</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36991</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:20:41 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>