<bug>
          <bug_id>8680</bug_id>
          
          <creation_ts>2014-11-05 17:43:00 +0100</creation_ts>
          <short_desc>properties getter method isn&#39;t overwritten by child class</short_desc>
          <delta_ts>2014-11-21 16:36:21 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>next</product>
          <component>core</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Richard Sternagel">richard.sternagel</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>41514</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-11-05 17:43:35 +0100</bug_when>
            <thetext>Getter of child class is not called. Best illustrated by a code sample:

.---
| qx.Class.define(&quot;my.namespace.A&quot;,
| {
|   ...
|   properties: {
|     foo: {
|       get: &quot;_abc&quot;
|     }
|   },
|
|   members: {
|     _abc: function() {
|       console.log(&quot;within A&quot;);
|     }
|   }
|   ...
| }
|

.---
| qx.Class.define(&quot;my.namespace.B&quot;,
| {
|   extend: my.namespace.A,
|   ...
|   members: {
|     _abc: function() {
|       console.log(&quot;within B&quot;);
|     }
|   }
|   ...
| }
|

Result:
&quot;within B&quot; is never shown but always &quot;within A&quot;.

Should:
&quot;within B&quot; should be shown when accessing &quot;new my.namespace.B().foo&quot;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41519</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-11-06 10:21:03 +0100</bug_when>
            <thetext>Don&#39;t know why, but somehow it works in another case:

See:
https://github.com/qooxdoo/qooxdoo/commit/5dbf316a0665bd136f26a4d5d9f56a466b96d083

and getter (&quot;getStatusText&quot; and &quot;getStatus&quot;) in &quot;qx.io.request.Jsonp&quot;.

Those are properly called ...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41591</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-17 13:00:56 +0100</bug_when>
            <thetext>We used the reference to the method on property creation. This ofc. does not consider extension. Fixed it with 987b6d62f8aa383e258347d118320212dd006e3e</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41621</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-11-18 09:46:23 +0100</bug_when>
            <thetext>&quot;qx.test.io.request.Xhr:test: basic auth&quot; fails now. Debugged with Martin - seems to be a side effect of the bugfix.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41624</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-11-18 10:40:31 +0100</bug_when>
            <thetext>This was a good one because it only appears if we have a property with a custom setter / getter and another property without which will be define afterwards.

It is always good to keep in mind that the following code works:

var a; // undefined
a = 12; // 12
var a; // 12

This is specially interesting in loops.

next: 3b7dd3457c696c1fadded9a0fbea279918ab5bb8</thetext>
          </long_desc>
      
      

    </bug>