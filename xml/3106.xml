<bug>
          <bug_id>3106</bug_id>
          
          <creation_ts>2009-11-24 18:54:00 +0100</creation_ts>
          <short_desc>Generator should check links in Apidata</short_desc>
          <delta_ts>2014-03-03 15:25:37 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>0.8.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>qooxdoo-bugs</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>14426</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-24 18:54:27 +0100</bug_when>
            <thetext>Again and again there are broken links in the API documentation, as presented 
in the Apiviewer. These stem e.g. from broken {@link } tags in JSDoc comments. 
E.g. the documenation of the qx.application.AbstractGui#getRoot method points 
to qx.ui.layout.Canvas#add, which does not exist (anymore?).

It should be possible to validate all these internal links upfront, since all 
links as well as all potential targets are extracted from the class docs 
eventually while generating the apidata. Maybe this has to be an optional step, 
as it might require additional resources integrating the base document tree 
with the individual class trees on the generator side. But it should be 
feasible anyway, and would greatly enhance the consistency of the API 
documenation. It could be done once in a while, as a QA measure.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14427</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 19:39:14 +0100</bug_when>
            <thetext>Yes, there should be much benefit in ensuring working internal links. I could also think of a pure JS solution (maybe in the source version of the API viewer, maybe optional) that traverses the apidata and verifies the links?

In any case, we should target this for the 1.0 release. I assign to Daniel, please figure out possible solutions (with Thomas, Johnny).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14987</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-26 19:08:15 +0100</bug_when>
            <thetext>(In reply to comment #1)
&gt; Yes, there should be much benefit in ensuring working internal links. I could 
also think of a pure JS solution (maybe in the source version of the API 
viewer, maybe optional) that traverses the apidata and verifies the links?

I don&#39;t think that a JS solution makes sense here. For QA purposes you want a 
straight list of broken links, each with information like referencing class 
name, line no, referenced target, which should be straight-forward to implement 
in the generator. The Apiviewer is a user-facing application with a single 
purpose: allow browsing of API documentation. You would either need to add a 
control in the GUI to trigger links checking (bad), or do the check everytime a 
class is loaded (also bad). In any case, as the Apiviewer loads classes on 
demand, you would have to manually(!) load all classes, in order to get a list 
of all broken links. And then the list is in some weird console (Firebug, ...) 
where you cannot redirect to a file, so you have to struggle with clumsy 
copy-and-paste actions... In my view this would be allocating the functionality 
in the wrong place.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15375</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-12-07 15:45:13 +0100</bug_when>
            <thetext>Added link verification in r20963: Activate by extending the job &quot;apiconf::build-data&quot; and adding &quot;verify&quot; : [&quot;links&quot;] to the &quot;api&quot; subkey.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38816</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:37 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>