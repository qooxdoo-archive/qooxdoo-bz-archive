<bug>
          <bug_id>8845</bug_id>
          
          <creation_ts>2014-12-19 16:29:00 +0100</creation_ts>
          <short_desc>Add control flow helper</short_desc>
          <delta_ts>2014-12-19 16:29:58 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>next</product>
          <component>core</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>42047</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-12-19 16:29:46 +0100</bug_when>
            <thetext>Handling events can be tough especially when you have to deal with dependencies between events. There are three different use cases I see:

1. Wait until all events ended
---------------------------------
If you start a coupe of animations and you don&#39;t care which of it ends first but you want to continue with your workflow as soon as all animations ended, you might want to have a easy way to do that. Here is a piece of pseudo code showcasing how that could look:

var flow = new Flow();
flow.all([obj1, obj2, obj3], &quot;type&quot;).on(&quot;type&quot;, function() {
  console.log(&quot;all done&quot;);
});

Here is a prototype based on qooxdoo master: http://tinyurl.com/lts4tda


2. Wait for the first event
----------------------------
It may also happen that you don&#39;t care which event comes but you want to get an update as soon as one is fired. The sample code looks almost similar to the one for the first block.

var flow = new Flow();
flow.race([obj1, obj2, obj3], &quot;type&quot;).on(&quot;type&quot;, function() {
  console.log(&quot;first done&quot;);
});


3. Execute code in sequence
----------------------------------
This is a typical use case for promises [1] (where I took the names from). I used a simple example where three requests should be filed in sequence. This could something like this using promises:

xhr(&quot;1&quot;).then(function() {
  return xhr(&quot;2&quot;);
}).then(function() {
  return xhr(&quot;3&quot;);
}).than(function() {
  console.log(&quot;all done&quot;);
});


Using pure events gives us the well known pyramid of doom:

xhr(&quot;1&quot;).on(&quot;success&quot;, function() {
  xhr(&quot;2&quot;).on(&quot;success&quot;, function() {
    xhr(&quot;3&quot;).on(&quot;success&quot;, function() {
      console.log(&quot;all done&quot;);
    });
  });
});

Basically it would be nice to have something to get rid of that as well but I could not think of something working at the moment. But it could be worth thinking of it.

[1] https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise</thetext>
          </long_desc>
      
      

    </bug>