<bug>
          <bug_id>5877</bug_id>
          
          <creation_ts>2011-12-04 21:19:00 +0100</creation_ts>
          <short_desc>generator&#39;s parser incorrect errors on regular expression containing [/]</short_desc>
          <delta_ts>2014-03-03 15:21:44 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.6.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Derrell Lipman">derrell.lipman</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>27791</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-12-04 21:19:47 +0100</bug_when>
            <thetext>The following statement is, I believe, perfectly syntactically correct:


            sourceFileName = sourceFileName.replace(/^.*[\\/]/, &quot;&quot;);

yet the generator bombs out with the following error:


&gt;&gt;&gt; Scanning libraries -Expected token/COMMA but found token/RB: &#39;]&#39;. file:aiagallery.module.dgallery.mystuff.Fsm, line:622, column:61</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29517</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-05-22 15:10:46 +0200</bug_when>
            <thetext>Derrell,

I think your regex is not correct. What do you want to express in the character 
class? A class containing both &quot;\&quot; and &quot;/&quot;? Then the class should be &quot;[\\\/]&quot;.

As you certainly know, &quot;\&quot; is the escape character in regex, so if you want to 
include a literal &quot;\&quot;, you have to enter &quot;\\&quot;. But in your version the 
following &quot;/&quot; then terminates the regex, and the subsequent &quot;]&quot; is a syntax 
error. If you escape it like &quot;\/&quot;, it works fine. (I checked in master and 
branch, both parsers accept this).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29520</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2012-05-22 16:14:10 +0200</bug_when>
            <thetext>Thomas, I understand your interpretation, but I&#39;m not convinced it matches the spec, and it does not match the behavior of Firefox or Chrome. 

Look at http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf page 25. Once you&#39;ve found a left square bracket (&#39;[&#39;), you&#39;ve entered the RegularExpressionClass production, which is not terminated by a forward slash (&#39;/&#39;). It contains RegularExpressionClassChars up to a right square bracket (&#39;]&#39;).

If you try the following in the Firefox or Chrome console, you&#39;ll see what I mean:

var sourceFileName = &quot;x/y/z&quot;;
sourceFileName.replace(/^.*[\\/]/, &quot;&quot;);

The result is &quot;z&quot; in both, as I would expect.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29528</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-05-22 19:03:47 +0200</bug_when>
            <thetext>I guess you&#39;re right, although you are refering to a 5.1 revision of Ecma262. 
Ecma262 3rd, which is still authoritative for us, is not much different in that 
respect, if I get it right.

The good thing is the spec does not support &quot;positional&quot; escaping as an 
alternative to backslash escaping (e.g. &quot;[]]&quot; as a correct character class). 
That makes it easier to handle the end of the char class.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29530</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-05-23 12:40:33 +0200</bug_when>
            <thetext>Make parser not treat unescaped &quot;/&quot; in character classes of a regexp as 
termination of the regexp.

master: 609b0c0
1.6.x: 7d05b69</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37402</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:21:44 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>