<bug>
          <bug_id>4713</bug_id>
          
          <creation_ts>2011-02-28 14:41:00 +0100</creation_ts>
          <short_desc>Load Event Comes Too Early due to Asynchronous Loading of Script Files</short_desc>
          <delta_ts>2014-03-03 08:47:10 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>1.3</version>
          <rep_platform>WebKit</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>WebKit</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>22998</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-02-28 14:41:50 +0100</bug_when>
            <thetext>It appears that in Webkit-based browsers, including Chrome, the native &#39;load&#39; 
event comes too early, due to the asynchronous loading of the scripts in those 
browsers (See the use of window.setTimeout() in the function loadScriptList() 
in loader.tmpl.js). 

This seems to be fine for the build version, where the loader script and the 
first additional script are loaded synchronously. 
In the source version, the load event comes after loading qx.Bootstrap and 
before any other class, which doesn&#39;t seem to create problems, but the load 
event is effectively lost for the application.
In the source-hybrid version, the issue raised an exception, as the first 
script loaded after the loader already contains code that registers &#39;load&#39; 
event handlers (eg. in qx.event.handler.Window). THEN the load event is fired 
by the browser and the handler(s) are invoked, but the run time dependencies 
for these handlers are not loaded yet (as they come in a subsequent script 
file).

Through registering the handlers and invoking them indirectly by the event 
manager, it is not detectable for the generator that a run time dependency is 
lifted to a load time dependency.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22999</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-02-28 14:54:21 +0100</bug_when>
            <thetext>I fixed the issue that appeard in the source-hybrid version by hard-requiring 
the missing load time dependencies of qx.event.handler.Window._onNative, 
  require(qx.event.type.Native)
  require(qx.event.Pool) 
(the latter one via call to qx.event.Registration.createEvent).

With r25278.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35809</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:10 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>