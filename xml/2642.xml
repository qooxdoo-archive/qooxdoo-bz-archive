<bug>
          <bug_id>2642</bug_id>
          
          <creation_ts>2009-08-02 17:50:00 +0200</creation_ts>
          <short_desc>Simple Table Model - setDataAsMapArray crucial enhancement</short_desc>
          <delta_ts>2014-03-03 15:19:31 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.table</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          <bug_file_loc>http://www.qooxdoo.org</bug_file_loc>
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.0-beta1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Gleb Mazovetskiy">glex.spb</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>fabian.jakobs</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>11169</commentid>
            <who name="Gleb Mazovetskiy">glex.spb</who>
            <bug_when>2009-08-02 17:50:15 +0200</bug_when>
            <thetext>With simple table model setDataAsMapArray can be used to set the data from Json response.

However, often, json response is an array of maps, for example (automatically generated by rails, then formatted for readability):
[{&quot;song&quot;: {&quot;id&quot;: 107, &quot;total_count&quot;: 0, &quot;display_name&quot;: &quot;A - B&quot;}},
{&quot;song&quot;: {&quot;id&quot;: 105, &quot;total_count&quot;: 0, &quot;display_name&quot;: &quot;C - D&quot;}}]  

In order for it to be automatically parsed by simple data model, the model should understand the &quot;.&quot; symbol in the id&#39;s notation.
Right now it doesn&#39;t, so this data with the id array [&quot;song.total_count&quot;, &quot;song.id&quot;, &quot;song.display_name&quot;] does not get parsed correctly.

This is important because the data is generated this way by several popular frameworks, including Ruby On Rails.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11173</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-08-03 10:00:47 +0200</bug_when>
            <thetext>Martin, please have a look and talk to Fabian as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11872</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-09-03 15:27:43 +0200</bug_when>
            <thetext>Hello Gleb,
we don&#39;t think we need such a functionality in the framework as this is mostly user specific? Correct me if im wrong!
Anyway, i took some minutes to check if its hard to implement. Thats what i ended up:

parseDataFormRuby = function(mapArr) {
  var returnArray = [];
  for (var i = 0; i &lt; mapArr.length; i++) {
    var row = mapArr[i];
    var newRow = {};
    for (var prefix in row) {
      var data = row[prefix];
      for (var key in data) {
        newRow[prefix + &quot;.&quot; + key] = data[key];
      }
    }
    returnArray.push(newRow);
  }
  return returnArray;
}

Maybe its not the best way to implement it. Is that what you had in mind?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11877</commentid>
            <who name="Gleb Mazovetskiy">glex.spb</who>
            <bug_when>2009-09-03 19:19:35 +0200</bug_when>
            <thetext>I am using something like this (untested code!):

        dataFromMap: function(mapArr, columns) {
            var colCount = columns.length, rowCount = mapArr.length;
            var cols = [], rows = [];
            for (var i = 0; i &lt; colCount; i++) {
                cols.push(columns.split(&quot;.&quot;));
            }
            for (i = 0; i &lt; rowCount; i++) {
                var newRow = [];
                for (var j = 0; j &lt; colCount; j++) {
                    var value = mapArr[i];
                    for (var k = 0; k &lt; cols[j].length; k++) {
                        value = value.get(cols[j][k]);
                    }
                    newRow.push(value);
                }
                rows.push(newRow);
            }            
        }

Basically, this enhancement is to allow property chains</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12654</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-09-25 10:48:29 +0200</bug_when>
            <thetext>As I said in comment #2, i don&#39;t see that this is a functionality we need in the framework so i marked the bug as WONTFIX.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14528</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:15:17 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36518</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:31 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>