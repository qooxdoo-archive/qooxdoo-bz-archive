<bug>
          <bug_id>1589</bug_id>
          
          <creation_ts>2008-11-14 14:14:00 +0100</creation_ts>
          <short_desc>Generator: Support Unicode throughout code parsing</short_desc>
          <delta_ts>2014-03-03 15:26:11 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>6295</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2008-11-14 14:14:59 +0100</bug_when>
            <thetext>The generator does not comply with unicode chars in Javascript code as allowed by the Ecmascript 3 spec. This should be amended.

The promiment case where this became obvious was the part in pylib/generator/code/LibraryPath.py, where the class name was extracted from a &quot;qx.Class.define...&quot; etc. expression. The generator did not allow for legal JS identifiers that contained unicode chars.

There might be other cases.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10656</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-06-29 16:20:17 +0200</bug_when>
            <thetext>Thomas, AFAIK this was/is being addressed by you. It might be work in progress, so you might want to give a status update and/or further pointers (blog post?).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10720</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-07-01 19:59:50 +0200</bug_when>
            <thetext>Unicode has been addressed on various axes within the generator (documented by 
several other bugs).

Concerning the JS parsing the most prominent change was probably that the 
IDENTIFIER_CHARS regexp in lang.py now uses  the \w char group together with 
the (?u) modifier. This changes the interpretation of \w such that it extends 
the usual ASCII meaning [a-zA-Z0-9_] with word constituent characters from the 
Unicode database in effect (I can&#39;t remember the exact Unicode group names that 
are considered to contain word constituent characters right now).

The case mentioned in the bug description should be re-tested to see if this 
has a positive effect.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13076</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-10-12 12:27:35 +0200</bug_when>
            <thetext>down prio, as no pressing use case behind it</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14727</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:25:52 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15027</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-27 12:11:35 +0100</bug_when>
            <thetext>The case in the description still fails (scanning a lib with classes with a 
unicode char in the class name).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15029</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-27 12:35:07 +0100</bug_when>
            <thetext>up prio</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15295</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-12-04 10:38:22 +0100</bug_when>
            <thetext>fixed support for unicode in library scanning and cleaned-up Path.py a bit, the 
path comparing functions should work on unicode throughout; I&#39;m not sure about 
the impact of sys.setdefaultencoding(&#39;utf-8&#39;), though; unicode app (e.g. 
created with create-application -n &lt;unicode-string&gt;) now compiles and runs in 
browser, see contrib/Bug/1598</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39021</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:26:11 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>