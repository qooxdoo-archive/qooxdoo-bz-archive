<bug>
          <bug_id>2824</bug_id>
          
          <creation_ts>2009-09-21 17:55:00 +0200</creation_ts>
          <short_desc>Library Scan misses files in linked directories</short_desc>
          <delta_ts>2014-03-03 15:19:53 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.system</component>
          <version>0.8.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>12483</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-09-21 17:55:55 +0200</bug_when>
            <thetext>On systems that support symbolic links (*ix, MacOS, Windows?), you could link 
folders with classes or resources into your app&#39;s source/ path. But since we 
use os.walk to scan folder hierarchies, and os.walk doesn&#39;t follow symlinks by 
default, those classes or resources are missed in the library scan.

Python 2.6: os.walk(..., followlinks=True)

Python 2.4,5: check child directories with os.path.islink() and invoke os.walk 
explicitly on them. (see docs).

Be aware though that there is an inherent risk of cycles in symlinks. The tree 
walker should try to detect this.

It would be beneficial to centralize tree walking like in misc.filetool.walk 
and use this, rather than os.walk directly.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13022</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-10-08 15:27:49 +0200</bug_when>
            <thetext>as enhancement</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18597</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-06-08 18:20:57 +0200</bug_when>
            <thetext>To me.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18598</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-06-08 18:21:18 +0200</bug_when>
            <thetext>Accepted.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19142</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-07-05 17:06:08 +0200</bug_when>
            <thetext>Added a new function &quot;walk&quot; to misc.filetool. This invokes os.walk for symlinks as described by Thomas and keeps track of visited directories to avoid cyclic references.

Also changed generator.code.LibraryPath to use misc.filetool.walk when scanning class and translation paths (r22598).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36671</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:53 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>