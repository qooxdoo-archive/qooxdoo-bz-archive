<bug>
          <bug_id>2439</bug_id>
          
          <creation_ts>2009-05-29 14:17:00 +0200</creation_ts>
          <short_desc>Change Mixin includes to have higher priority</short_desc>
          <delta_ts>2014-03-03 08:47:00 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.oo</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Werner">info</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>fabian.jakobs</cc>
    
    <cc>matthew+qooxdoo</cc>
    
    <cc>mevers47</cc>
    
    <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10230</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-29 14:17:41 +0200</bug_when>
            <thetext>Currently a mixin which is included by a class or theme have lower priority than things which are inherited from the super class/theme. In my opinion this is an issue in the concept of qooxdoo dealing with mixins. It makes no sense that explicitely included things have issues with overriding items from a inherited class/theme.

The suggestion is to allow include to override members which are inherited, but not to override members from the local members section. When overriding members from the local section the developer still manually needs to call qx.Class.patch/qx.Theme.patch as previously. In this case it makes perfectly sense to patch a class in user code as for the author of a class it do not make sense to override member he defines in the own class.

This is related to bug #2419 and #2382. Both issues can be fixed with this alternative &quot;include&quot; implementation as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10240</commentid>
            <who name="Matthew">matthew+qooxdoo</who>
            <bug_when>2009-05-29 19:41:57 +0200</bug_when>
            <thetext>I am the report for bug #2383. I very much like Sebastian&#39;s suggestion and it will meet our needs providing that for extended classes, the mixin is allowed to acces the original function using this.base(arguments);</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10245</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-30 09:38:25 +0200</bug_when>
            <thetext>Matthew, good that you like it. However this do not easy help with the base() requirement you have. The problem here is that the function may still shared between multiple classes as the mixin do. I am not sure however if it would be possible somehow to offer a this.base() modification which allows that. The class where the function is executed is known (using this.constructor). The method name is complex. Also which is exactly the super method of the given method. Theoratically we can loop through the super classes and return the first method which is not identical to the mixin method.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10246</commentid>
            <who name="Matthew">matthew+qooxdoo</who>
            <bug_when>2009-05-30 12:17:58 +0200</bug_when>
            <thetext>I thought that might be the case after I posted. Don&#39;t we already have something to handle this though, I thought for patches that is what this line was for:

member = this.__mixinMemberWrapper(member, proto[key]);</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10247</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-30 12:20:23 +0200</bug_when>
            <thetext>The issue with that is that it may have bad effects on performance. I hoped there will be a more lightweight possibility. So that the super method can be found during class creation and then is easily accessible during runtime.

Maybe it&#39;s possible to just wrap the member when the method is already available on the super class - otherwise it makes no sense at all to call base().</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12121</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-09-10 11:06:37 +0200</bug_when>
            <thetext>Any feedback from the qooxdoo core team here?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12126</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-10 12:31:20 +0200</bug_when>
            <thetext>This is an enhancement to be reviewed for a future major release, moved it to the 0.9 pool for now.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12510</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-22 11:03:49 +0200</bug_when>
            <thetext>Fabian, lets review and discuss this</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13712</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-10-29 17:16:17 +0100</bug_when>
            <thetext>Has this already been modified? Seems to be that the trunk already does this.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14788</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:26:33 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16500</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 16:30:50 +0100</bug_when>
            <thetext>moved to target 1.0.2</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17279</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-03-17 11:31:30 +0100</bug_when>
            <thetext>to Martin</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28848</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-03-16 08:04:04 +0100</bug_when>
            <thetext>*** Bug 6226 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28849</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-03-16 08:04:42 +0100</bug_when>
            <thetext>Check out Bug #6226 from another perspective.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35743</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:00 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>