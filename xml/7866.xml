<bug>
          <bug_id>7866</bug_id>
          
          <creation_ts>2013-11-11 10:48:00 +0100</creation_ts>
          <short_desc>Add support for &quot;deferred&quot; event handling</short_desc>
          <delta_ts>2014-03-03 15:25:39 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>website.modules</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.5</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alexander Steitz">alexander.steitz</reporter>
          <assigned_to name="Alexander Steitz">alexander.steitz</assigned_to>
          <cc>qooxdoo</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>34270</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2013-11-11 10:48:30 +0100</bug_when>
            <thetext>Suppose a developer wants to work with the resize} or mousemove events. 

In these cases it is necessary to *not* handle *every* incoming event. 
Otherwise the handler logic will cause problems which might lead to 
unresponsive script errors.

For these purpose we should offer an API method to be able to only get the 
events deferred - after a given speficied timeout.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34278</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2013-11-11 16:55:50 +0100</bug_when>
            <thetext>Added support with 

d9bca77e974d71407700e7368fb38fd4ecee21d1 (master)

Commit inlcudes API doc samples as well as unit tests.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34279</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2013-11-11 17:40:53 +0100</bug_when>
            <thetext>* this feature should not only be part of a module, but be moved to a more generic util class in the framework (and from there wrapped in a module).

* as it&#39;s meant for resize or mousemove events, you probably rather want a rate-limiting function (search for throttle() ) ?

* probably this function should be called &quot;delay()&quot; or &quot;debounce()&quot; instead? (search for debounce() )</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34280</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2013-11-11 17:53:11 +0100</bug_when>
            <thetext>Right, the better name is &quot;debounce&quot; for this feature and it should go into a 
generic util class.

The &quot;throttle&quot; support is another interesting topic which will be part of a 
separate bug report.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34282</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2013-11-11 17:55:59 +0100</bug_when>
            <thetext>Created bug report to support throttling -&gt; Bug #7869</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34283</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-11-12 08:15:46 +0100</bug_when>
            <thetext>(In reply to comment #2)
&gt; * this feature should not only be part of a module, but be moved to a more
&gt; generic util class in the framework (and from there wrapped in a module).

I like to disagree on that. I don&#39;t want to have every functionality in two separate API&#39;s across the framework. The way it currently is is due to old legacy API we can not remove. Implementing new features in the modules itself is the right way because qxWeb should be the API to use as the base for qx.Desktop andqx.Mobile apps. This means there is no reason to have the function in a separate util class.

&gt; * probably this function should be called &quot;delay()&quot; or &quot;debounce()&quot; instead?
&gt; (search for debounce() )

debounce sounds good to me: http://underscorejs.org/#debounce</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34285</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2013-11-12 13:20:43 +0100</bug_when>
            <thetext>Renamed the &quot;defer&quot; method to &quot;debounce&quot; with

3884eae65fd32f245a300eb7ec770843a3371ec5 (master)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34292</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2013-11-12 15:02:48 +0100</bug_when>
            <thetext>Added &quot;immediate&quot; support to be able to execute the callback immediately and 
then block the rest afterwards.

091a1a06b052f898b565bfe387d8faf8c0196cbf (master)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34380</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2013-11-25 10:30:37 +0100</bug_when>
            <thetext>Found an issue with &quot;immediate&quot; mode</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34381</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2013-11-25 10:32:08 +0100</bug_when>
            <thetext>Fixed issue with &quot;immediate&quot; mode with

418a1df39b359f58b23f6e93f4767dda7d32f168 (master)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38824</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:39 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>