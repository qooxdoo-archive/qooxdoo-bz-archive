<bug>
          <bug_id>2661</bug_id>
          
          <creation_ts>2009-08-07 12:38:00 +0200</creation_ts>
          <short_desc>Reorganize qx.ui.form namespace</short_desc>
          <delta_ts>2011-06-28 15:55:40 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.form</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Andreas Ecker">qooxdoo</assigned_to>
          <cc>info</cc>
    
    <cc>qooxdoo-bugs</cc>
    
    <cc>qooxdoo</cc>
    
    <cc>thron7</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>11221</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-08-07 12:38:39 +0200</bug_when>
            <thetext>As you can see in bug 2099 (http://bugzilla.qooxdoo.org/show_bug.cgi?id=2099) and most of its depended bugs, we have been busy adding more and more classes in the form context.
Most of the new classes act in the context of a whole form, but the old classes in the qx.ui.form namespace are mainly widgets and on another level of implementation. Thats a big reason why we want to reorganize the namespace. 
After long discussions in the core development team, we came up with the following solution:

- qx
 - ui

   - button
     # Button
     # MenuButton
     # SplitButton
     # RepeatButton
     # ToggleButton

   - input
   
      - text
        # AbstractField
        # Area
        # Field
        # Password

      - select
        # IRadioItem
        # AbstracSelectBox
        # SelectBox
        # RadioGroup
        # RadioButton

     # Spinner
     # DateField
     # CheckBox
     # Slider
     # ComboBox


   - list
     # ListItem
     # List


   - form

     - validation
       # AsyncValidator
       # Manager

     - renderer
        # IFormRenderer
        # Single
        # SinglePlaceholder
        # Double

     # Resetter 
     # IFormExecutable
     # IColorForm
     # IBooleanForm
     # INumberForm
     # IForm
     # IStringForm
     # IDateForm
     # IRange
     # MForm
     # Form
     # MFormElement (deprecated)
     # IFormElement (deprecated)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11223</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-08-07 13:37:50 +0200</bug_when>
            <thetext>To my knowledge this was not the latest proposal for a ui.form reorganization (well, being sick from work). Is it really useful to split the typical form elements into 3 categories at 2 different (and deep) hierarchical levels, i.e. input.*, input.text.* and input.select.*?

What about something along the original proposal (here I moved CheckBox and Slider out of input and into select), e.g.:

  - input	 
    # AbstractField	 
    # TextArea	 
    # TextField	 
    # PasswordField	 
    # Spinner	 
    # DateField	 
    # ComboBox	 
	 
  - select	 
    # IRadioItem	 
    # CheckBox	 
    # AbstracSelectBox	 
    # SelectBox	 
    # RadioGroup	 
    # RadioButton	 
    # Slider	 
    # ListItem	 
    # List

Lets talk about the pros/cons that you saw with both structures (and any technical issues) and also incorporate feedback from the community.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11224</commentid>
            <who name="Benoît Collignon">b.collignon</who>
            <bug_when>2009-08-07 13:58:23 +0200</bug_when>
            <thetext>Hello Martin,

Just a suggestion (don&#39;t know if it&#39;s a good idea but I think it&#39;s interresting to share it) why not reorganizing it by task type ?

Because, for instance, list and select are linked in my opinion.

So you could have:

-qx
	-ui
		- activation
			# Button
			# MenuButton
			# SplitButton
			# RepeatButton
			# ToggleButton
		- specification
			- input
				# AbstractField
				# Area
				# Field
				# Password
			- selection
				# IRadioItem
				# AbstracSelectBox
				# SelectBox
				# RadioGroup
				# RadioButton
				# ListItem
				# List
				# CheckBox
				# Slider
			- combined
				# Combobox
				# Datefield
				# Spinner

About the form, I think it&#39;s looks good (even if the few interfaces for widgets may be in the ui section...) but I didn&#39;t look so far ... I should analyze it further.


Good Luck !

Regards,

Benoît.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11232</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-08-07 16:10:07 +0200</bug_when>
            <thetext>(In reply to comment #1)
&gt; To my knowledge this was not the latest proposal for a ui.form reorganization

It was the result of yesterday&#39;s review meeting.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11234</commentid>
            <who name="Jim Hunter">Jim</who>
            <bug_when>2009-08-07 19:29:36 +0200</bug_when>
            <thetext>I don&#39;t like change just for the sake of change. I am to the point where I know what the hierarchy is of the form elements so that I don&#39;t need to look them up every time I need to use one. If you change it all, then everyone will be back at ground 0 and have to learn it all over again just for the sake of ??? If it was a new project and no one had been using it for a long time, then the change isn&#39;t a big deal. But changing it now means it messes everyone up. All existing code bases would need to be changed, everyone would have to learn the new hierarchy. And for what? To possibly simplify things? I don&#39;t think the new breakdown makes any more sense then it does now. So I would vote to leave it alone. Change is only good when it either clears up confusion or solves a problem. In this case I don&#39;t think it meets either condition.

Jim</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11235</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-08-07 22:31:37 +0200</bug_when>
            <thetext>I would prefer as less namespace structure as possible in this case. qx.ui.input.text.Field is something I do not like for example. It was not so wrong to have most form elements in one namespace. It was still easy to find stuff IMHO. Seems a bit like over-structuring - at least with the current set of classes.

But one point I like in the first comment is to move the form manager stuff into qx.ui.form while moving the widget stuff into qx.ui.input and qx.ui.select. So here my suggestions:

qx.ui
- input
  - TextField
  - Spinner
  - DateField
  - ComboBox
  ...
- select
  - List
  - ListItem
  - SelectBox
  - ToggleButton
  - CheckBox
- form
  - validation
    ...
  - renderer
    ...
  - Form
  - IForm

This is somewhat comparable to what Andreas suggests in comment #1. This is also quite easy to understand. Input field related widgets to qx.ui.input.*, Selection related elements to qx.ui.select.*, Form managment to qx.ui.form.*.

Sorry, Benoît, but I don&#39;t think your idea works as this is so far away from typical naming :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11239</commentid>
            <who name="Christian Boulanger">info</who>
            <bug_when>2009-08-10 09:07:25 +0200</bug_when>
            <thetext>Hi, I can see why you would want to do the reorganization - there are good reasons to make the structure clearer. However, I second Jim in that there is no reason to do this right now, for 0.8.3. This looks to me like a 0.8.4 or even 0.9 task since it involves major refactoring of the code of people that use the trunk. </thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12458</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-21 12:27:01 +0200</bug_when>
            <thetext>enhancement, high-prio</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12519</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-22 11:19:14 +0200</bug_when>
            <thetext>to me. Need to re-evaluate pros/cons with Martin et al.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14416</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-11-24 15:49:30 +0100</bug_when>
            <thetext>Should be done immediately after the 1.0 release.
Add the deprecations with version 1.1 and remove the old code with 2.0.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17238</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-03-15 14:50:23 +0100</bug_when>
            <thetext>Is this still a topic we want to do?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>25312</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2011-06-28 15:55:40 +0200</bug_when>
            <thetext>This currently isn&#39;t a goal, thus closed. It might become a topic later (2.0, mobile widgets, etc.) and should be restarted then.</thetext>
          </long_desc>
      
      

    </bug>