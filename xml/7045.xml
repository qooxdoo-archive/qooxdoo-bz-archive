<bug>
          <bug_id>7045</bug_id>
          
          <creation_ts>2012-11-27 11:52:00 +0100</creation_ts>
          <short_desc>Too Many Resources in Build Version</short_desc>
          <delta_ts>2014-03-03 15:26:56 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.1.1</target_milestone>
          
          
          <votes>10</votes>
          <everconfirmed>1</everconfirmed>
          <reporter name="saaj">id</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          <cc>christian.hagendorn</cc>
    
    <cc>qooxdoo</cc>
    
    <cc>thron7</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>31466</commentid>
            <who name="saaj">id</who>
            <bug_when>2012-11-27 11:52:22 +0100</bug_when>
            <thetext>Updating 2.0.1 app to 2.1 (stock Modern theme), I&#39;ve found that generator copies all Tango folder with all icons of all sizes to build/resource folder, ignoring #asset tags.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31476</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-11-28 08:37:05 +0100</bug_when>
            <thetext>Thanks for the report. That came in with the dynamic theme switch due to the general asset we needed there. I will check and get the reduced to the files needed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31525</commentid>
            <who name="saaj">id</who>
            <bug_when>2012-11-29 09:31:37 +0100</bug_when>
            <thetext>You&#39;re welcome. As far as I see, with the old good 0.7&#39;s theme switch feature reintroduced, the same 0.7&#39;s APPLICATION_RESOURCE_FILTER feature is lacking ;-)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31548</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-11-30 07:55:35 +0100</bug_when>
            <thetext>

*** This bug has been marked as a duplicate of bug 7061 ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31550</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-11-30 07:56:09 +0100</bug_when>
            <thetext>

*** This bug has been marked as a duplicate of bug 7056 ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31568</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-11-30 15:18:56 +0100</bug_when>
            <thetext>*** Bug 7056 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31569</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-11-30 15:19:57 +0100</bug_when>
            <thetext>Further potential duplicate: bug#3666</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31570</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-11-30 15:21:27 +0100</bug_when>
            <thetext>To second on this:
The build version of a stock &#39;desktop&#39; skeleton contains more than 1,700 image  
resources. Many of them belong to the icon theme and are unused in the app. 
Maybe there is  a way by re-structuring (default) themes to avoid some of this 
overhead.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31939</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-01-18 14:42:47 +0100</bug_when>
            <thetext>As a first try, we could just remove the #asset(qx/icon/Oxygen/*) e.g. from the icon themes. As I did not find the icontheme macro in the framework anymore, it could work out of the box. A good test would be the widget browser. Still, we should check the macro and see how we can support it while offering a runtime switch of the icon themes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31946</commentid>
            <who name="saaj">id</who>
            <bug_when>2013-01-21 10:52:05 +0100</bug_when>
            <thetext>I can&#39;t comprehend the issue from practical point of view:

  * it was possible to resolve resources correctly in 2.0 for a certain theme,
  * there is limited and beforehand known amount of available themes.

So why can&#39;t we repeat resolving algorithm for each available theme? Furthermore it could make sense limiting available themes in config file. So having one theme in config could be a matter of opt-out from dynamic theme switch.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31997</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-01-28 09:47:53 +0100</bug_when>
            <thetext>(In reply to comment #9)
&gt; I can&#39;t comprehend the issue from practical point of view:
&gt; 
&gt;   * it was possible to resolve resources correctly in 2.0 for a certain theme,
&gt;   * there is limited and beforehand known amount of available themes.
&gt; 
&gt; So why can&#39;t we repeat resolving algorithm for each available theme?
&gt; Furthermore it could make sense limiting available themes in config file. So
&gt; having one theme in config could be a matter of opt-out from dynamic theme
&gt; switch.

One question we have to answer first is, if we need to define the themes we use in the config file or not. Currently, its enough to define the default / start theme. Anything else will be gathered by the dependency analysis. Adding more than one theme to the config will currently result in more than one build of the application. So we need to think about that too. We will see and how we can fix this but it would be desirable to keep it the way that only the main theme is in the config.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32040</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2013-01-29 18:53:44 +0100</bug_when>
            <thetext>Martin was right (see comment #8). The culprits where those asset-hints...

- #asset(qx/icon/Oxygen/*) in qx/theme/icon/Oxygen.js
- #asset(qx/icon/Tango/*) in qx/theme/icon/Tango.js

... which cause the Generator to copy all icon imgs into the build and register them within the ResourceManager.

The widgetbrowser as case study:

Without those asset-hints the Generator doesn&#39;t collect mindlessly all images of an icon theme. However just removing those asset-hints fails, because some widgetbrowser application code uses asset-lets to be icontheme-independent (e.g. &#39;#asset(qx/icon/${qx.icontheme}/16/...&#39;). Those were expanded to the default before (which is &#39;Tango&#39; - see base.json &gt; QXICONTHEME), which was no problem at all, cause all images were already available (physically &amp; registered) either way. So we now have to explicitly state all icon themes in the config.js via &#39;&quot;QXICONTHEME&quot; : [&quot;Tango&quot;, &quot;Oxygen&quot;]&#39; to ensure that also Oxygen is available. This is also covered by docs already (http://manual.qooxdoo.org/current/pages/desktop/ui_resources.html#using-qooxdoo-icons-with-widgets).

By absolute numbers:

widgetbrowser (distclean first before each!)
    a) with #asset(qx/icon/(Oxygen|Tango)/*)
        122 directories, 2704 files  1352xOxygen / 1352xTango
    b) without #asset(qx/icon/(Oxygen|Tango)/*)
        23 directories, 150 files    8xOxygen    / 142xTango
            =&gt; some 404 reqs because #asset(qx/icon/${qx.icontheme}/16/actions/*) is only expanded to Tango and not to Oxygen
    c) without #asset(qx/icon/(Oxygen|Tango)/*)
       and QXICONTHEME = [&quot;Oxygen&quot;, &quot;Tango&quot;] in config.json
        30 directories, 276 files    134xOxygen  / 142xTango

skeleton app (distclean first before each!)
    with #asset(qx/icon/(Oxygen|Tango)/*)
        61 directories, 1352 files   1352xTango
    without #asset(qx/icon/(Oxygen|Tango)/*)
        12 directories, 15 files     15xTango
        (all 15 explicitly from qx/theme/modern/Appearance.js)

---

This fixes the issue as far as icons are concerned.

Inside the build directory are still many probably unneeded decoration files.
I&#39;m ignoring them for now, cause it&#39;s not clear how our Theming will evolve,
so it would be a waste of effort.

Marginal note:
asset-lets are still used in the application code of these qooxdoo applications (but not in framework code):
demobrowser, widgetbrowser, playground, showcase

master: 20400dd
branch: 351762b</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32042</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-01-30 09:38:08 +0100</bug_when>
            <thetext>(In reply to comment #11)
&gt; widgetbrowser (distclean first before each!)
&gt;     a) with #asset(qx/icon/(Oxygen|Tango)/*)
&gt;         122 directories, 2704 files  1352xOxygen / 1352xTango
&gt;     b) without #asset(qx/icon/(Oxygen|Tango)/*)
&gt;         23 directories, 150 files    8xOxygen    / 142xTango
&gt;             =&gt; some 404 reqs because 
#asset(qx/icon/${qx.icontheme}/16/actions/*) is only expanded to Tango and not 
to Oxygen
&gt;     c) without #asset(qx/icon/(Oxygen|Tango)/*)
&gt;        and QXICONTHEME = [&quot;Oxygen&quot;, &quot;Tango&quot;] in config.json
&gt;         30 directories, 276 files    134xOxygen  / 142xTango
&gt; 
&gt; skeleton app (distclean first before each!)
&gt;     with #asset(qx/icon/(Oxygen|Tango)/*)
&gt;         61 directories, 1352 files   1352xTango
&gt;     without #asset(qx/icon/(Oxygen|Tango)/*)
&gt;         12 directories, 15 files     15xTango
&gt;         (all 15 explicitly from qx/theme/modern/Appearance.js)

Though I can attest that icon consumption has dropped, I cannot quite confirm 
the figures here (all on current master):

- In my environment the Widgetbrowser now draws in 306 icons (rather than 276), 
147 Oxygen and 159 Tango.

- A stock &#39;desktop&#39; skeleton now uses 27 icons (rather than 15), all Tango. 

I also have slightly higher figures for the situation before the fix, but 
anyway, the fix brought savings in the 90% range!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32046</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2013-01-30 12:57:02 +0100</bug_when>
            <thetext>&gt; - A stock &#39;desktop&#39; skeleton now uses 27 icons (rather than 15), all Tango. 

This is probably just an algorithm mismatch:

Mine: 
$ tree build/resource/qx/icon 
=&gt; 12 dirs &amp; 15 files

Yours (probably):
$ find build/resource/qx/icon | wc -l 
=&gt; 15 files + 12 dirs =&gt; 27

which should be:
$ find build/resource/qx/icon -type f | wc -l 
=&gt; 15 files</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32062</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-01-31 15:43:50 +0100</bug_when>
            <thetext>(In reply to comment #13)
&gt; This is probably just an algorithm mismatch:
&gt; 
&gt; which should be:
&gt; $ find build/resource/qx/icon -type f | wc -l 
&gt; =&gt; 15 files

You&#39;re right!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39287</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:26:56 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>