<bug>
          <bug_id>1895</bug_id>
          
          <creation_ts>2009-02-03 10:05:00 +0100</creation_ts>
          <short_desc>Clean-up tool script folder</short_desc>
          <delta_ts>2014-03-03 15:25:07 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Ecker">qooxdoo</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>7554</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-02-03 10:05:43 +0100</bug_when>
            <thetext>There are many scripts under tool/bin/, currently:

checklocales.py
compile.py
create-application.py
doc__init__.py
ecmalint.py
find-legacy.sh
generator.py
h-to-vbox.sh
iconpackager.py
migrator.py
pythondoc.py
qxenviron.py
svninfo.py

It would be preferable to keep the typical end-user scripts in this folder, while moving development tools and site admin tools to other places. For that purpose, one needs to determine the typical end-user framework tooling (scripts + options = API) that is prominently to be featured.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7562</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-03 14:27:16 +0100</bug_when>
            <thetext>I would suggest an &quot;sbin&quot; folder like in classic unix system which are mainly used for administration proposes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7563</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-03 14:58:16 +0100</bug_when>
            <thetext>(In reply to comment #1)

We have already a tool/admin folder, which is predestined for these kinds of 
files. I think within that, admin/bin is fine. Remember, we are looking for a 
single path we can exclude from releases (which will be tool/admin).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7564</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-03 15:01:36 +0100</bug_when>
            <thetext>Ah OK fine, wasn&#39;t aware of the existance of that folder.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7565</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-02-03 15:16:29 +0100</bug_when>
            <thetext>I&#39;ve created tool/admin/bin and moved Makefile.release to admin/.

I&#39;ve also moved some of the script files, where it appeared obvious that they 
are not end user relevant. Concerning all of the tool/bin files here are some 
descriptions:

checklocales.py   -- checks local things; by FJ; unclear whether this might be 
a user tool
compile.py          -- Sebastian&#39;s single-file frontend
create-application.py  -- application wizzard [stay]
doc__init__.py      -- create __init__.js files in source/class/* trees; 
usefull for end user IMO, for &#39;generate.py api&#39; targets [stay?]
ecmalint.py          -- ecmalint frontend [stay; might be resolved into 
generator]
find-legacy.sh      -- looks for the use of legacy classes in framework [moved]
generator.py        -- tool chain frontend [stay]
h-to-vbox.sh       -- code converter for classes in framework [moved]
iconpackager.py  -- does something with framework icons; by SW; looks like an 
admin tool [move?]
migrator.py         -- migration script [stay; will be resolved into generator]
pythondoc.py      -- extract JavaDoc-like comments from .py files [moved]
qxenviron.py       -- tool chain component [stay]
svninfo.py           -- SVN query tool [moved]</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>7567</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-02-03 15:21:04 +0100</bug_when>
            <thetext>I would move these as well:

doc__init__.py (would be great if a ./generate.py api do this automatically without user interaction IMHO)
iconpackager.py</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15003</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-27 10:33:56 +0100</bug_when>
            <thetext>I&#39;m closing this bug, as the basic clean-up has been done. Any more concrete 
issues should be opened in their own bug.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38633</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:07 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>