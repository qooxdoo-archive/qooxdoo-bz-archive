<bug>
          <bug_id>9182</bug_id>
          
          <creation_ts>2015-07-06 12:54:00 +0200</creation_ts>
          <short_desc>extend hasListener method by looking at listener</short_desc>
          <delta_ts>2015-07-07 16:12:19 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.event</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Patrick Fischer">admin</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>43445</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2015-07-06 12:54:42 +0200</bug_when>
            <thetext>To check the existence of previously added listener you can use the defined hasListener method. But sometimes it could be useful to check to check for a certain type of listener.

Following the removing syntax it could loke something like hasListener(Object target, String type, Function listener, Object self?, Boolean capture?).

my use case:
Some properties have apply methods, which should be called after creating the main structure. So all apply methods have listeners for calling the apply method again after the event is fired. To ensure no addlistenerOnce method will be erroneously defined twice, I check for existence of the listener before.

for example:
_applyMethod1 : function()
{
if( this.__contentCreated )
{
// do some stuff
} else {
if( !this.hasListener(&quot;contentCreated&quot;) )
this.addListenerOnce(&quot;contentCreated&quot;, this._applyMethod1, this);
}
},

_applyMethod2 : function()
{
if( this.__contentCreated )
{
// do some stuff
} else {
if( !this.hasListener(&quot;contentCreated&quot;) )
this.addListenerOnce(&quot;contentCreated&quot;, this._applyMethod2, this);
}
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43453</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2015-07-07 08:02:22 +0200</bug_when>
            <thetext>Sounds reasonable. How about a pull request?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43455</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2015-07-07 16:12:19 +0200</bug_when>
            <thetext>Yes, but it seems to me very complex because all existing hasListener calls in the complete source code need to be checked.

While a short look at the source code I found some code which should not work because of the snytax:
if (this.hasListener(&quot;roll&quot;, this._onMoveRoll, this)) {
this.removeListener(&quot;roll&quot;, this._onMoveRoll, this);
}

https://github.com/qooxdoo/qooxdoo/blob/release_5_0/framework/source/class/qx/ui/core/MMovable.js#L288</thetext>
          </long_desc>
      
      

    </bug>