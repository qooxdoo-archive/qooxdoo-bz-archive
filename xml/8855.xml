<bug>
          <bug_id>8855</bug_id>
          
          <creation_ts>2015-01-07 14:07:00 +0100</creation_ts>
          <short_desc>Grunt should not abort if a namespace is undefined</short_desc>
          <delta_ts>2015-01-12 16:49:34 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>next</product>
          <component>tool</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Wagner">daniel.wagner</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>42091</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2015-01-07 14:07:55 +0100</bug_when>
            <thetext>If a qx.next app uses a namespace provided by third-party code (i.e. not defined as a qx.next library), Grunt tasks like source will log a warning (&quot;Warning: ENOENT - Unknown global symbol.[...]&quot;) and then abort.
This was a valid approach in qooxdoo where we expected most if not all code to be defined as a qx library. In next, however, we should &#39;play nice&#39; with third-party libraries and simply log a warning (which can be suppressed using an @ignore hint) but continue running the task.

As discussed with Richard, one possible approach would be to use specialized exceptions (extending Error) in our task modules (depAnalyzer in this case) that allow calling code to decide whether or not the exception is fatal.</thetext>
          </long_desc>
      
      

    </bug>