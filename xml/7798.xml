<bug>
          <bug_id>7798</bug_id>
          
          <creation_ts>2013-10-17 09:59:00 +0200</creation_ts>
          <short_desc>Rename &#39;DependencyLoader&#39; to &#39;ClassList&#39;?</short_desc>
          <delta_ts>2014-03-03 09:57:08 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>3.0.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          <keywords>Refactoring</keywords>
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>34094</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-10-17 09:59:12 +0200</bug_when>
            <thetext>tool/pylib/generator/code/DependencyLoader.py might be better named 
&#39;ClassList.py&#39;, because that&#39;s what most of its functionality is about, 
creating and (dependency-) sorting a list of classes. The Library class could 
also use the ClassList to represent classes found on the file system. There 
might be some additional functionality in the module that doesn&#39;t quite fit the 
ClassList pattern, and might need to be relocated elsewhere.

DependencyLoader is one of those old &quot;do-er&quot; classes which we had a lot in the 
tool chain, which don&#39;t represent an actual object of the problem domain, but 
are rather collections of (more or less) static methods, aka libraries. While 
there is no need to avoid libraries altogether I always tried to use proper 
classes where possible (especially on the &quot;specific helpers&quot; layer), and 
otherwise have proper modules instead of fake static classes.

There is already an unused class of that name in the above path, intended as a 
start for the refactoring process.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36213</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 09:57:08 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year or we don&#39;t think it will be fixed in the near future.</thetext>
          </long_desc>
      
      

    </bug>