<bug>
          <bug_id>4116</bug_id>
          
          <creation_ts>2010-09-27 16:50:00 +0200</creation_ts>
          <short_desc>Decrese size and increase speed</short_desc>
          <delta_ts>2014-02-17 18:53:17 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stefan Andersson">dev</reporter>
          <assigned_to name="Stefan Andersson">dev</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>20359</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2010-09-27 16:50:47 +0200</bug_when>
            <thetext>Procedure:

1. copy the whole framework to a new location
2. write two applications; smallest and small
3. then manually remove the unused auxiliary functions (3))
4. small changes to the generator
5. then build it with the generator

We have manually removed unnecessary functions to see how much space we could save for:

1. the smallest application (1 000 lines of code)
2. a small application (10 000 lines of code)

By analyzing the calling structure we found out mainly three different calls from function to function:

1. necessary calls such as constructor and destructor calls
2. core function calls
3. auxiliary function calls

1) is about 6% of the code mass
2) is about 40% of the code mass
3) is about 54% of the code mass

The main part and the easiest part to remove is 3).

By removing non-used functions in the final application, we found that 

1. the smallest application saves about 45% of the code
2. the small application saves about 35% of the code

when we mainly focused on 3) removing.

Conclusion: We have shown that we easily can remove 3) of unused functions by simply adding a new documentation tag; @call. This tag is not necessary to use in 1), but can be used in 2) and should be used in 3). By using this tag the generator can build a function call dependency tree and dramatically reduce code size by removing unused functions. This tag can also be used for properties. As can be understood the speed of the applications of the test bench  also has improved significantly.

Further work: We will now build a TEST plugin module for the generator and see if it works in real situations.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20375</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-09-29 08:30:07 +0200</bug_when>
            <thetext>Stefan, I assign the bug to you to build a proof of concept, as you have written.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35109</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2014-02-17 18:53:17 +0100</bug_when>
            <thetext>Closed outdated issue as wontfix, as bug became stale without feedback from assignee.</thetext>
          </long_desc>
      
      

    </bug>