<bug>
          <bug_id>3668</bug_id>
          
          <creation_ts>2010-05-03 09:31:00 +0200</creation_ts>
          <short_desc>Introduce modelPath for the list controller</short_desc>
          <delta_ts>2010-10-04 09:38:45 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.databinding</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>gradinf</cc>
    
    <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>18123</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-05-03 09:31:45 +0200</bug_when>
            <thetext>Some users had problems with the stored model. The would prefer to store a deputy e.g. an id as model. We should introduce a modelPath for the controllers to make that possible.

Here are some more details from the mailing list:
http://qooxdoo.678.n2.nabble.com/SelectBox-and-DataBinding-round-25-td4979944.html;cid=1272870877457-780#a4979944</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19324</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-15 09:15:17 +0200</bug_when>
            <thetext>Another discussion about such a topic:
http://qooxdoo.678.n2.nabble.com/Form-Binding-with-List-Binding-td5121281.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19396</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-21 08:43:52 +0200</bug_when>
            <thetext>Another discussion on the ML which brought up another use case. Binding a selection enabled widget in a form context:

http://qooxdoo.678.n2.nabble.com/Databinding-problem-Creating-form-model-stopped-working-td5314091.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19969</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-08-24 17:06:30 +0200</bug_when>
            <thetext>This is only really cessary for the list controller because this controller is often used in a form context.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19972</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-08-24 18:00:38 +0200</bug_when>
            <thetext>I just had a good idea how to solve that. Instead of setting it every time it change in the controller, I added it to the default bindings, but without any extra properties like path or options. The default way is to bind the given model at the index to the model property. If you want to change that, you can specify your own binding in the &quot;bindItem&quot; method which can be added via delegate. That way, we are backwards compatible and have the chance to change it without too much overhead.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19976</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-08-25 10:42:30 +0200</bug_when>
            <thetext>As proposed yesterday, I moved the model handling also to data binding. Which caused some changes in the selection handling of the controller. I had to move some more parts of the selection handling from synchronous calls to asynchronous calls.

trunk: r23147</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19983</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-08-25 16:12:35 +0200</bug_when>
            <thetext>Martin, will it work for multi selection widgets too? e.g. Selecting &quot;A&quot; and &quot;F&quot; (in a list with &quot;multi&quot; selection mode) in your example, will I get [&quot;male&quot;, &quot;Alien&quot;] as model?

And I don&#39;t get it why &quot;it&#39;s only necessary for the list controller&quot;. 
The tree can be used as a form element now and the same limitation that devs faced with lists will be present in trees.
A consistent way of solving the same problem among controllers would be nice.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19984</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-08-26 08:07:39 +0200</bug_when>
            <thetext>(In reply to comment #6)
&gt; Martin, will it work for multi selection widgets too? e.g. Selecting &quot;A&quot; and
&gt; &quot;F&quot; (in a list with &quot;multi&quot; selection mode) in your example, will I get
&gt; [&quot;male&quot;, &quot;Alien&quot;] as model?
The form is currently not capable of multi selection at all, which is listed in a separate bug. http://bugzilla.qooxdoo.org/show_bug.cgi?id=3830
So no, this solution is not really available for multi selection due to the restrictions in the from itself.

&gt; And I don&#39;t get it why &quot;it&#39;s only necessary for the list controller&quot;. 
&gt; The tree can be used as a form element now and the same limitation that devs
&gt; faced with lists will be present in trees.
&gt; A consistent way of solving the same problem among controllers would be nice.
Sure but using the tree is still, in my opinion, not a common use case. So I think its not that important to get it done at all. If you think different, maybe a second bug report could be openend.
But the implementation of the tree relies on the current set model, so its a lot of work to change that, which means I&#39;m sure I don&#39;t have time to change that in the near future.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19998</commentid>
            <who name="Guilherme Krycek">gradinf</who>
            <bug_when>2010-08-26 14:00:57 +0200</bug_when>
            <thetext>(In reply to comment #7)
&gt; So no, this solution is not really available for multi selection due to the
&gt; restrictions in the from itself.

That&#39;s not true. If I use the list controller without the form I&#39;ll not be able to use multi selection yet (to get an array of ids using &quot;bindItem&quot;). The list controller can be reflecting a limitation of the form itself, but the limitation is in the list controller too.

Anyway, won&#39;t you have to change back to the &quot;setting method&quot; (instead of the binding one) to get it working with multi selections?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20006</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-08-27 08:34:27 +0200</bug_when>
            <thetext>(In reply to comment #8)
&gt; (In reply to comment #7)
&gt; &gt; So no, this solution is not really available for multi selection due to the
&gt; &gt; restrictions in the from itself.
&gt; 
&gt; That&#39;s not true. If I use the list controller without the form I&#39;ll not be able
&gt; to use multi selection yet (to get an array of ids using &quot;bindItem&quot;). The list
&gt; controller can be reflecting a limitation of the form itself, but the
&gt; limitation is in the list controller too.

The list controller holds its selection in its selection array which is capable of multi selection. The problem comes in when the from controller joins the show.

&gt; Anyway, won&#39;t you have to change back to the &quot;setting method&quot; (instead of the
&gt; binding one) to get it working with multi selections?
No, not really. I think those two things are independent.</thetext>
          </long_desc>
      
      

    </bug>