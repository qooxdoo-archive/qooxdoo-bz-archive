<bug>
          <bug_id>4237</bug_id>
          
          <creation_ts>2010-10-26 07:48:00 +0200</creation_ts>
          <short_desc>Table performance issue on a resize event</short_desc>
          <delta_ts>2012-05-16 09:44:37 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.table</component>
          <version>1.2</version>
          <rep_platform>Firefox 3.5</rep_platform>
          <op_sys>Windows</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter>robert.nimax</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>Firefox</cf_browser>
          <cf_browser_version>3.5</cf_browser_version>

      

      

      

          <long_desc isprivate="0">
            <commentid>20868</commentid>
            <who name="">robert.nimax</who>
            <bug_when>2010-10-26 07:48:47 +0200</bug_when>
            <thetext>There is an issue regarding the performance of a table on a resize event. 
If you define a table having lots of columns you even will be able &quot;to see&quot; a delay action of the browser, so you don´t have to profile the application.
Here is a snippet to reproduce the issue. You can modify the variable &quot;noOfCols&quot; to clarify the behavior. 
To force a resize event just resize your main browser window/tab. 
----------------------------
var tableModel  = new qx.ui.table.model.Simple();
var noOfCols    = 200;
var noOfRows    = 50;
var columns     = [];
var iColIdx     = 0;
      
for (iColIdx = 0; iColIdx &lt; noOfCols; iColIdx++) {
  columns.push(&quot;Column Id &quot; + iColIdx);
}
      
tableModel.setColumns(columns);
var rowData = [];
var currRow = null;
for (var iRowIdx = 0; iRowIdx &lt; noOfRows; iRowIdx++) {
  currRow = [iRowIdx];
  for (var iColIdx = 1; iColIdx &lt; noOfCols; iColIdx++) {
    currRow.push(Math.random() * 10000);
  }         
  rowData.push(currRow);
}
tableModel.setData(rowData);
var table = new qx.ui.table.Table(tableModel);
  
this.getRoot().add(table, {left: 200, top: 200, right: 200, bottom: 200});
table.setMetaColumnCounts([1, -1]);
----------------------------
Actually I do not really know, what the problem is, because I observed the delay after a resize only with FF 3.5.x and IE 8. With Safari/Chrome the performance is great. So maybe it´s just because of their faster js- or rendering-engines ? Firebug tells me that qx.event.handler.Appear.refresh() takes about 1200 ms.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20888</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-10-27 07:56:45 +0200</bug_when>
            <thetext>Your example uses 200 columns? That&#39;s a large number, since AFAIK the table is virtual in the vertical direction only. But anyway, we should check if there&#39;s room for improvement, also for smaller number of columns.

To Martin.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>20889</commentid>
            <who name="">robert.nimax</who>
            <bug_when>2010-10-27 08:10:31 +0200</bug_when>
            <thetext>Unfortunately this example is due to a &quot;real life example&quot;. There is really a table having 200 columns (but this is the maximum) because it shows a timeline column-wise that is defined by the user. I do not think that any user will be able to work with 200 columns. Probably 50 columns are more down-to-earth, because the table ist very interactive. It´s hard to belive, what users are testing and clicking regardless if it makes sense. :-)
Thanks a lot for your help, guys !</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21033</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-11-03 11:45:21 +0100</bug_when>
            <thetext>Yes, the table is only virtual in the vertical direction. So having a huge number of columns is a killer for performance. As Andreas said, we should take a look what we can improve here but dont expect huge leaps forward here.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21642</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-11-30 15:15:13 +0100</bug_when>
            <thetext>Hey,
I took a look at the code and can&#39;t see much space for improvement here. The fact that the table is not virtual in the horizontal direction is the bad boy here! The resize of the scroller triggers a redraw of the pane which redraws the cells. That means in the worst case creating 8000 new DOM elements which is, of course, not really fast. I&#39;m surprised that its working that well in chrome for example.
The only thing I can tell you to cheer you up is that we are aware of that and have already some test code for a new table: http://demo.qooxdoo.org/current/demobrowser/#virtual~Table.html
We have a &quot;new&quot; virtual table on our roadmap but unfortunately can&#39;t tell you when it will be ready.
Sorry,
Martin</thetext>
          </long_desc>
      
      

    </bug>