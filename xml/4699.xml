<bug>
          <bug_id>4699</bug_id>
          
          <creation_ts>2011-02-23 09:15:00 +0100</creation_ts>
          <short_desc>Speed up model creation</short_desc>
          <delta_ts>2011-06-06 09:55:26 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.databinding</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.5</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>gradinf</cc>
    
    <cc>tobi</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>22913</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-02-23 09:15:07 +0100</bug_when>
            <thetext>The marshaling currently takes some time which is especially bad for the virtual widgets which usually have huge models. Take a look at the initial mailing list thread for some details:
http://qooxdoo.678.n2.nabble.com/virtual-tree-and-lots-of-data-td6040890.html

Here are some performance tests I used for testing:

var amount = 100000;

var start = new Date();
qx.Class.define(&quot;Model&quot;, {
  extend : qx.core.Object,
  properties : {
    name : {
      event : &quot;changeName&quot;
    }
  }
});

for (var i = 0; i &lt; amount; i++) {
  new Model().set({name: i});
}
console.log(&quot;qx.core.Object time:&quot;, ((new Date())-start));

var m = new qx.data.marshal.Json();
var data = [];
for (var i = 0; i &lt; amount; i++) {
  data.push({name: i});
}

start = new Date();
m.toClass(data);
var mid = new Date();
console.log(&quot;Marshaling time (Class create):&quot;, (mid-start));
m.toModel(data);
var end = new Date();
console.log(&quot;Marshaling time (model create):&quot;, (end - mid));
console.log(&quot;Marshaling time (total):&quot;, (end - start));</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22914</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-02-23 09:15:52 +0100</bug_when>
            <thetext>Sounds like a good idea to add those tests to our performance tests as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24338</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-05-05 16:34:50 +0200</bug_when>
            <thetext>I checked the marshaler&#39;s two main methods (toClass and toModel) and checked how to speed up the execution. Ended up with some micro optimizations which speeds up the whole thing about 10% in my use cases. Thats all I could get. :(

Also added some performance tests to the framework for further usage.

trunk: r27049, r27051</thetext>
          </long_desc>
      
      

    </bug>