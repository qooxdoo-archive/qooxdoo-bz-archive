<bug>
          <bug_id>1966</bug_id>
          
          <creation_ts>2009-02-18 17:10:00 +0100</creation_ts>
          <short_desc>Don&#39;t perform variable optimization if eval is in scope</short_desc>
          <delta_ts>2014-03-03 15:19:41 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>3.0</target_milestone>
          
          <blocked>6869</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Fabian Jakobs">fabian.jakobs</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          <cc>daniel.wagner</cc>
    
    <cc>info</cc>
    
    <cc>mustafa.sak</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>7925</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-02-18 17:10:14 +0100</bug_when>
            <thetext>There are three cases, which break the variable optimizer:

1. eval
2. new Function()
3. with statement

The variable optimizer should not rename variables, which can be reached by these three statements.

Example:

function(a) {
	var x = eval(&quot;...&quot;);  &lt;- don&#39;t optimize a and x
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12987</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-10-08 13:48:41 +0200</bug_when>
            <thetext>Increased relevance, targeted, as it might affect typical user code. Thomas, what&#39;s an estimate for taking care of those cases?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14054</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-11 16:58:40 +0100</bug_when>
            <thetext>focus</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14068</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-11-12 10:59:58 +0100</bug_when>
            <thetext>Same is an issue for private optimization, right. And in this case it is class-wide.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14850</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:34:18 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1 (for issues with status &quot;ASSIGNED&quot;). Please review and correct the target accordingly.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14944</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-25 22:28:38 +0100</bug_when>
            <thetext>moving remaining issues for 1.0-beta1 to the 1.0 target</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15001</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-27 10:21:36 +0100</bug_when>
            <thetext>un-focus</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15698</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-12-11 11:31:19 +0100</bug_when>
            <thetext>mass move to 1.0.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16446</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 16:30:18 +0100</bug_when>
            <thetext>moved to target 1.0.2</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18752</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-06-17 16:20:17 +0200</bug_when>
            <thetext>-&gt; unspec</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21370</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-11-17 15:24:10 +0100</bug_when>
            <thetext>-&gt; undefined</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32075</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-02-01 09:46:10 +0100</bug_when>
            <thetext>the issue gets apparent in current master when running the framework tests:

qx.test.bom.request.Xhr:test: open request
ReferenceError: func is not defined

this relates to qx.dev.unit.Sinon:1237, where &#39;func&#39; is used by eval()</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32295</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-02-19 18:59:30 +0100</bug_when>
            <thetext>I was scratching my head a bit about the issue with &#39;with()&#39;. The problem here 
is &#39;member-capture&#39; of the context object in the with() clause. Consider this:

  var fffff = 3;
  var o = {fffff:7, ab:true};

  with (o) {
      fffff = 4;
  }

You would be inclined to var-optimize &#39;fffff&#39;, but there are two issues here:

(a) The source name might be an object member: 
You might mis-identify the &#39;fffff&#39; in the with-clause as an occurrence of the 
local var. But this might not be true, the context object &#39;o&#39; might have an 
&#39;fffff&#39; member, and this might only be apparent at runtime.

(b) The target name might be an object member:
You cannot pre-check the replacement name. If by chance &#39;fffff&#39; would be 
replaced with &#39;ab&#39;, you had another member-capture with &#39;o&#39;, which again might 
only show at runtime.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32296</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-02-19 19:01:35 +0100</bug_when>
            <thetext>(For completeness: The issue with &#39;eval&#39; and &#39;new Function&#39; is that they both 
use strings which might contain scoped variable names. But they would never be 
adapted if the real variables were renamed).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32300</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-02-20 12:46:30 +0100</bug_when>
            <thetext>Re-implemented variableoptimizer with the new scopes (bug#7174), and based a 
visitor class on these scopes that tag the scope objects of the entire scope 
chain if an offending construct is found (eval(), with(), new Function()). 
These scopes are then skipped in the subsequent variable optimization process.

&quot;qx.test.bom.request.Xhr:test: open request&quot; looks good now.

master: a3741ad</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32301</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-02-20 12:48:03 +0100</bug_when>
            <thetext>(In reply to comment #14)
&gt; Re-implemented variableoptimizer with the new scopes (bug#7174),

should be: bug#7141</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36590</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:41 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>