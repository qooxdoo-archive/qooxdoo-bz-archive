<bug>
          <bug_id>8297</bug_id>
          
          <creation_ts>2014-04-29 17:58:00 +0200</creation_ts>
          <short_desc>Migrate to another cldr package which uses the JSON data from the cldr project</short_desc>
          <delta_ts>2014-05-09 17:19:21 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.grunt</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>4.0</target_milestone>
          
          <blocked>8254</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Richard Sternagel">richard.sternagel</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>40100</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-04-29 17:58:24 +0200</bug_when>
            <thetext>The &quot;cldr&quot; node package we currently use [1] has a dependency to the libxmljs package which in turn needs libxml (a C library). libxml has to be compiled by node-gyp which adds more dependencies (Python, make and gcc on Unix). 

Along with getting rid of this dependency we could also abandon using the XML files from the CLDR project [2] and use their JSON files instead. Maybe there is another cldr package which wraps the data.

[1] https://github.com/papandreou/node-cldr
[2] http://cldr.unicode.org/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40179</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2014-05-09 17:08:48 +0200</bug_when>
            <thetext>Found a better package (cldr.js [1]), which uses the JSON data from the CLDR project. It doesn&#39;t bring the JSON data with itself (by design), so I added it to the SDK.

More info on the added JSON data (copied from the readme.txt):
---
Version: 25

Official CLDR page:
http://cldr.unicode.org/

CLDR (http://cldr.unicode.org) provides locale content for I18n software.
The data is provided in two formats: LDML (XML format) and JSON.
We are using the JSON data via the node package &#39;cldr.js&#39;.

Official JSON spec:
http://cldr.unicode.org/index/cldr-spec/json

Official JSON data:
http://unicode.org/Public/cldr/25/
 * json.zip         19-Mar-2014 15:59  3.1M
 * json_full.zip    19-Mar-2014 16:17   48M

Note: We currently use &#39;json.zip&#39; instead of &#39;json_full.zip&#39; which
just provides more languages (but would also add more bloat to the SDK).

If you need locale content for a language not shipped with the SDK
just download the &#39;json_full.zip&#39; and unzip it in the cldr dir next to
this file. Now you should be able to use the locale content of
all other languages provided by the CLDR.
---

[1] https://github.com/rxaviers/cldrjs

master: ccb1dc7a7ae4ea8dbd6138c5ce96de2eb28f1f73</thetext>
          </long_desc>
      
      

    </bug>