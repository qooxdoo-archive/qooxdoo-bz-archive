<bug>
          <bug_id>3181</bug_id>
          
          <creation_ts>2009-12-04 15:12:00 +0100</creation_ts>
          <short_desc>APIViewer can&#39;t resolve links to members</short_desc>
          <delta_ts>2014-03-03 15:26:18 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>app.apiviewer.desktop</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>1.4.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Wagner">daniel.wagner</reporter>
          <assigned_to name="Gabriel Munteanu">jajalinux</assigned_to>
          <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>15311</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-12-04 15:12:38 +0100</bug_when>
            <thetext>The API docs contain several links to inherited members, e.g. the doc for qx.ui.form.List.findItem links to qx.ui.form.ListItem.getLabel, which is inherited from qx.ui.basic.Atom. Clicking the link pops up an &quot;Unknown item of class&quot; alert box. To the user, it shouldn&#39;t matter if a method is local or inherited. If it can&#39;t find an item in the linked class, the APIViewer should go up the inheritance hierarchy and look there, opening the class doc with &quot;show inherited&quot; active if it find the item.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18840</commentid>
            <who name="Jonathan WeiÃŸ">qooxdoo-bugs</who>
            <bug_when>2010-06-21 14:46:49 +0200</bug_when>
            <thetext>-&gt; Daniel</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19558</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-07-30 19:24:37 +0200</bug_when>
            <thetext>*** Bug 3911 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19559</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-07-30 19:32:11 +0200</bug_when>
            <thetext>I consider this a defect. To a user, the alert box says &quot;there&#39;s something wrong here&quot;. The APIViewer supports inheritance in general, so there&#39;s no reason why links to inherited methods shouldn&#39;t work.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21279</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-11-15 10:34:28 +0100</bug_when>
            <thetext>Gabriel, if you have any question, feel free to contact daniel. He is the man in charge in all API viewer cases.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21347</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2010-11-16 15:21:46 +0100</bug_when>
            <thetext>i cannot reproduce this bug.
i clicked the link to qx.ui.form.ListItem.getLabel, also other links in inherited methods and there is no prolem. all of them work.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21349</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2010-11-16 15:23:05 +0100</bug_when>
            <thetext>sorry, i forgot to choose the WORKSFORME in the second dropdown.
the comment is the previous one.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21354</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-11-16 16:34:58 +0100</bug_when>
            <thetext>When I reported the bug, the link in the doc comment for qx.ui.form.List#findItem was {@link #getLabel}. That kind of &quot;relative&quot; link to an inherited member still doesn&#39;t work. Apparently, Johnny changed it to {@link qx.ui.basic.Atom#getLabel} at some point to get rid of the error message.

Sorry, I should have been more specific in the original report.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21356</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2010-11-17 10:58:28 +0100</bug_when>
            <thetext>Hi Daniel,
i still cannot find any link that doesn&#39;t work.
i looked into the code here:
apiviewer.ui.panels.InfoPanel
method: createItemLinkHtml
and it seems it does look for parent classes and builds an appropriate link.
if you know of any link that doesn&#39;t work now, it would be very helpful, so i can pinpoint where the problem relies.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21358</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-11-17 11:29:05 +0100</bug_when>
            <thetext>It looks like all these links were changed to point directly at the parent class as a workaround for this issue. You can reproduce it by changing the link in qx.ui.form.List#findItem back to {@link #getLabel}.

Unfortunately, this means that once this bug is fixed, we&#39;ll have to go over all the commits related to #3192 and undo the workarounds :(</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21359</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-11-17 11:31:46 +0100</bug_when>
            <thetext>Correction: The original link was {@link qx.ui.form.ListItem#getLabel}. Sorry &#39;bout that.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21541</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2010-11-24 14:55:23 +0100</bug_when>
            <thetext>fixed on trunk with rev. 23958</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21546</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2010-11-25 09:16:57 +0100</bug_when>
            <thetext>The changes caused a problem: Items aren&#39;t displayed for some classes, e.g. ui.window.Window. Exception:
Object apiviewer.dao.Package[1024] has no method &#39;getClass&#39;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21578</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2010-11-26 09:36:03 +0100</bug_when>
            <thetext>fixed on trunk with rev. 24017</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23513</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-24 15:21:06 +0100</bug_when>
            <thetext>Thats also true for internal / private methods.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23522</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-03-24 16:47:27 +0100</bug_when>
            <thetext>
fixed on trunk with rev. 26046.
I will apply the patch on 1.3.1 after i get a feedback from you if you are ok with my temporary solution - read below.

the problem was that we match private to internal.
the new methods added to Browser were public [no &#39;__&#39; ] and the class was made internal.
looking for http://demo.qooxdoo.org/devel/apiviewer/index.html#qx.bom.client.Browser~getName meant one was looking
for a public method. but getName was internal due to Browser being internal. so it wasn&#39;t found.
a small hack for now so it works, but we should decide if we separate internal from private in the future, or remove public methods from internal classes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23531</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2011-03-24 17:22:44 +0100</bug_when>
            <thetext>Hi, don&#39;t really like the hack, you also don&#39;t. So lets at least keep this bug open until we&#39;re happy with a solution...

Gabi, have you other ideas how to address this? Wouldn&#39;t it be that if a user is directed to an item that his/her filters wouldn&#39;t allow to display, the user is asked to allow the filters to get adjusted to display the items properly? Would that technically be feasible at all?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23544</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-03-24 21:39:26 +0100</bug_when>
            <thetext>
first, answer to your question: 
&quot;Wouldn&#39;t it be that if a user
is directed to an item that his/her filters wouldn&#39;t allow to display, the user
is asked to allow the filters to get adjusted to display the items properly?
Would that technically be feasible at all?&quot;
yes, that happens now, the filters are automatically activated in order to show the user his item.
check this protected item on a regular class:
http://demo.qooxdoo.org/devel/apiviewer/#qx.ui.core.LayoutItem~_getLayout
or this private:
http://demo.qooxdoo.org/devel/apiviewer/#qx.ui.core.Blocker~__unblock

the protected/private filter is automatically activated.
The problem with qx.bom.client.Browser.getName() - as this is an example for this bug - is that getName is a public static method, but in an internal class.
being public , the private filter is deactivated.
being internal, and because internal is treated as private, when we filter the items to match the panels/filters activated these methods are removed.

  - there are 3 solutions, but i lack knowlwedge of how the API is thought.
 1. why the method is set to internal = true ? just because the class is internal ? it looks public all right to me, and it should be showed in the public panel. in this case the solution is that the generated api json class for this file should properly mark this method as public one.
from: api/script/qx.bom.client.Browser.json:
------------
 {&quot;attributes&quot;: {&quot;access&quot;: &quot;internal&quot;, &quot;isInternal&quot;: true, &quot;isStatic&quot;: true, &quot;name&quot;: &quot;getName&quot;}, &quot;type&quot;: &quot;method&quot;, &quot;children&quot;: [{&quot;attributes&quot;: {&quot;text&quot;: &quot;&lt;p&gt;Checks for the name of the browser and returns it.&lt;/p&gt;&quot;}, &quot;type&quot;: &quot;desc&quot;}
-----------
 2. if it must be kept internal, then we must change the code in the apiviewer so that internal and private shouldn&#39;t be treated the same as it is now.
 3. getName should be renamed to __getName() and everything will be like before, OR, we should not mark the class as internal.

 Looking at the code in api viewer, the internal and the private class items are treated in the same way, and it worked ok untill now, as there were no public methods in the internal classes.
 If this relation between internal and private is nothing more than a hack too, and has no meaning, than it is all clear. but maybe there is a principle behind it that i cannot realize.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23566</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-25 09:53:27 +0100</bug_when>
            <thetext>I&#39;m fine with that hack right now because we still have another bug open which exactly describes the second solution gabi showed. Bug #823 Thats why i would close the bug and fix the other bug after the release.

Here are the reasons why solution 1 and 3 are not working:
1. The developer should not use that method directly. With the internal flag, we keep us from deprecating stuff and so on. The way to use it is always to query qx.core.Environment.

3. Prefixing the method with __ will make the generator to rename it on build and due to that, the environment class can not access it anymore.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>24228</commentid>
            <who name="Gabriel Munteanu">jajalinux</who>
            <bug_when>2011-04-28 10:42:22 +0200</bug_when>
            <thetext>solved, as 823 is solved now.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39065</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:26:18 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>