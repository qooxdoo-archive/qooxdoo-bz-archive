<bug>
          <bug_id>7016</bug_id>
          
          <creation_ts>2012-11-20 09:14:00 +0100</creation_ts>
          <short_desc>&#39;ecmascript.error.stacktrace&#39; can Trigger an Infinite Loop</short_desc>
          <delta_ts>2014-03-03 15:25:38 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.dev</component>
          <version>2.0</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>2.1.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>31387</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-11-20 09:14:42 +0100</bug_when>
            <thetext>If - for some reason - the environment key &quot;ecmascript.error.stacktrace&quot; is not 
available (e.g. because the script runs in an environment where 
qx.bom.client.EcmaScript is not loaded), qx.dev.StackTrace enters an infinite 
loop, as it tries to get &quot;ecmascript.error.stacktrace&quot; in order to log the 
absence of &quot;ecmascript.error.stacktrace&quot;.

I think an error handling should be implemented that takes this possibility 
into account and degrades gracefully.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31591</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2012-12-03 15:14:46 +0100</bug_when>
            <thetext>Added a check to dev.StackTrace that prevents it from querying the env key if the corresponding check method is not present. This goes against the idea that env keys should be usable without knowing how their values are calculated, but Martin and I couldn&#39;t come up wit a better solution.

Fixed with
90b505e1adb63d17a44f77967b17db982f5fbb31 (master)
ee04daab8419fbea2987cc165fbaf5ac043c3a8a (branch_2_1_x)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31594</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-12-03 16:24:21 +0100</bug_when>
            <thetext>(In reply to comment #1)
&gt; This goes against the idea that
&gt; env keys should be usable without knowing how their values are calculated

I tend to disagree here. This is fine for application code. But at one level, deep down in the framework code, you have to be knowledgable about how things are calculated, lest these kinds of errors creep in. I agree this should be as rare as possible, but the framework suffers to some extend from ignoring how things are connected on the lower levels.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38820</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:25:38 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>