<bug>
          <bug_id>6734</bug_id>
          
          <creation_ts>2012-08-22 18:12:00 +0200</creation_ts>
          <short_desc>Break up lang.py into multiple, platform-specific Versions</short_desc>
          <delta_ts>2014-03-03 09:36:35 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>2.0.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>daniel.wagner</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>30470</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-08-22 18:12:45 +0200</bug_when>
            <thetext>JavaScript language features, like known globals, built-in functions, keyword, 
and the like, are captured for the generator in a single module, 
tool/pylib/ecmascript/frontend/lang.py.

But there are increasingly issues with having a single language module for a 
whole variety of JS platforms and runtime environments. Most notable those 
platform vary in the set of built-in objects and functions, like &#39;window&#39;, 
&#39;document&#39;, &#39;console&#39;, &#39;process&#39;, &#39;environment&#39;, asf.

It seems sensible to maintain different, platform-specific versions of lang.py, 
so these differences are honored and e.g. the generator can check against a 
specific set of globals for the current build. As this is all declarative 
stuff, it should be easy to have like a minimum root set, and model other sets 
as extensions thereof (e.g. in the form of class inheritance).

Which set to use would be part of the generator configuration, and could e.g. 
be selected with the choice of the skeleton that is used to create the 
application.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34064</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-10-10 18:34:30 +0200</bug_when>
            <thetext>*** Bug 7373 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36190</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 09:36:35 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year or we don&#39;t think it will be fixed in the near future.</thetext>
          </long_desc>
      
      

    </bug>