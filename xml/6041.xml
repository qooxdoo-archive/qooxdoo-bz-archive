<bug>
          <bug_id>6041</bug_id>
          
          <creation_ts>2012-01-13 14:21:00 +0100</creation_ts>
          <short_desc>RequireJS / CommonJS Module Job</short_desc>
          <delta_ts>2014-03-03 08:47:23 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          <votes>1</votes>
          <everconfirmed>1</everconfirmed>
          <reporter name="Tino Butz">tinobutz</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>28267</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2012-01-13 14:21:52 +0100</bug_when>
            <thetext>To provide RequireJS and CommonJS compatible qooxdoo libs, we should introduce a build job that wraps the generated qooxdoo code as a RequireJS / CommonJS module.

Things to consider:

* all qx classes are added to the window object -&gt; we shouldn&#39;t pollute the window object, all classes should only be defined in the module.
* the simplest approach to the previous point would be to remove the created namespace from the window object -&gt; but, we can not just remove the namespace from the window object after creation of the classes, as other libs could use it
* Export should reveal defined namespace / class
* The generator wrapper job should be abstracted: Only add header / footer templates around the qooxdoo code. (see https://github.com/janl/mustache.js for a nice example how they wrap their code)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28650</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-02-27 16:08:22 +0100</bug_when>
            <thetext>I wrote a loader template which can be used to build a RequireJS module. The generator already offers a way to define a new loader template so the only thing you have to do is to configure a custom build job, use the requirejs loader template and set a special environment key named &quot;qx.export&quot; which defines a map holding the class to export. Additionally, a manual page has been added.

master: 11bc537765aaec088c32d036a88593418cedcd6f</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28653</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-02-27 16:22:26 +0100</bug_when>
            <thetext>There is still a generator job missing that uses new template and provides some sensible defaults for the necessary config settings (e.g. &#39;qx.export&#39; environment).

Also, the CommonJS approach is not covered yet, or is it?!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28656</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-02-28 08:22:40 +0100</bug_when>
            <thetext>(In reply to comment #2)
&gt; There is still a generator job missing that uses new template and provides some
&gt; sensible defaults for the necessary config settings (e.g. &#39;qx.export&#39;
&gt; environment).

Thats both stuff which could be added but we should check if thats necessary at the moment. 
 
&gt; Also, the CommonJS approach is not covered yet, or is it?!

No it sin&#39;t but I don&#39;t think thats necessary at the moment. But I&#39;ll check that and fix the bug description if so.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29741</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-06-12 20:46:06 +0200</bug_when>
            <thetext>-&gt; to undef

Martin wanted to clarify the CommonJS question (s. comment#3), and I need a clearer picture of the envisioned result, e.g. how a wrapped module would look like.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35888</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:23 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>