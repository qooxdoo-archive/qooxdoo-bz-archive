<bug>
          <bug_id>8836</bug_id>
          
          <creation_ts>2014-12-16 18:07:00 +0100</creation_ts>
          <short_desc>Possibility to listen for syntetic events fired by other libraries</short_desc>
          <delta_ts>2015-02-09 15:11:02 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>website.bom</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>5.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alexander Steitz">alexander.steitz</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>christian.hagendorn</cc>
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>41999</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2014-12-16 18:07:38 +0100</bug_when>
            <thetext>Consider you want to listen for a &#39;pageReady&#39; event at the document node. This event is fired by another library at your website using the native &#39;dispatchEvent&#39; method.

Right now the event layer is not supporting this. You can only listen to browser-supported events.

It should be possible to listen to such events using the qooxdoo event layer.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42109</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2015-01-08 17:16:50 +0100</bug_when>
            <thetext>qx.module.Event.on will only add a native listener if qx.bom.Event.supportsEvent returns true. We already have several ugly kludges in place to bypass this check for native events that resist detection and our own synthetic pointer events.

The obvious solution would be to add a whitelist of allowed event types. The drawback here would be that app developers would have to manually add all synthetic events fired by third-party libraries that they want to listen to.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42407</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2015-02-09 15:11:02 +0100</bug_when>
            <thetext>Martin and I decided to simply remove the &#39;supportsListener&#39; check in module.Event.on and the workarounds we added to bypass this check e.g. for pointer and gesture events. While this adds some overhead in the form of listeners for synthetic events that will never be fired because they use emit() instead, it shouldn&#39;t introduce any memory leaks.

6e5831f9a6594077054f47680de5c4dbfe291ed2 qooxdoo:master
fe2df1fcb2c3e0f848d8ce802e9819aa2b83030f next:master</thetext>
          </long_desc>
      
      

    </bug>