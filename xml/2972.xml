<bug>
          <bug_id>2972</bug_id>
          
          <creation_ts>2009-10-22 16:41:00 +0200</creation_ts>
          <short_desc>Add generic command method for typing in qooxdoo widgets</short_desc>
          <delta_ts>2009-11-27 12:44:00 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>contrib</product>
          <component>Simulator</component>
          <version>trunk</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Wagner">daniel.wagner</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>13438</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-10-22 16:41:40 +0200</bug_when>
            <thetext>Currently it is not possible to use the &quot;type&quot; or &quot;typeKeys&quot; Selenium commands directly with some qooxdoo widgets such as qx.ui.form.ComboBox. Instead, the test developer must specify a locator that returns the TextField child control of the ComboBox.  

In order to abstract away the internal workings of the widgets for the test developer, it might be useful to have a generic &quot;qxType&quot; method that would check if the DOM element returned by the locator is an HTML input field and, if it&#39;s not, try to find the original widget&#39;s TextField child control. (It might make sense to use the internal locator logic for this).

This qxType method could conceivably also simplify typing in a qooxdoo TextArea.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14145</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-11-17 10:28:05 +0100</bug_when>
            <thetext>Increased priority. Due to the recent changes to qx.ui.form.AbstractField (see bug #2983), Selenium&#39;s type and typeKeys commands no longer work with qooxdoo&#39;s text field widgets since getContentElement().getDomElement() now returns a div instead of an input element. Searching for the input element can be done in the qxType command. Actually, qxTypeKeys would be a better name since the behavior is closer to Selenium&#39;s typeKeys (all key events are simulated).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14861</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:39:32 +0100</bug_when>
            <thetext>to 1.0 (rather incorrectly, this corresponds to the compatible framework version, not the version number of the Simulator contribution).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15030</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-11-27 12:44:00 +0100</bug_when>
            <thetext>AbstractField now uses the original DOM structure again, but since I was almost done with the new commands, I finished them anyway. qxType and qxTypeKeys behave like their Selenium equivalents, with the following additions: If the given locator returns an element that isn&#39;t a text field or text area, the command will try to find the qooxdoo widget the element belongs to. If this widget inherits from AbstractField, its HTML input or textarea child element will be targeted. If not, its child controls will be searched for input/textare elements and the first one that is found will be the target.

An example:
A qooxdoo application contains a qx.ui.form.ComboBox that has had an ID assigned using getContentElement().getDomElement().id = &quot;firstComboBox&quot;. In order to simulate a user typing in the box, the command QxSelenium.qxTypeKeys(&quot;firstComboBox&quot;, &quot;Some Text&quot;) can be used.</thetext>
          </long_desc>
      
      

    </bug>