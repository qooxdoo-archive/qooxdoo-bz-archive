<bug>
          <bug_id>3291</bug_id>
          
          <creation_ts>2010-01-04 11:06:00 +0100</creation_ts>
          <short_desc>REFAC: Use Object Instances to Model Problem Domain in Generator</short_desc>
          <delta_ts>2014-03-03 08:46:22 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>1.0</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          <dependson>3698</dependson>
    
    <dependson>3699</dependson>
    
    <dependson>4082</dependson>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>16011</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-01-04 11:06:04 +0100</bug_when>
            <thetext>The generator in generall doesn&#39;t use an object-oriented approach to model the 
problem domain it is working on. E.g. there is no class that represents a 
qooxdoo class, or a resource, or a library, all of which are essential concepts 
of the underlying problem domain. Rather, &quot;doer-classes&quot; are used, like the 
DependencyLoader or the PartBuilder, that basically act as libraries of global 
functions. Those classes don&#39;t represent concepts of the problem domain. They 
are used as singletons (instantiated only once and passed around), just to make 
the contained methods available. These methods work on data that is fed in 
parameters, and hardly need instance members to do their work, so they are 
essentially global functions. This misses the advantages of object-oriented 
design, and makes the code harder to understand and maintain. At least core 
ideas of the problem domain should be modelled as object instances.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35505</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:46:22 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>