<bug>
          <bug_id>2345</bug_id>
          
          <creation_ts>2009-05-07 09:04:00 +0200</creation_ts>
          <short_desc>Create skeleton for typical contrib projects</short_desc>
          <delta_ts>2014-03-03 15:24:02 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.skeleton</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          
          <blocked>1910</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Ecker">qooxdoo</reporter>
          <assigned_to name="Andreas Ecker">qooxdoo</assigned_to>
          <cc>alexander.steitz</cc>
    
    <cc>thron7</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>9833</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-05-07 09:04:24 +0200</bug_when>
            <thetext>There should be a skeleton available for creating typical contrib projects. The file structure should particularly allow to integrate demos of the contrib, that could easily be generated and deployed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9834</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-05-07 15:17:13 +0200</bug_when>
            <thetext>Currently it is necessary to correct the QOOXDOO_PATH in both the config.json file and the generate.py file of qooxdoo-contrib projects in order to build them. Is there any reason that generate.py couldn&#39;t read QOOXDOO_CONTRIB from the config.json in its current directory, to unify reconfiguration?

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9835</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-05-07 15:31:08 +0200</bug_when>
            <thetext>That should have been, or course:

Is there any reason that generate.py couldn&#39;t read QOOXDOO_PATH from the config.json...

</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10349</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-10 11:06:09 +0200</bug_when>
            <thetext>@Derrell: That is already the case, since 0.8.2 I think.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10350</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-10 11:07:26 +0200</bug_when>
            <thetext>From an SVN commit by Andreas:
&quot;Support the skeleton for contributions, which was added in the previous 
commit. Call create-application py with the option &quot;-t contribution&quot;, and 
choose a local qooxdoo-contrib checkout as the target directory.&quot;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10358</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-10 17:08:54 +0200</bug_when>
            <thetext>I made some amendments to the contrib skeleton. One was to add a 
source/index.tmpl.html, when I realized that was probably left out 
intentionally, to enforce the demo/default application. If this was the case, 
I&#39;m not sure whether we should follow this strategy:

- Trying to figure out why you might not want main application code in the 
source tree of the contribution, I could only think of not obscuring the 
class(es) that constitutes the contribution to a potential user of such. 

- But this is not obvious anyway in all but the most trivial cases (namely when 
there is only one class). As soon as there is more than one class, the question 
arises which one(s) to use in application code. The only generic way of 
answering this is through documentation.

- To support this, I have exempted the &quot;Demo&quot; class from the Apiviewer 
generated with &#39;generate.py api&#39;. Thus, the contrib API is not blurred by 
application code.

- While leaving out application code from the contribution&#39;s source tree is 
supposedly helping the *application* developer (the contribution&#39;s user), it is 
to the disadvantage of the *contribution* developer. Although standard jobs 
&#39;source&#39; and &#39;build&#39; are available, they wouldn&#39;t really be usable (&#39;generate 
build&#39; would even throw an error without a source/index.html).

- Having application code &quot;Demo.js&quot; in the contrib source tree allows you to 
run &#39;source&#39; and &#39;build&#39; jobs and immediately have working demo apps. Running 
the &#39;api&#39; job skips the Demo class, so it will not blur the resulting API doc. 
Generated Apiviewer and build version of the app are immediately usable as 
upload to contrib.qooxdoo.org as demo and documentation.

- This also supports the Principle of Least Surprise for the contribution 
developer, since all standard jobs are sensibly runnable, like with most other 
skeletons, supporting a unified handling of skeletons.  And they produce 
uploadable results.

- The name &quot;Demo.js&quot; stands out clearly enough to indicate its purpose for 
anybody browsing the source tree, and it provides an immediate usage example.

- The demo/ component of the skeleton is still a good addition, since it allows 
people to develop and maintain more and different demo applications for their 
contribution. But this should go on top, and should not be enforced as the only 
way. The simple case should still be simple, and work without resorting to the 
demo/ component.

I think it is a real advantage that qooxdoo applications can accommdate &quot;main&quot; 
and &quot;library&quot; code in one application (which is e.g. also true for many Python 
modules). For other applications to use the &quot;library&quot; code it is only necessary 
to know the relevant class names, which should be conveyed through 
documentation.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10359</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-10 17:27:15 +0200</bug_when>
            <thetext>One thing I didn&#39;t manage was to use the contrib&#39;s own theme, the current 
work-around is to use qx.theme.Modern.

With r19312.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10360</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-10 17:34:27 +0200</bug_when>
            <thetext>(In reply to comment #5)
I forgot to mention (but was probably clear from the context) that besides 
adding a source/index.tmpl.html I also added a source/class/custom/Demo.tmpl.js 
and made adaptions to config.tmpl.json, to have Demo as the main application 
class.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10442</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-17 16:55:36 +0200</bug_when>
            <thetext>Moved Demo.tmpl.js to its own subdirectory, source/class/custom/demo. This way, 
there is a clearer separation between API and application code, especially when 
writing more than one application class. Also, it is more robust  to exempt the 
application classes from Apiviewer, with API_EXCLUDE=[..., 
&quot;{namespace}.demo.*&quot;] in config.json, which covers all those cases. 

With r19349.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10465</commentid>
            <who name="Alexander Steitz">alexander.steitz</who>
            <bug_when>2009-06-19 17:56:54 +0200</bug_when>
            <thetext>(In reply to comment #5)
First of all: I prefer the solution to put the &quot;demo&quot; folder at top level and add there at least one demo skeleton (named &quot;default&quot;) to get a running demo application.


&gt; - Trying to figure out why you might not want main application code in the 
&gt; source tree of the contribution, I could only think of not obscuring the 
&gt; class(es) that constitutes the contribution to a potential user of such. 
Yes, that&#39;s exactly the intention.

 
&gt; - But this is not obvious anyway in all but the most trivial cases (namely when 
&gt; there is only one class). As soon as there is more than one class, the question 
&gt; arises which one(s) to use in application code. The only generic way of 
&gt; answering this is through documentation.
Or to establish a naming convention like to name the main class like the namespace. That&#39;s already the case for many contributions.


&gt; - To support this, I have exempted the &quot;Demo&quot; class from the Apiviewer 
&gt; generated with &#39;generate.py api&#39;. Thus, the contrib API is not blurred by 
&gt; application code.
An alternative is to create a demo folder at top-level and put the demos as skeletons inside this folder. The &quot;api&quot; job can be executed without any changes to the configuration.

 
&gt; - While leaving out application code from the contribution&#39;s source tree is 
&gt; supposedly helping the *application* developer (the contribution&#39;s user), it is 
&gt; to the disadvantage of the *contribution* developer. Although standard jobs 
&gt; &#39;source&#39; and &#39;build&#39; are available, they wouldn&#39;t really be usable (&#39;generate 
&gt; build&#39; would even throw an error without a source/index.html).
The contribution developer would set up a skeleton for demo usage (the &quot;default&quot; demo folder which already exists) and would run the &quot;source&quot; and &quot;build&quot; jobs there. This way the contribution developer can also test if his contribution is running nicely within a GUI application.


&gt; - Having application code &quot;Demo.js&quot; in the contrib source tree allows you to 
&gt; run &#39;source&#39; and &#39;build&#39; jobs and immediately have working demo apps. Running 
&gt; the &#39;api&#39; job skips the Demo class, so it will not blur the resulting API doc. 
&gt; Generated Apiviewer and build version of the app are immediately usable as 
&gt; upload to contrib.qooxdoo.org as demo and documentation.
Same is true for the solution with a &quot;demo&quot; folder at top-level. The demo skeletons can be easily deployed to the qooxdoo server and the api can be generated of the contribution classes. Since the API Viewer is self-contained it wouldn&#39;t be a problem to grab it and to put it at the server.

 
&gt; - This also supports the Principle of Least Surprise for the contribution 
&gt; developer, since all standard jobs are sensibly runnable, like with most other 
&gt; skeletons, supporting a unified handling of skeletons.  And they produce 
&gt; uploadable results.
Good point, but including a default demo application and let the contribution developer know to use this skeleton to develop his demo application could also be a good way. Maybe we do not offer these standard jobs for the contribution itself, since every contribution should be included in an application anyway.

 
&gt; - The name &quot;Demo.js&quot; stands out clearly enough to indicate its purpose for 
&gt; anybody browsing the source tree, and it provides an immediate usage example.
So the &quot;demo/default&quot; folder does ;-)


&gt; - The demo/ component of the skeleton is still a good addition, since it allows 
&gt; people to develop and maintain more and different demo applications for their 
&gt; contribution. But this should go on top, and should not be enforced as the only 
&gt; way. The simple case should still be simple, and work without resorting to the 
&gt; demo/ component.
I think it&#39;s a good convention to let the contribution developer develop his demo application in a special folder and leave the contribution classes alone. This is the way a &quot;contribution user&quot; would use the contribution.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13869</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-04 22:40:09 +0100</bug_when>
            <thetext>I think the issue of a missing contribution skeleton has been successfully resolved already, also see comment #4. Apparently it was missed to properly record this for 0.8.3, fixed that. The new structure got positive feedback so far from contributors. If there are still issues to be addressed, specific reports should be opened.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38241</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:24:02 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>