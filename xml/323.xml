<bug>
          <bug_id>323</bug_id>
          
          <creation_ts>2007-03-07 10:56:00 +0100</creation_ts>
          <short_desc>qx.Class.patch should preserve references to overwritten methods</short_desc>
          <delta_ts>2008-06-23 12:06:48 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Fabian Jakobs">fabian.jakobs</reporter>
          <assigned_to name="Fabian Jakobs">fabian.jakobs</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>980</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2007-03-07 10:56:59 +0100</bug_when>
            <thetext>if a method gets overwritten by a mixin using qx.Class.patch there is currently no way to call the overwritten function from the Mixin. The overwritten function should be available to the mixin.

Possible solutions:

1. rename the original function. Problem: may cause name conflicts
2. generate a wrapper around the included function: Problem may cause a 
runtime overhead on function calls
3. document a way to solve this with the current infrastructure in the Wiki</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>983</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2007-03-07 11:51:43 +0100</bug_when>
            <thetext>&gt; 2. generate a wrapper around the included function: Problem may cause a 
&gt; runtime overhead on function calls

I don&#39;t see this as a big problem. Patches are used very rarely anyway, and probably on areas that aren&#39;t called very often - otherwise the bug would have been found and the patch would be unnecessary!

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>2290</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2007-09-11 15:24:22 +0200</bug_when>
            <thetext>Is there any reason for this anymore? At least I will reduce the Serverity now. </thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3325</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-06-12 17:19:55 +0200</bug_when>
            <thetext>to me</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3348</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-06-13 11:29:49 +0200</bug_when>
            <thetext>Since there doesn&#39;t seem to be a strong use case for this feature and nobody came up with a good solution for it, I&#39;ll close the bug.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3422</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-06-17 15:00:52 +0200</bug_when>
            <thetext>You may have misunderstood my comment:

&gt; &gt; 2. generate a wrapper around the included function: Problem may cause a 
&gt; &gt; runtime overhead on function calls
&gt;
&gt; I don&#39;t see this as a big problem. Patches are used very rarely anyway, and
&gt; probably on areas that aren&#39;t called very often - otherwise the bug would have
&gt; been found and the patch would be unnecessary!

I was saying that option 2 was my preference, and that it wouldn&#39;t create a big overhead. The underlying issue, of not being able to call overridden functions when patching, *is* a big problem and needs to be addressed.

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3432</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-06-17 17:19:08 +0200</bug_when>
            <thetext>The wrapping approach is now implemented in 0.8 trunk. (rev. 13972)

See unit test &quot;testrunner.test.Mixin.testPatchOverwritten&quot;.

Maybe we should backport this to 0.7</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3433</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-06-18 08:36:36 +0200</bug_when>
            <thetext>Looks nice. Good to see some unit tests.

By all means pack-port it as it is simple code. It will help with any patching that&#39;s needed for 0.7.4.

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3442</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-06-18 18:43:30 +0200</bug_when>
            <thetext>Hugh, 

it would be a big help if you could do the backport. The relevant revisions are:

rev. 13972
rev. 13978</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3444</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-06-19 07:51:03 +0200</bug_when>
            <thetext>Fabian,

Unfortunately I don&#39;t have SVN access so I can&#39;t commit. Do you want me to create the patch?

Alternatively you could give me access.... My sourceforge ID is hgibson50.

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3445</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-06-19 09:13:25 +0200</bug_when>
            <thetext>I thought you already have svn write permissions but it was only for qooxdoo-contrib. I have granted you write permissions for &quot;qooxdoo&quot; as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3448</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-06-19 23:38:29 +0200</bug_when>
            <thetext>Nearly there. I&#39;ve prepared the changes and tested them, but got a problem when committing. 

Error: Commit failed (details follow):  
Error: MKACTIVITY of &#39;/svnroot/qooxdoo/!svn/act/8ab93125-c25c-8247-9d35-1502ad65d30f&#39;: 403 Forbidden (https://qooxdoo.svn.sourceforge.net)  

Very similar to that referred to in http://delphi.newswhat.com/geoxml/forumhistorythread?groupname=instantobjects.org.development&amp;messageid=07D6020E013B112CC@delphiedintorni.it

Can you do the necessary changes to my account - that is, add a privilege &quot;Subversion access&quot;? TVMIA.

Hugh



</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3450</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-06-20 09:06:23 +0200</bug_when>
            <thetext>You already have. Some time ago sf required everyone to login again and update the password. Can You log in with your account at the sourceforge homepage?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3452</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-06-20 11:02:13 +0200</bug_when>
            <thetext>I changed my password. I&#39;ve logged a SourceForge support request at 

http://sourceforge.net/tracker/index.php?func=detail&amp;aid=1998585&amp;group_id=1&amp;atid=200001

However, looks like a lot of people have the same problem - see the list at

http://sourceforge.net/tracker/?func=browse&amp;group_id=1&amp;atid=200001

One of the issues mentioned a migration carried out yesterday which may have affected this.

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3453</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-06-20 11:27:05 +0200</bug_when>
            <thetext>Sourceforge is sometimes really a pain to work with!!

Until this is working, you could attach the patch and I will apply it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3458</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-06-21 07:30:59 +0200</bug_when>
            <thetext>Sourceforge fixed their problem.

rev. 14043: [BUG RESOLVED 323]: ported fix to legacy_0_7_x: qx.Class.patch should preserve references to overwritten methods http://bugzilla.qooxdoo.org/show_bug.cgi?id=323

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3459</commentid>
            <who name="Hugh Gibson">hgibson</who>
            <bug_when>2008-06-21 08:02:39 +0200</bug_when>
            <thetext>Oops, there was a console.log call in the test code. I&#39;ve removed it from legacy_0_7_x and verified that the IE testrunner now works:

rev 14044.

Also done in trunk: rev 14045. As trunk testrunner doesn&#39;t work in IE I&#39;ve verified that the debug output doesn&#39;t appear in Firefox.

Hugh</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3467</commentid>
            <who name="Ulrich Berger">ulrich.berger</who>
            <bug_when>2008-06-23 11:27:49 +0200</bug_when>
            <thetext>Fix does not work for me (I&#39;m using legacy 0.7), I always get an InternalError:

036207: : InternalError - too much recursion
  at qx.Class:0
  at MAtomClip:61
  at qx.Class:1352
  at MAtomClip:61
  at qx.Class:1352


In the mixin MAtomClip I overwrote &quot;_applyEnabled&quot;. It crashes on this line &quot;base.call(this, value, old);&quot;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>3471</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-06-23 12:06:48 +0200</bug_when>
            <thetext>Urlich&#39;s code contains a workaround for exactly the problem this patch fixes. Removing the workaround in his code and calling &quot;this.base()&quot; should fix the problem.</thetext>
          </long_desc>
      
      

    </bug>