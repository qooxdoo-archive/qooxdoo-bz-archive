<bug>
          <bug_id>2363</bug_id>
          
          <creation_ts>2009-05-10 17:47:00 +0200</creation_ts>
          <short_desc>Add support for data uri images to the framework</short_desc>
          <delta_ts>2010-11-15 14:37:00 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>4071</dup_id>
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Werner">info</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>9885</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-05-10 17:47:38 +0200</bug_when>
            <thetext>Since now all modern browsers support data uris (base64) for images it might be a good idea to offer a option to use these for the images from the resource folder.

To detect if a client is base64 capable could also happen on the client with this clever trick:
http://weston.ruter.net/2009/05/07/detecting-support-for-data-uris/

But since the generator must encode the images to Base64 there must be at least some build-side know how as well. Maybe the easiest would be to load the image data from a separate script (one for all image data). This may also be a way to support post-load locales or even themes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10279</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-06-04 15:34:34 +0200</bug_when>
            <thetext>@Thomas: Do you have any hints for me where to best look and start to add such a feature? It needs to process all local images and adds them to the the build like the resource data. Should not be so much other than adding image meta data e.g. sizes. Maybe even could be stored in the same map. Thanks.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10282</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-04 17:07:55 +0200</bug_when>
            <thetext>No idea. There hasn&#39;t been a decision yet, as to whether we will support these 
images, and I&#39;m not sure if this will be a priority anytime soon.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10283</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-06-04 17:22:48 +0200</bug_when>
            <thetext>Mhh, this was not exactly the question to my answer though :) I was asking for a good place for adding this feature. For mobile devices it is somewhat useful so I would like to contribute it to qooxdoo later. Still looking for a good place where to add it - any hints?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10284</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-04 18:44:22 +0200</bug_when>
            <thetext>No, as I said, no idea.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10286</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-04 23:32:11 +0200</bug_when>
            <thetext>The problem here is that I don&#39;t have a good idea how data uris should be integrated with qooxdoo. All I have seen so far were long base64 string literals verbatim in HTML code, which is probably not what we want. How would the qooxdoo runtime handle those data strings?

I guess the answer to this question determins in which form the build process has to provide the encoded images. But obviously there would be the task of base64 encoding image files, and for a start that could be done through a dedicated action config key, something like &quot;image-base64-encoding&quot; that takes e.g. a map of input image paths and corresponding output file paths. Then could follow the notorious scheme of adding a new &quot;runBlah()&quot; method to the Generator.py that realizes this key, going through the input files and creating the output files, similar to the &quot;image-clipping&quot; key. This should get you started.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12237</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-14 10:46:30 +0200</bug_when>
            <thetext>as enhancement</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21298</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-11-15 14:37:00 +0100</bug_when>
            <thetext>

*** This bug has been marked as a duplicate of bug 4071 ***</thetext>
          </long_desc>
      
      

    </bug>