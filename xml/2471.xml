<bug>
          <bug_id>2471</bug_id>
          
          <creation_ts>2009-06-16 11:48:00 +0200</creation_ts>
          <short_desc>Add possibility to annotate methods</short_desc>
          <delta_ts>2014-03-03 08:45:41 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          <blocked>2095</blocked>
    
    <blocked>2657</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Fabian Jakobs">fabian.jakobs</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>gianmarco.gherardi</cc>
    
    <cc>qooxdoo</cc>
    
    <cc>thron7</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10395</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-06-16 11:48:07 +0200</bug_when>
            <thetext>Add possibility to annotate methods. Uses could be:

- abstract
- overridden
- protected/private
- fallbackErrorHandling (entry point)
- final
- deprecated
- aop?


the syntax could look like this

    _oninterval : qx.Annotation.define({
      &quot;final&quot;: true,
      &quot;override&quot;: true,
      &quot;deprecated&quot;: &quot;Don&#39;t use me!&quot;
    }, function() {
      if (this.getEnabled()) {
        this.fireEvent(&quot;interval&quot;);
      }
    });

    _oninterval : qx.Annotation.define(&quot;final|override|deprecated&quot;, function()
    {
      if (this.getEnabled()) {
        this.fireEvent(&quot;interval&quot;);
      }
    });

Defining the attribute directly in the class map is preferable to definitions e.g in a defer
block or in a separate config key.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10519</commentid>
            <who name="Jonathan Weiß">qooxdoo-bugs</who>
            <bug_when>2009-06-23 16:35:19 +0200</bug_when>
            <thetext>I suggest to add the tag &quot;experimental&quot; to the annotations. Do we want to 
integrate API information as well?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10523</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-06-23 19:01:31 +0200</bug_when>
            <thetext>Hi, not sure what effect of an &quot;experimental&quot; annotation you&#39;d expect. I guess primarily printing out warnings in the source/devel version?

Also for the API info? I guess you envision to retrieve API information programatically by JS? While that would be nice, it could also be provided by a separate system (maybe even a central server with web services). Such a system could be generated given the API info that is already in the JSdocs.

In principle, I&#39;d prefer not to clutter such an annotation feature with rather non-functional annotations. What presumably wouldn&#39;t work out for instance is the somewhat similar annotation &quot;deprecated&quot;, since there&#39;s often no deprecation on a method level, but lets say only for certain arguments, whose types have changed. Maybe we need another orthogonal system to extract such info from the JSdocs and inject it as JS into the source/devel version. This could also work for runtime-checks for the number or types of arguments to methods. 

Feels like most of this belongs to AOP or separate systems injected or provided at runtime, rather than the local and manual annotation mechanism pictured here. It&#39;s good to figure that out, though, so please keep up providing input for discussion.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10559</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-24 18:31:30 +0200</bug_when>
            <thetext>I wonder if it is really necessary to introduce (yet another) API on the level 
of qx.Class. If the scope of the annotations are really functions then why not 
allocating the necessary method at qx.lang.Function, e.g. as 

         Function qx.lang.Function.annotate(String mode_string, Function func)

?! Since it is a function-modifying method, that would nicely fit with other 
methods like bind, create or curry. Keeping everything in one place, right?! 
(BTW: Why aren&#39;t all those methods returning &quot;Function&quot; in the Apiviewer?!).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17348</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-03-17 14:10:38 +0100</bug_when>
            <thetext>to Martin</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26247</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-07-26 10:12:46 +0200</bug_when>
            <thetext>Here is an interesting thread about that talking about doing the annotations during build time:
http://qooxdoo.678.n2.nabble.com/Proposal-Unintended-override-warning-for-Qx-class-members-td6619039.html;cid=1311667882021-466</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26248</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-07-26 10:20:20 +0200</bug_when>
            <thetext>(In reply to comment #5)
&gt; Here is an interesting thread about that talking about doing the annotations
&gt; during build time:
&gt; http://qooxdoo.678.n2.nabble.com/Proposal-Unintended-override-warning-for-Qx-class-members-td6619039.html;cid=1311667882021-466

One interesting suggestion from this thread is to check

  // @override

in the generator, and warn if

- a method is overridden without the @override tag (because the override might be involuntarily)

- @override is given for a method where there is no corresponding method in the parents (because the @override is out of place then)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26258</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-07-26 14:29:18 +0200</bug_when>
            <thetext>CHECKING ANNOTATIONS AT COMPILE TIME

Let me first say that this bug addresses a general feature that should be 
treated on that general level, both concerning syntax and semantics. But here, 
I only sketch out for the &quot;overridden&quot; annotation what it might mean to support 
it on the generator side.

To verify &quot;overridden&quot; tags the generator needs to evaluate the inheritance 
hierarchy of the classes. This is currently already done during transitive 
dependency analysis, when the generator tries to find the dependencies of a 
particular method. To analyse the dependencies it must find the method code, 
and that means finding the class that actually implements the method.

But this approach is rather ad-hoc: The class hierarchy is evaluated when it is 
needed, and for a particular class feature (e.g. method). This seems to have 
bad run time characteristics when applied to each and every protected and 
public method of all involved classes, as this is what you&#39;d have to do to 
verify the tag.

A better approach would be to build up a list of classes with their features 
during dependency analysis (for each class this list could be nicely cached 
with the other class info), and at the end evaluate inheritance relationships 
to find which feature of a class is actually overriding which other feature of 
the same name. Then it should be easy to log all @overridden tags that do not 
match, and all overridings that do not have the tag.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35262</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:45:41 +0100</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>