<bug>
          <bug_id>2672</bug_id>
          
          <creation_ts>2009-08-10 18:06:00 +0200</creation_ts>
          <short_desc>qx.bom.Collection.query does not support id attribute values containing period signs</short_desc>
          <delta_ts>2014-03-03 15:23:28 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>master</version>
          <rep_platform>Firefox 3.5</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>INVALID</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>1.0-beta1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Wagner">daniel.wagner</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>info</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>Firefox</cf_browser>
          <cf_browser_version>3.5</cf_browser_version>

      

      

      

          <long_desc isprivate="0">
            <commentid>11271</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-08-10 18:06:37 +0200</bug_when>
            <thetext>While the period sign is allowed in the HTML &quot;id&quot; attribute, queries like qx.bom.Collection.query(&quot;#some.id&quot;) always come up empty. Escaping the period with a backslash, as described in the W3C CSS Selectors specification, has no effect.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11272</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-08-10 18:11:59 +0200</bug_when>
            <thetext>Digging a bit deeper, the query is processed by qx.bom.Selector, which uses Sizzle. Sizzle checks for a method document.querySelectorAll and, if it&#39;s present, calls it with the query string. In Firefox 3.5, this method fails to identify elements by their ID if it contains period signs. I&#39;ll check what happens in other versions/browsers.

Of course, one might excpect Sizzle to have a workaround for this bug, so I&#39;ll try to find out if newer versions have already addressed this.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11273</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-08-10 19:08:13 +0200</bug_when>
            <thetext>Turns out the query string needs to be double escaped:

qx.bom.Collection.query(&#39;#foo\\.bar&#39;);

works as expected.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11328</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-08-14 08:13:35 +0200</bug_when>
            <thetext>Ok, seems some bug where I could help. But why is this invalid?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11335</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-08-14 09:14:35 +0200</bug_when>
            <thetext>Hi Sebastian,
it works if you use correct escaping in the query string, so I wouldn&#39;t consider it a bug. Don&#39;t you agree?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11510</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-08-25 11:08:55 +0200</bug_when>
            <thetext>-&gt; NEW</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11538</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-08-25 16:57:59 +0200</bug_when>
            <thetext>IMHO the escaping should not be necessary as CSS selectors basically mean to use the same selectors as in CSS. If you need espaping to make it work this is not the case anymore. So, yes, I do not agree with this to be not a bug.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11543</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-08-25 17:45:46 +0200</bug_when>
            <thetext>Sebastian, AFAIK the backslash is always interpreted as an escape character in strings. So you need to use double backslashes if you want to supply a single backslash in a string. 

I haven&#39;t tried, but I&#39;d expect &#39;a\.b&#39; to always become an &#39;a.b&#39; string internally. Could you confirm, or do you know how to work around JS here?
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11544</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-08-25 17:47:37 +0200</bug_when>
            <thetext>Ah, I guess I misread the bug content. Of course, one could do the escaping internally, based on the fact that dots simply require that. It doesn&#39;t have to be provided by the user explicitly in the string argument...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11545</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-08-25 17:48:40 +0200</bug_when>
            <thetext>to Daniel, see my comment above.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11547</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-08-25 18:30:33 +0200</bug_when>
            <thetext>Please keep in mind that this issue might be already fixed with a newer Sizzle version. Let&#39;s try out this first ;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13493</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-10-26 10:20:34 +0100</bug_when>
            <thetext>Sizzle also requires double escaping, it&#39;s actually listed as a feature[1]. Like Andreas said in comment #6, we can&#39;t find out if the user erroneously wrote &quot;#a\.b&quot; since what we see is &quot;#a.b&quot; which is of course a valid selector string.

[1]http://wiki.github.com/jeresig/sizzle</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14533</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:15:19 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38025</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:23:28 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>