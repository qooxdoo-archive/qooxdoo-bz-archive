<bug>
          <bug_id>2276</bug_id>
          
          <creation_ts>2009-04-22 11:32:00 +0200</creation_ts>
          <short_desc>input and changeValue event on textfields</short_desc>
          <delta_ts>2011-01-24 09:15:31 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>app.demobrowser</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          <dependson>2099</dependson>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>info</cc>
    
    <cc>martin.wittemann</cc>
    
    <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>9455</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-04-22 11:32:51 +0200</bug_when>
            <thetext>The qooxdoo textfield does currently have two events responsible for signaling 
if the value has changed. The input event is fired on every key input, the 
changeValue event only if the value is set (on blur for example).
A much better solution would be to change the behavior of one event by a 
property. Cocoa does have such a property and calls it &quot;continous&quot;. We could 
also switch to one event with such a behavior beacuse:
- better understanding for the application developer
- better binding possibilities

See the cocoa API reference for the continous propert:
Cocoa: 
http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/Classes/NSControl_Class/Reference/Reference.html#//apple_ref/occ/instm/NSControl/isContinuous</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10545</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-06-24 13:55:04 +0200</bug_when>
            <thetext>to me</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10546</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-06-24 13:55:47 +0200</bug_when>
            <thetext>to me again!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10554</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-06-24 15:22:16 +0200</bug_when>
            <thetext>Added a liveUpdate property to the AbstractField which toggles the behavior of the changeValue  which could be fired on every key input or not.
Deprecated the old input event and changed all internal usage of the input event.
Committed in revision 19427.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10730</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-07-02 10:57:01 +0200</bug_when>
            <thetext>Just a few comments on this bug:

* A minor one, if it really should be this way what was the reason for using &quot;liveUpdate&quot; over &quot;continous&quot;? The last one is a lot more handy.

* One problem I see is that you may have applications which need both events. The rework of this code has lead to a limitation regarding of the use cases which could be easily applied. Example: Length and format checks during typing, but server-side validation (account number) when leaving the field. This is not easily possible anymore with the new implementation. 

* BTW: This liveUpdate was once implemented in 0.7 and was regarded as not practical. It would be nice what are the reasons for this new estimation. Otherwise these changes lead to a volatil feeling regarding qooxdoo&#39;s API changes as such things are added and removed again and again :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10745</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-07-02 15:25:38 +0200</bug_when>
            <thetext>Hello Sebastian,

we named it liveUpdate because it was named liveUpdate in former qooxdoo versions. That was the main reason for that naming. But event without that, we just thought that this describes the behavior better than continous.

Thats right, you don&#39;t have the chance to get both events anymore. 
As we created the new form API, we figured out that the input event does not fit into the new API. Additionally we figured out during the work on a huge internal qooxdoo porject, that the distinction of these two events is not practical. So we decided to change that back like the way it was once.

Best,
Martin</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10748</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-07-02 17:36:13 +0200</bug_when>
            <thetext>I&#39;ll take a look at the problem and figure out if we really need two events at the same time. Perhaps someone can help me out and tell me some use-cases where this is necessary and cant be solved with other events / mechanisms. 
I will also take a look at flex and cocoa how they handle exactly that problem.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10749</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2009-07-02 17:43:55 +0200</bug_when>
            <thetext>Martin, I really think that you can always work-around these things, but this is not a natural, convenient way.

I would say that liveUpdate itself might be OK. But what&#39;s so wrong still supporting an &quot;input&quot; event when the user types. This could be fired independent from the liveUpdate setting and only sends the value using the event. The documentation then could mention that during a &quot;input&quot; event one could not trust the &quot;value&quot; property for being identical to the visible value.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10752</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-07-02 18:01:08 +0200</bug_when>
            <thetext>Oops, mid-air collision. ;-)

Martin, as we recently talked about, I think the current behavior does not allow to handle some practical use cases sufficiently. For instance it might not be untypical to do a client-side validation (5 number zip code) or live filtering (e.g. numerical values only), while also using the &quot;final&quot; value for server-side validation or as a model value for data binding.

If it&#39;s technically again two distinct &quot;value&quot; events or a combination of flags and/or another (but generic) widget event (blur, etc.), may need evaluation. Whatever the realization might be, I also feel the data binding must be extended in this regard, which may involve re-registering bindings at runtime (something we wanted to avoid initially by consolidating the form API). Since we also just started to look into form/item validation, this is something to cover as well.

Right now lets collect all practical use cases, technically unbiased, and see if all of those can consistently be addressed on a framework level and/or require some custom code.
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10765</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2009-07-03 11:03:50 +0200</bug_when>
            <thetext>Well, I think its not that bad to have an additional input event. Thats how we think its the best way now so we removed the deprecation of the input event in revision 19526.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14488</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:14:55 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0-beta1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14894</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 22:10:38 +0100</bug_when>
            <thetext>corrected wrong milestone (was 0.9, but was fixed for 0.8.3 already)
</thetext>
          </long_desc>
      
      

    </bug>