<bug>
          <bug_id>8215</bug_id>
          
          <creation_ts>2014-03-25 16:29:00 +0100</creation_ts>
          <short_desc>Improve generator to load external JavaScript resources</short_desc>
          <delta_ts>2015-04-07 07:58:22 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.dependencies</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Hagendorn">christian.hagendorn</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>mustafa.sak</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>39789</commentid>
            <who name="Christian Hagendorn">christian.hagendorn</who>
            <bug_when>2014-03-25 16:29:10 +0100</bug_when>
            <thetext>It is a common use case to have external JavaScript dependencies from a qx class to a external library. At the moment you have only three technics to implement this:

Load the file asynchronies with the qx script loader. This has the disadvantage that your application can only begin to run when the file is loaded. And you can not use it when you have a load-time dependency to the library.

Add a script tag to the html file or use &quot;add-script“ from the generator. Both has the disadvantage that you define the dependency on a other place. But the main disadvantage is that with this technic the external library is not considered by the part loading.

Copy and paste the external library to the top/bottom of the qx class definition. This could make some problems with the qx lint job, because this part is also included with the check. This means that you have to change the external liberty code to hide lint warnings.

To resolve all the disadvantages I describe above. We need some new generator features to load external JavaScript files with some generator hints like @require and @use.

This are the needed features:
load external files as it is
the mechanism must support part loading
support for run-time and load-time dependencies is required

It is not necessary to have a magic to load source/build versions form the external library. The generator should only add the defined file without changing the content. The developer is responsible for the external library content.

As example for the generator hints:
@requireExternal(custom/script/MyExternal.js)
@useExternal(custom/script/MyExternal.js)

These hints should not allow a wildcard definition to avoid unintended loading form not needed files.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39879</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2014-04-03 13:23:00 +0200</bug_when>
            <thetext>Just my two cent:

- require able third party scripts should always lay inside the resource folder.
- the build job should add the third party script into the application file respectively part
- linting should by pass third part scripts by default</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43009</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2015-04-07 07:58:22 +0200</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>