<bug>
          <bug_id>5431</bug_id>
          
          <creation_ts>2011-07-21 10:18:00 +0200</creation_ts>
          <short_desc>RFC: Finalization of the Part System</short_desc>
          <delta_ts>2014-03-03 08:48:06 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>1.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          <bug_file_loc>http://manual.qooxdoo.org/1.5.x/pages/development/parts_overview.html</bug_file_loc>
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>id</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>26149</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-07-21 10:18:26 +0200</bug_when>
            <thetext>The part system of qooxdoo (think: qx.io.PartLoader, or see URL) is 
experimental since its inception in qooxdoo 0.8. This bug tries to summarize 
and discuss which features need to be added or finalized, in order to make the 
part system non-experimental. The outcome is open. If concrete features that 
have been identified shall be implemented, dedicated bugs for them should be 
opened.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26150</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-07-21 11:22:31 +0200</bug_when>
            <thetext>Here is my first rough list of open or missing features:

1) You have to specify the boot part:
There is already a bug for this (bug#1979). It would be much nicer if you could 
only specify the *extra* parts, the parts you want to carve out from the entire 
application, and not having to specify the default boot part. Let the system 
(ie. the generator) find that out.

2)  No unnecessary overlaps between job-level &quot;include&quot;, &quot;exclude&quot; keys and 
part-level &quot;include&quot;:
This overlaps with the previous, and ideally it will be resolved when the 
previous topic has been resolved. But this is an important-enough issue on its 
own, so should be taken care of anyway.

3) Easy switching between using and not using parts:
At the moment, it&#39;s an either-or of using parts. If you decide to use parts in 
your app, you have to change your config, so parts will be generated. This is 
ok, and you can easily comment out the whole &quot;packages&quot; key and re-generate the 
app, and you&#39;re rid of parts.
But a much more severe aspect is that you have to instrument the app code to 
use parts: You have to insert qx.io.PartLoader.require() calls at the right 
places. And you don&#39;t want to put them out and back in a couple of times when 
you switch between part using and not. PartLoader.require() does I/O, and the 
functioning of the call-back parameter depends on the availability of the 
loaded code.
There should be a way to e.g. pre-load all parts, and have PartLoader.require() 
fake doing I/O, and just call the call-back, and everything works as expected.

4) Part definition:
There is already an extensive manual section on how to define parts, as this is 
the most crucial part of part usage (besides adding PartLoader.require() calls 
to the code). Building up on that, the generator does extensive sanity checking 
on defined parts to make sure they will be working. - I&#39;m not sure, though, if 
these two means (manual and generator checking) are enough, or the best way to 
come up with working part definitions. Maybe part definition can only be done 
satisfyingly convenient in an *interactive tool* that allows part editing, with 
part validation done while the user is editing them.

5) I18N parts are exotic:
I18N are strangely different to the rest of the part system. They are 
configured by a single(!) config key (packages/i18n-as-parts) which is in stark 
contrast to the verbose configuration necessary for normal parts. While now the 
generation can do its job, almost automatically, the user still has to use 
PartLoader.require() in his code, there is no equivalent automatism here. - I 
wonder if there is an approach that streamlines i18n parts more with the rest 
of the part system. On the other hand, if I18N data loading could be done 
transparently for the user in the background, parts could become a mere 
implementation means, hidden from the user, and the i18n-as-parts key could be 
moved to the compile-options key.

6) Raw packages:
Packages in the part system are calculated by the generator, so users don&#39;t 
have direct control over which classes go into which package (a package might 
consist of multiple .js files, but is the atomic loading unit). But there seem 
to be situations when more control over package content is desired. Maybe this 
should be addressed almost orthogonally to parts. - There is a dedicated 
bug#2797 for this (which also has only RFC-status!).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26151</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-07-21 11:23:10 +0200</bug_when>
            <thetext>modified summary</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26218</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-07-25 09:29:23 +0200</bug_when>
            <thetext>Here is my feedback on your list:

1) As you wrote, nice to have but not really an reason keeping the part system experimental.

2) same as 1)

3) Again, this could ne nice to have but the basic functionality is already there. Anyway, do we really need that? I did never comment out the part stuff during the development of our apps using parts.

4) I would like to disagree. Sure, we can give the app developers a nicer interface to define parts and give them more help. But in the end, they need to know their application, they need to understand whats a part and how they can benefit from that by writing code that can be splited into parts nicely. In my opinion, parts are still and expert topic and thats how they should be treated.

5) This is a good point. But maybe we could have the I18N parts as experimental and move the rest of the part loading  to non experimental.

6) When sometimes that might be a bad thing not knowing whats in a package most of the time its exactly what a user wants. So I think thats also not an issue which should keep the current part system in experimental state.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36134</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:48:06 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>