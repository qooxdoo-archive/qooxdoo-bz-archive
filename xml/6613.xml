<bug>
          <bug_id>6613</bug_id>
          
          <creation_ts>2012-07-10 11:28:00 +0200</creation_ts>
          <short_desc>304 not modified header is not available</short_desc>
          <delta_ts>2014-03-03 08:47:50 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Torsten Wesolek">torsten.wesolek</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>30075</commentid>
            <who name="Torsten Wesolek">torsten.wesolek</who>
            <bug_when>2012-07-10 11:28:51 +0200</bug_when>
            <thetext>Request of http status code while using a rest resource brings a &quot;200&quot; in case the server answers with a &quot;304 - Not Modified&quot; header. Tested in FF, but probably this is a general implementation detail in XHR handling of all browsers.
It would be cool to have a way to recognize a &quot;not modified&quot; to avoid unnecessary UI updates.

May be this could be implemented e.g. in the rest resource or somewhere in the framework by hashing the backend result, caching this hash and compare the hash after next request with the new result hash.

adler32 is a quick hashing algorithm, that could be used. here is an example:

function adler32 (text) {
  var s1 = 1;
  var s2 = 0;
      
  for (var i = 0, il = text.length; i &lt; il; i++) {
    s1 = (s1 + text.charCodeAt(i)) % 65521;
    s2 = (s2 + s1) % 65521;
  }      
  return String((s2 &lt;&lt; 16) | s1);
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36044</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:50 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>