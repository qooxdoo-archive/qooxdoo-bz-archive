<bug>
          <bug_id>4750</bug_id>
          
          <creation_ts>2011-03-08 18:14:00 +0100</creation_ts>
          <short_desc>Add hint about qx.core.Init.getApplication to docs</short_desc>
          <delta_ts>2014-03-03 08:47:24 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.application</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Malte S. Stretz">qooxdoo-bugs</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Tino Butz">tinobutz</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>23154</commentid>
            <who name="Malte S. Stretz">qooxdoo-bugs</who>
            <bug_when>2011-03-08 18:14:21 +0100</bug_when>
            <thetext>Before I learned about qx.core.Init.getApplication() I made my Application a singleton.  That didn&#39;t work, qx.core.Init fell on its face, so I reimplemented the getInstance stuff.  No big hassle, but why not allow &quot;real&quot; singletons for the main Application.

Attached is a trivial patch against trunk (applies cleanly against 1.3.0, too) which allows singleton Applications.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23155</commentid>
              <attachid>908</attachid>
            <who name="Malte S. Stretz">qooxdoo-bugs</who>
            <bug_when>2011-03-08 18:14:58 +0100</bug_when>
            <thetext>Created attachment 908
patch against qx.core.Init</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23157</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-09 08:35:05 +0100</bug_when>
            <thetext>Thanks for the report and the fix, but I think we should keep the API as minimal as possible and as we already have a way to access the application, I think we should stick with that way.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23161</commentid>
            <who name="Malte S. Stretz">qooxdoo-bugs</who>
            <bug_when>2011-03-09 09:12:09 +0100</bug_when>
            <thetext>I don&#39;t see this so much as an extension of the API but making the framework work with an existing part of the API; currently if you make your Application a singleton (there wasn&#39;t a rule anywhere to forbid this and I found qx.core.Init.getApplication() just by accident) simply qooxdoo fails while it could work.

Anyway, your decision.  But what do you think about mentioning qx.core.Init.getApplication() somewhere in the tutorials?  (I first started passing the app to the constructors of all my views and when this got too messy, went for a singleton.)

Another suggestion while I&#39;m here:  What do you think about a marker interface qx.core.ISingleton which gets added to a singleton class so its easier to check for it?  In this case I had to dig into qooxdoo&#39;s guts to find the hidden marker.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23163</commentid>
            <who name="Tino Butz">tinobutz</who>
            <bug_when>2011-03-09 09:51:23 +0100</bug_when>
            <thetext>Hi,

Think about the following scenario:

You want to write two applications that share the same code (native + standalone). Once you use direct access to the singleton application in your code you won&#39;t be able to share the code anymore. With qx.core.Init.getApplication() you can still use the application in your code, without having hard dependencies. =&gt; less errors in the architecture / bad code.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23171</commentid>
              <attachid>911</attachid>
            <who name="Malte S. Stretz">qooxdoo-bugs</who>
            <bug_when>2011-03-09 12:04:10 +0100</bug_when>
            <thetext>Created attachment 911
Revised patch

That&#39;s true.  But my patch doesn&#39;t *force* you to make your Application a singleton and access it through foo.Application.getInstance() instead of qx.core.Init.getApplication().  I concur that the latter is the cleaner approach.  Still I don&#39;t see why it shouldn&#39;t be allowed (though discouraged) to do so.

What do you think about the attached patch which updates the documentation of qx.application.* (most of it is slightly rephrased copypasta from &lt;http://qooxdoo.org/documentation/0.8/generator_config_background#application_startup&gt;)?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>23192</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-03-10 09:13:11 +0100</bug_when>
            <thetext>Adding a hint to the documentation sounds like a good idea. So I reopen the bug and rename it to make sure we have a reminder to add that hint.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35893</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:24 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
          <attachment isobsolete="1" ispatch="1" isprivate="0" isurl="0">
            <attachid>908</attachid>
            <date>2011-03-08 18:14:00 +0100</date>
            <delta_ts>2011-03-09 12:04:10 +0100</delta_ts>
            <desc>patch against qx.core.Init</desc>
            <filename>qooxdoo-1.4-sdk.singleton-app.patch</filename>
            <type>text/plain</type>
            <size>574</size>
            <attacher>qooxdoo-bugs</attacher>
            
              <data encoding="base64">SW5kZXg6IGZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvY29yZS9Jbml0LmpzCj09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0K
LS0tIGZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvY29yZS9Jbml0LmpzCShyZXZpc2lvbiAyNTQy
MykKKysrIGZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvY29yZS9Jbml0LmpzCSh3b3JraW5nIGNv
cHkpCkBAIC04MCw3ICs4MCwxMiBAQAogCiAgICAgICBpZiAoY2xhenopCiAgICAgICB7Ci0gICAg
ICAgIHRoaXMuX19hcHBsaWNhdGlvbiA9IG5ldyBjbGF6ejsKKyAgICAgICAgaWYgKGNsYXp6LiQk
Y2xhc3N0eXBlID09PSAic2luZ2xldG9uIikgeworICAgICAgICAgIHRoaXMuX19hcHBsaWNhdGlv
biA9IGNsYXp6LmdldEluc3RhbmNlKCk7CisgICAgICAgIH0KKyAgICAgICAgZWxzZSB7CisgICAg
ICAgICAgdGhpcy5fX2FwcGxpY2F0aW9uID0gbmV3IGNsYXp6OworICAgICAgICB9CiAKICAgICAg
ICAgdmFyIHN0YXJ0ID0gbmV3IERhdGU7CiAgICAgICAgIHRoaXMuX19hcHBsaWNhdGlvbi5tYWlu
KCk7Cg==
</data>

          </attachment>
          <attachment isobsolete="0" ispatch="1" isprivate="0" isurl="0">
            <attachid>911</attachid>
            <date>2011-03-09 12:04:00 +0100</date>
            <delta_ts>2011-03-09 12:04:10 +0100</delta_ts>
            <desc>Revised patch</desc>
            <filename>qooxdoo-1.3-sdk.bug4750.singleton-app.patch</filename>
            <type>text/plain</type>
            <size>5206</size>
            <attacher>qooxdoo-bugs</attacher>
            
              <data encoding="base64">SW5kZXg6IGZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvY29yZS9Jbml0LmpzCj09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0K
LS0tIGZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvY29yZS9Jbml0LmpzCShyZXZpc2lvbiAyNTQy
MykKKysrIGZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvY29yZS9Jbml0LmpzCSh3b3JraW5nIGNv
cHkpCkBAIC04MCw3ICs4MCwxMiBAQAogCiAgICAgICBpZiAoY2xhenopCiAgICAgICB7Ci0gICAg
ICAgIHRoaXMuX19hcHBsaWNhdGlvbiA9IG5ldyBjbGF6ejsKKyAgICAgICAgaWYgKGNsYXp6LiQk
Y2xhc3N0eXBlID09PSAic2luZ2xldG9uIikgeworICAgICAgICAgIHRoaXMuX19hcHBsaWNhdGlv
biA9IGNsYXp6LmdldEluc3RhbmNlKCk7CisgICAgICAgIH0KKyAgICAgICAgZWxzZSB7CisgICAg
ICAgICAgdGhpcy5fX2FwcGxpY2F0aW9uID0gbmV3IGNsYXp6OworICAgICAgICB9CiAKICAgICAg
ICAgdmFyIHN0YXJ0ID0gbmV3IERhdGU7CiAgICAgICAgIHRoaXMuX19hcHBsaWNhdGlvbi5tYWlu
KCk7CkluZGV4OiBmcmFtZXdvcmsvc291cmNlL2NsYXNzL3F4L2FwcGxpY2F0aW9uL05hdGl2ZS5q
cwo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09Ci0tLSBmcmFtZXdvcmsvc291cmNlL2NsYXNzL3F4L2FwcGxpY2F0aW9uL05h
dGl2ZS5qcwkocmV2aXNpb24gMjU0MjMpCisrKyBmcmFtZXdvcmsvc291cmNlL2NsYXNzL3F4L2Fw
cGxpY2F0aW9uL05hdGl2ZS5qcwkod29ya2luZyBjb3B5KQpAQCAtMjYsNiArMjYsMTMgQEAKIC8q
KgogICogRm9yIGEgTm9uLUdVSSBhcHBsaWNhdGlvbiwgc3VwcG9ydGluZyBsb3ctbGV2ZWwgRE9N
IG9wZXJhdGlvbnMgYW5kIEFKQVgKICAqIGNvbW11bmljYXRpb24uCisgKgorICogU2luY2UgYSBz
aW5nbGUgaW5zdGFuY2Ugb2YgdGhlIGFwcGxpY2F0aW9uIGlzIGdlbmVyYXRlZCB3aGVuIGl0IGlz
IGxvYWRlZCwKKyAqIGl0IGNhbiBiZSBkZWNsYXJlZCBhcyBhIHNpbmdsZXRvbi4gVGhlIHByZWZl
cnJlZCB3YXkgdG8gYWNjZXNzIHRoaXMgCisgKiBpbnN0YW5jZSBpcyB2aWEge0BsaW5rIHF4LmNv
cmUuSW5pdC5nZXRBcHBsaWNhdGlvbn0gdGhvdWdoLgorICoKKyAqIFBsZWFzZSByZWZlciB0byB7
QGxpbmsgcXguYXBwbGljYXRpb259IGZvciBhIGdlbmVyYWwgZGlzY3Vzc2lvbiBvZiBob3cgdGhl
CisgKiBhcHBsaWNhdGlvbiBpcyBjcmVhdGVkIGFuZCBob3cgaXQgY2FuIGJlIGFjY2Vzc2VkLgog
ICovCiBxeC5DbGFzcy5kZWZpbmUoInF4LmFwcGxpY2F0aW9uLk5hdGl2ZSIsCiB7CkluZGV4OiBm
cmFtZXdvcmsvc291cmNlL2NsYXNzL3F4L2FwcGxpY2F0aW9uL0Fic3RyYWN0R3VpLmpzCj09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT0KLS0tIGZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvYXBwbGljYXRpb24vQWJzdHJhY3RH
dWkuanMJKHJldmlzaW9uIDI1NDIzKQorKysgZnJhbWV3b3JrL3NvdXJjZS9jbGFzcy9xeC9hcHBs
aWNhdGlvbi9BYnN0cmFjdEd1aS5qcwkod29ya2luZyBjb3B5KQpAQCAtMjUsNiArMjUsOSBAQAog
CiAvKioKICAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIEdVSSBhcHBsaWNhdGlvbnMgdXNpbmcg
cW9veGRvbyB3aWRnZXRzLgorICoKKyAqIFBsZWFzZSByZWZlciB0byB7QGxpbmsgcXguYXBwbGlj
YXRpb259IGZvciBhIGdlbmVyYWwgZGlzY3Vzc2lvbiBvZiBob3cgdGhlCisgKiBhcHBsaWNhdGlv
biBpcyBjcmVhdGVkIGFuZCBob3cgaXQgY2FuIGJlIGFjY2Vzc2VkLgogICovCiBxeC5DbGFzcy5k
ZWZpbmUoInF4LmFwcGxpY2F0aW9uLkFic3RyYWN0R3VpIiwKIHsKSW5kZXg6IGZyYW1ld29yay9z
b3VyY2UvY2xhc3MvcXgvYXBwbGljYXRpb24vU3RhbmRhbG9uZS5qcwo9PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0tLSBm
cmFtZXdvcmsvc291cmNlL2NsYXNzL3F4L2FwcGxpY2F0aW9uL1N0YW5kYWxvbmUuanMJKHJldmlz
aW9uIDI1NDIzKQorKysgZnJhbWV3b3JrL3NvdXJjZS9jbGFzcy9xeC9hcHBsaWNhdGlvbi9TdGFu
ZGFsb25lLmpzCSh3b3JraW5nIGNvcHkpCkBAIC0zMSw2ICszMSw5IEBACiAgKiBkeW5hbWljYWxs
eS4gT2Z0ZW4gaXQgaXMgY2FsbGVkIGEgInNpbmdsZS1wYWdlIGFwcGxpY2F0aW9uIiwgc2luY2Ug
dGhlCiAgKiBkb2N1bWVudCBpdHNlbGYgaXMgbmV2ZXIgcmVsb2FkZWQgb3IgY2hhbmdlZC4gQ29t
bXVuaWNhdGlvbiB3aXRoIHRoZSBzZXJ2ZXIKICAqIGlzIGRvbmUgd2l0aCBBSkFYLgorICoKKyAq
IFBsZWFzZSByZWZlciB0byB7QGxpbmsgcXguYXBwbGljYXRpb259IGZvciBhIGdlbmVyYWwgZGlz
Y3Vzc2lvbiBvZiBob3cgdGhlCisgKiBhcHBsaWNhdGlvbiBpcyBjcmVhdGVkIGFuZCBob3cgaXQg
Y2FuIGJlIGFjY2Vzc2VkLgogICovCiBxeC5DbGFzcy5kZWZpbmUoInF4LmFwcGxpY2F0aW9uLlN0
YW5kYWxvbmUiLAogewpJbmRleDogZnJhbWV3b3JrL3NvdXJjZS9jbGFzcy9xeC9hcHBsaWNhdGlv
bi9JQXBwbGljYXRpb24uanMKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLS0gZnJhbWV3b3JrL3NvdXJjZS9jbGFzcy9x
eC9hcHBsaWNhdGlvbi9JQXBwbGljYXRpb24uanMJKHJldmlzaW9uIDI1NDIzKQorKysgZnJhbWV3
b3JrL3NvdXJjZS9jbGFzcy9xeC9hcHBsaWNhdGlvbi9JQXBwbGljYXRpb24uanMJKHdvcmtpbmcg
Y29weSkKQEAgLTE5LDYgKzE5LDkgQEAKIAogLyoqCiAgKiBUaGlzIGludGVyZmFjZSBkZWZpbmVz
IHdoYXQgYW4gYXBwbGljYXRpb24gY2xhc3MgaGFzIHRvIGltcGxlbWVudC4KKyAqCisgKiBQbGVh
c2UgcmVmZXIgdG8ge0BsaW5rIHF4LmFwcGxpY2F0aW9ufSBmb3IgYSBnZW5lcmFsIGRpc2N1c3Np
b24gb2YgaG93IHRoZQorICogYXBwbGljYXRpb24gaXMgY3JlYXRlZCBhbmQgaG93IGl0IGNhbiBi
ZSBhY2Nlc3NlZC4KICAqLwogcXguSW50ZXJmYWNlLmRlZmluZSgicXguYXBwbGljYXRpb24uSUFw
cGxpY2F0aW9uIiwKIHsKSW5kZXg6IGZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvYXBwbGljYXRp
b24vSW5saW5lLmpzCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT0KLS0tIGZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvYXBw
bGljYXRpb24vSW5saW5lLmpzCShyZXZpc2lvbiAyNTQyMykKKysrIGZyYW1ld29yay9zb3VyY2Uv
Y2xhc3MvcXgvYXBwbGljYXRpb24vSW5saW5lLmpzCSh3b3JraW5nIGNvcHkpCkBAIC0yOSw2ICsy
OSw5IEBACiAgKiBUaGUgaWRlYWwgZW52aXJvbm1lbnQgZm9yIHR5cGljYWwgcG9ydGFsIHNpdGVz
IHdoaWNoIHVzZSBqdXN0IGEgZmV3IHFvb3hkb28KICAqIHdpZGdldHMuIHtAbGluayBxeC51aS5y
b290LklubGluZX0gY2FuIGJlIHVzZWQgdG8gZW1iZWQgcW9veGRvbyB3aWRnZXRzCiAgKiBpbnRv
IHRoZSBwYWdlIGZsb3cuCisgKgorICogUGxlYXNlIHJlZmVyIHRvIHtAbGluayBxeC5hcHBsaWNh
dGlvbn0gZm9yIGEgZ2VuZXJhbCBkaXNjdXNzaW9uIG9mIGhvdyB0aGUKKyAqIGFwcGxpY2F0aW9u
IGlzIGNyZWF0ZWQgYW5kIGhvdyBpdCBjYW4gYmUgYWNjZXNzZWQuCiAgKi8KIHF4LkNsYXNzLmRl
ZmluZSgicXguYXBwbGljYXRpb24uSW5saW5lIiwKIHsKSW5kZXg6IGZyYW1ld29yay9zb3VyY2Uv
Y2xhc3MvcXgvYXBwbGljYXRpb24vX19pbml0X18uanMKPT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLS0gZnJhbWV3b3Jr
L3NvdXJjZS9jbGFzcy9xeC9hcHBsaWNhdGlvbi9fX2luaXRfXy5qcwkocmV2aXNpb24gMjU0MjMp
CisrKyBmcmFtZXdvcmsvc291cmNlL2NsYXNzL3F4L2FwcGxpY2F0aW9uL19faW5pdF9fLmpzCSh3
b3JraW5nIGNvcHkpCkBAIC0yLDQgKzIsMjAgQEAKICAqIFZhcmlvdXMgYXBwbGljYXRpb24gdHlw
ZXMgZm9yIGRpZmZlcmVudCBzY2VuYXJpb3MsIGZyb20gbm9uLUdVSSB0byBsb3ctbGV2ZWwgCiAg
KiB0byBSSUE7IHVzZSB0aGVzZSBhcyBzdXBlci1jbGFzc2VzIGZvciB5b3VyIG1haW4gYXBwbGlj
YXRpb24gY2xhc3MuCiAgKgorICogQW4gYXBwbGljYXRpb24gYXMgc2VlbiBmcm9tIHRoZSBxb294
ZG9vIHBvaW50IG9mIHZpZXcgaXMganVzdCBhIHNldCBvZiAKKyAqIGNsYXNzZXMgdGhhdCBhcmUg
cnVuIG9uIHRvcCBvZiB3aGF0IGNvdWxkIGJlIGNhbGxlZCB0aGUgcW9veGRvbyBydW50aW1lIAor
ICogc3lzdGVtLiBXaGVuIHRoZSBhcHBsaWNhdGlvbiBpcyBsb2FkZWQsIHtAbGluayBxeC5Cb290
c3RyYXB9IGZpcnN0IAorICogZXN0YWJsaXNoZXMgYW5kIHN0YXJ0cyBhIHJ1bnRpbWUgZW52aXJv
bm1lbnQuCisgKgorICogT25jZSB0aGlzIGlzIGVzdGFibGlzaGVkLCB0aGUge0BsaW5rIHF4LmNv
cmUuSW5pdH0gc3RhcnRzIHRoZQorICogPGNvZGU+bWFpbigpPC9jb2RlPiBtZXRob2Qgb2YgeW91
ciBhcHBsaWNhdGlvbiBjbGFzcyAobWFkZSBrbm93biB0byBpdCAKKyAqIHRocm91Z2ggdGhlIDxj
b2RlPnF4LmFwcGxpY2F0aW9uPC9jb2RlPiBzZXR0aW5nKS4gRnJvbSB0aGVyZSwgdGhlIAorICog
YXBwbGljYXRpb24gY2xhc3NlcyB0YWtlIG92ZXIgYW5kIGNyZWF0ZSB0aGUgYXBwbGljYXRpb24s
IHRocm91Z2ggCisgKiBpbnN0YW50aWF0aW5nIGZ1cnRoZXIgY2xhc3Nlcywgc2V0dGluZyBwcm9w
ZXJ0aWVzIGFuZCBpbnZva2luZyBtZXRob2RzIAorICogb24gdGhlbSAoc2VlIHtAbGluayBxeC5h
cHBsaWNhdGlvbi5JQXBwbGljYXRpb259IGZvciBkZXRhaWxzKS4KKyAqCisgKiBTaW5jZSBhIHNp
bmdsZSBpbnN0YW5jZSBvZiB5b3VyIGFwcGxpY2F0aW9uIGNsYXNzIGlzIGNyZWF0ZWQgb24gc3Rh
cnR1cCwKKyAqIGl0IGNvdWxkIGJlIGRlY2xhcmVkIGFzIGEgc2luZ2xldG9uLiBUaGUgcHJlZmVy
cmVkIHdheSB0byBhY2Nlc3MgdGhpcyAKKyAqIGluc3RhbmNlIGlzIHZpYSB0aGUgc3RhdGljIG1l
dGhvZCA8Y29kZT5nZXRBcHBsaWNhdGlvbigpPC9jb2RlPiBpbgorICoge0BsaW5rIHF4LmNvcmUu
SW5pdH0gdGhvdWdoLgogICovCg==
</data>

          </attachment>
      

    </bug>