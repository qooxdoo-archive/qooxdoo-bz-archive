<bug>
          <bug_id>3839</bug_id>
          
          <creation_ts>2010-07-06 16:25:00 +0200</creation_ts>
          <short_desc>Extend the support for comment annotations to the generator so that it’s “lint” job can validate code better and erase some common programming errors</short_desc>
          <delta_ts>2014-03-03 08:47:32 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>1.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="John Spackman">john.spackman</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>19159</commentid>
            <who name="John Spackman">john.spackman</who>
            <bug_when>2010-07-06 16:25:39 +0200</bug_when>
            <thetext>Because Javascript is not declarative and objects can have properties and methods added at runtime, there is very little syntax checking that can be performed on JS code beyond basic compliance with the language syntax – i.e. there is no mechanism to [declaratively] ensure that an object is of the expected type, or that a function parameter or return value is mandatory.

As a result, the generator’s “lint” job is largely ineffective at identifying problems before the browser throws up a runtime error and with large applications that go via a server backend there can be hundreds of requests to satisfy before getting to the first error; you fix it, refresh and wait again and get the second error.  Alt-Tab hell, and that’s assuming your error pops up straight away and you don’t need to log in etc to get to the code to test.

Qx already uses comment annotations for documentation and this information could be used by the generator for enhanced lint-style checks on the code; for example, a compile-time check that a value is returned from a function, or a runtime-check that all required parameters are provided (EG add a wrapper for the function for “source” builds).

One of the features of JS is that we can add properties and methods at runtime, which in some ways is against the ethos of the Qx class system – there’s a doc somewhere that points out the benefits of properties and always using getXxxx()/setXxxx() methods as opposed to just hacking in extra member variables, and it’s generally considered good practice to define a class properly and to follow declared access rules.  If the comment annotations declared the class of a property or return value, the generator could then check the calling code at _compile-time_ to check that the method exists and that all mandatory parameters are passed, and also add a wrapper function with runtime type checks (for the “source” build only).

This is dependent on declarations in the comments saying what types are passed in and out, but where declared the generator can correctly validate object classes, methods, parameters, and return types.

If the comment is missing or does not specify type information, then the generator does nothing because it cannot check.

Advantages
----------
The ultimate goal would be to be able to bring an element of reliable type safety to JS development, which would be fantastic in reduced development costs and less hair torn out.

A quick google for “javascript type safe” reveals nothing obvious except for convoluted design patterns which could be said to obfuscate the code rather than help (and isn’t that what compilers were invented for anyway?); anyone looking to build reliable, tested code will love this addition and Qooxdoo will be the first project to really bring this aspect of development to the client.

It&#39;s backward compatible in that it doesn&#39;t have to be used unless specifically wanted, and doesn&#39;t have to be retrofitted because the documentation convention was established a long time ago and it is already a Qx goal to have complete, annotated documentation.

Disadvantages
-------------
Feedback on the warnings from the generator has been varied – Thomas has said that:

“NB: We had interesting feedback on warnings so far. Some people are disturbed by them, mistaking them as errors and find it hard to judge their relevance correctly. Others are annoyed and are not interested in them at all. &lt;sigh&gt;...”

So it seems that it would be a good idea to make these checks part of a special job, especially as it is placing restrictions on what constitutes “legal” javascript.  It would also be important to be able to ignore specific warnings inline or to ignore types of warnings everywhere - EG inline with an “@lint [param...]” comment annotation and global in the generator config.json.

Bonuses
-------
One thought is that continuous compilation would be easy(ish) to achievable by using Jython to constantly run the generator in the background of Eclipse or Netbeans with plugins; Visual Studio and other IDE would presumably have some other hook for external validation.

By using Jython, the generator could be made to never unload it&#39;s cache (from memory) and then just recompile the modified classes....but I digress :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35939</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:32 +0100</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>