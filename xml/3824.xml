<bug>
          <bug_id>3824</bug_id>
          
          <creation_ts>2010-07-02 08:37:00 +0200</creation_ts>
          <short_desc>Speed up scrolling performance</short_desc>
          <delta_ts>2010-08-12 08:21:47 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.form</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>1.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Wittemann">martin.wittemann</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>dietrich.streifert</cc>
    
    <cc>qooxdoo</cc>
    
    <cc>tobi</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>19094</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-02 08:37:03 +0200</bug_when>
            <thetext>To spped up scrolling performance, Tobi came up with a good idea and a patch on the mailinglist [1]. His main idea is to reduce the amount of change events fired to 50% depending on the time the events come in. 

[1] http://qooxdoo.678.n2.nabble.com/patch-scrollbar-performance-td5243590.html#a5243590</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19095</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-02 08:38:17 +0200</bug_when>
            <thetext>Accept</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19096</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-02 08:45:28 +0200</bug_when>
            <thetext>Applied the patch with r22572.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19107</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-02 10:24:08 +0200</bug_when>
            <thetext>Checking the unit tests showed that it&#39;s not the best idea to use this behavior for all sliders. Especially the regular slider should not have it. I added a property to switch the behavior and the default is the old behavior for the slider and the new behavior for all scrollbars.

trunk: r22574</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19121</commentid>
            <who name="Tobias Oetiker">tobi</who>
            <bug_when>2010-07-02 15:20:25 +0200</bug_when>
            <thetext>tonight I had another idea, how about a special type of event which would adapt its rate according to the time it spends executing all its listeners ... it could be fired at will but it would get dropped in a similar style as the events do not even get fired in this implementation. The advantage would be that the behavior could be easily added to other gui elements like window resizing, splitter moving, window dragging ... 

also, I was wondering if maybe the render queue should get flushed prior to measuring the time for firing the event since the timing might be too optimistic otherwise ... 
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19122</commentid>
            <who name="Tobias Oetiker">tobi</who>
            <bug_when>2010-07-02 15:31:51 +0200</bug_when>
            <thetext>on a further note, it might be interesting to fire an extra event as capture mode gets ended. by doing that you can be sure that the final slider/scollbar position has been &#39;transmitted&#39; to all interested parties and thus probably take care of the issue which you saw with the slider.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19126</commentid>
            <who name="Dietrich Streifert">dietrich.streifert</who>
            <bug_when>2010-07-02 16:43:40 +0200</bug_when>
            <thetext>Sorry for reopening this bug, but this optimization seems to break mousewheel behaviour in qx.ui.Table. In my app turning the mousewheel in one direction works for some scrolls and then it stops scrolling. After scrolling in the other direction a few rows it works again.

Tested with rev. 22588 of trunc with source and build version.

Reverting to rev. 22571 stops the missbehaviour.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19127</commentid>
            <who name="Tobias Oetiker">tobi</who>
            <bug_when>2010-07-02 17:04:33 +0200</bug_when>
            <thetext>I would suggest only activating this function while the Slider is in capture mode.
that should take care of the mousewheel problem.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19130</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-05 09:10:45 +0200</bug_when>
            <thetext>Thanks for reopening Dietrich. I will take care of it as soon as I&#39;m back in the office.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19269</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-13 09:41:23 +0200</bug_when>
            <thetext>(In reply to comment #6)
&gt; Sorry for reopening this bug, but this optimization seems to break mousewheel
&gt; behaviour in qx.ui.Table. In my app turning the mousewheel in one direction
&gt; works for some scrolls and then it stops scrolling. After scrolling in the
&gt; other direction a few rows it works again.
&gt; 
&gt; Tested with rev. 22588 of trunc with source and build version.
&gt; 
&gt; Reverting to rev. 22571 stops the missbehaviour.

I&#39;m sorry but I can&#39;t reproduce the behavior you describe. What browser did you use for your test? Safari 5 on my mac worked as expected.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19284</commentid>
            <who name="Dietrich Streifert">dietrich.streifert</who>
            <bug_when>2010-07-13 14:11:05 +0200</bug_when>
            <thetext>(In reply to comment #9)
&gt; 
&gt; I&#39;m sorry but I can&#39;t reproduce the behavior you describe. What browser did you
&gt; use for your test? Safari 5 on my mac worked as expected.

I&#39;ve used the demobrowser with FireFox 3.6.6 on Windows Vista x64:

http://demo.qooxdoo.org/devel/demobrowser/#table~Table_Huge.html

To reproduce do the following: Refresh the page. Place the mouse over the table rows and scroll down using the scroll wheel. After scrolling a few lines scrolling stops. Please be sure that you turn the wheel only in one direction as changing the direction seems to reinitialize some scrolling values so scrolling down works again.

Also reproducable on Windows Vista x86 with Safari 5.0, IE 8, Opera 10.6.

I&#39;ve also tested this on Mac OS X with Safari 5.0 and Firefox 3.6.6 and you&#39;re right! This bug does not occur here. So this seems to be specific to Windows (Vista x64?).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19299</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-14 09:59:07 +0200</bug_when>
            <thetext>This patch seems to get us more trouble in the framework as we expected. Thats why I reverted the initial commits with r22691. Sorry tobi but we can&#39;t keep it in as long as more and more errors are appearing.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19307</commentid>
            <who name="Tobias Oetiker">tobi</who>
            <bug_when>2010-07-14 14:34:50 +0200</bug_when>
            <thetext>as I said, there are two additions required.

a) only activate in drag mode (simple)
b) make sure the final value fires an event (by introducing a timer).

see the attached patch. It takes care of both the scroll wheel problem (a) and the &quot;not scrolling to the end of the table/tree&quot; problem (b).

cheers
tobi</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19308</commentid>
              <attachid>767</attachid>
            <who name="Tobias Oetiker">tobi</who>
            <bug_when>2010-07-14 14:35:47 +0200</bug_when>
            <thetext>Created attachment 767
slider patch v2 as described in comment</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19312</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-07-14 16:47:53 +0200</bug_when>
            <thetext>reopened to account for Tobi&#39;s 2nd patch.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19318</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-15 08:25:31 +0200</bug_when>
            <thetext>I just checked your second patch. But I have to say I still can&#39;t apply it because it changes some details on the current API.
Currently the event is fired by the property system which means it&#39;s a data event containing the value and the old value. If we apply your patch, the old value is not always present which may break the code of existing applications.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19319</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-15 08:29:05 +0200</bug_when>
            <thetext>Just a little reminder: we should take care that we don&#39;t introduce bug #3857 again.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19321</commentid>
              <attachid>768</attachid>
            <who name="Tobias Oetiker">tobi</who>
            <bug_when>2010-07-15 08:39:13 +0200</bug_when>
            <thetext>Created attachment 768
fully event based dragging ... alternate variant

tonight I had this idea ... why not have drag events fired by the timer exclusively ...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19322</commentid>
            <who name="Tobias Oetiker">tobi</who>
            <bug_when>2010-07-15 08:40:50 +0200</bug_when>
            <thetext>(In reply to comment #15)
&gt; I just checked your second patch. But I have to say I still can&#39;t apply it
&gt; because it changes some details on the current API.
&gt; Currently the event is fired by the property system which means it&#39;s a data
&gt; event containing the value and the old value. If we apply your patch, the old
&gt; value is not always present which may break the code of existing applications.

hmmm where do you see that ? I am storing the new and old value away in the _apply method and fire it later ... why would old be null ? (same is true for patch v3).

cheers
tobi</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19323</commentid>
            <who name="Tobias Oetiker">tobi</who>
            <bug_when>2010-07-15 08:42:58 +0200</bug_when>
            <thetext>(In reply to comment #16)
&gt; Just a little reminder: we should take care that we don&#39;t introduce bug #3857
&gt; again.

this is taken care of by the event fired as drag mode ends ...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19326</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-15 09:43:45 +0200</bug_when>
            <thetext>(In reply to comment #19)
&gt; (In reply to comment #16)
&gt; &gt; Just a little reminder: we should take care that we don&#39;t introduce bug #3857
&gt; &gt; again.
&gt; 
&gt; this is taken care of by the event fired as drag mode ends ...

I know. :) Its just a remember for myself to check that the patch is working.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19329</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-07-15 11:25:36 +0200</bug_when>
            <thetext>(In reply to comment #18)
&gt; hmmm where do you see that ? I am storing the new and old value away in the
&gt; _apply method and fire it later ... why would old be null ? (same is true for
&gt; patch v3).
&gt; 
&gt; cheers
&gt; tobi

Sorry, I was wrong. I applied the patch to trunk and everything seems to be ok (unit tests and scrolling test).

trunk: r22702</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="1" isprivate="0" isurl="0">
            <attachid>767</attachid>
            <date>2010-07-14 14:35:00 +0200</date>
            <delta_ts>2010-07-14 14:35:47 +0200</delta_ts>
            <desc>slider patch v2 as described in comment</desc>
            <filename>slider-patch-v2</filename>
            <type>text/plain</type>
            <size>3474</size>
            <attacher>tobi</attacher>
            
              <data encoding="base64">LS0tIFNsaWRlci5qcy5vcmlnCTIwMTAtMDQtMjIgMTU6MTM6MjkuMDAwMDAwMDAwICswMjAwCisr
KyBTbGlkZXIuanMJMjAxMC0wNy0xNCAxNDoyNToxOS4zNzc3NzA2MzEgKzAyMDAKQEAgLTEwNSw3
ICsxMDUsOSBAQAogICB9LAogCiAKLQorICBldmVudHMgOiB7CisgICAgY2hhbmdlVmFsdWU6ICdx
eC5ldmVudC50eXBlLkRhdGEnCisgIH0sCiAKICAgLyoKICAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
QEAgLTE1Miw3ICsxNTQsNiBAQAogICAgICAgY2hlY2sgOiAidHlwZW9mIHZhbHVlPT09J251bWJl
cicmJnZhbHVlPj10aGlzLmdldE1pbmltdW0oKSYmdmFsdWU8PXRoaXMuZ2V0TWF4aW11bSgpIiwK
ICAgICAgIGluaXQgOiAwLAogICAgICAgYXBwbHkgOiAiX2FwcGx5VmFsdWUiLAotICAgICAgZXZl
bnQgOiAiY2hhbmdlVmFsdWUiLAogICAgICAgbnVsbGFibGU6IHRydWUKICAgICB9LAogCkBAIC0y
MzcsNyArMjM4LDkgQEAKICAgICBfX3RyYWNraW5nRGlyZWN0aW9uIDogbnVsbCwKICAgICBfX3Ry
YWNraW5nRW5kIDogbnVsbCwKICAgICBfX3RpbWVyIDogbnVsbCwKLQorICAgIF9fZHJhZ1RpbWVy
OiBudWxsLAorICAgIF9fbmV4dFZhbHVlRXZlbnQ6IDAsCisgICAgX19ldmVudFZhbHVlU2tpcHBl
ZDogbnVsbCwKIAogICAgIC8vIG92ZXJyaWRkZW4KICAgICAvKioKQEAgLTM5Miw3ICszOTUsMTEg
QEAKICAgICAgIHsKICAgICAgICAgLy8gU3dpdGNoIGludG8gZHJhZyBtb2RlCiAgICAgICAgIHRo
aXMuX19kcmFnTW9kZSA9IHRydWU7Ci0KKyAgICAgICAgaWYgKCF0aGlzLl9fdmFsdWVUaW1lcil7
CisgICAgICAgICAgLy8gY3JlYXRlIGEgdGltZXIgdG8gZmlyZSBkZWxheWVkIGRyYWdnaW5nIGV2
ZW50cyBpZiBkcmFnZ2luZyBzdG9wcy4KKyAgICAgICAgICB0aGlzLl9fdmFsdWVUaW1lciA9IG5l
dyBxeC5ldmVudC5UaW1lcigxMDAwMCk7IAorICAgICAgICAgIHRoaXMuX192YWx1ZVRpbWVyLmFk
ZExpc3RlbmVyKCdpbnRlcnZhbCcsdGhpcy5fZmlyZVZhbHVlLHRoaXMpOworICAgICAgICB9CiAg
ICAgICAgIC8vIENvbXB1dGUgZHJhZ09mZnNldCAoaW5jbHVkZXMgYm90aDogaW5uZXIgcG9zaXRp
b24gb2YgdGhlIHdpZGdldCBhbmQKICAgICAgICAgLy8gY3Vyc29yIHBvc2l0aW9uIG9uIGtub2Ip
CiAgICAgICAgIHRoaXMuX19kcmFnT2Zmc2V0ID0gY3Vyc29yTG9jYXRpb24gKyBzbGlkZXJMb2Nh
dGlvbiAtIGtub2JMb2NhdGlvbjsKQEAgLTQ1Miw2ICs0NTksMTMgQEAKIAogICAgICAgICAvLyBD
bGVhbnVwIHN0YXR1cyBmbGFncwogICAgICAgICBkZWxldGUgdGhpcy5fX2RyYWdNb2RlOworICAg
ICAgICAvLyBhcyB3ZSBjb21lIG91dCBvZiBkcmFnIG1vZGUsIG1ha2UKKyAgICAgICAgLy8gc3Vy
ZSBjb250ZW50IGdldHMgc3luY2VkCisKKyAgICAgICAgaWYgKHRoaXMuX19ldmVudFZhbHVlU2tp
cHBlZCl7CisgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2NoYW5nZVZhbHVlJyxxeC5ldmVudC50
eXBlLkRhdGEsdGhpcy5fX2V2ZW50VmFsdWVTa2lwcGVkKTsKKyAgICAgICAgICB0aGlzLl9fZXZl
bnRWYWx1ZVNraXBwZWQgPSBudWxsOworICAgICAgICB9ICAgICAgICAKICAgICAgICAgZGVsZXRl
IHRoaXMuX19kcmFnT2Zmc2V0OwogCiAgICAgICAgIC8vIHJlbW92ZSBzdGF0ZQpAQCAtNDg1LDcg
KzQ5OSw3IEBACiAgICAgICAgICAgICB0aGlzLmdldENoaWxkQ29udHJvbCgia25vYiIpLnJlbW92
ZVN0YXRlKCJob3ZlcmVkIik7CiAgICAgICAgICAgfQogICAgICAgICB9Ci0KKyAgICAgICAgCiAg
ICAgICB9CiAgICAgICBlbHNlIGlmICh0aGlzLl9fdHJhY2tpbmdNb2RlKQogICAgICAgewpAQCAt
OTc5LDEyICs5OTMsNDEgQEAKICAgICBfYXBwbHlWYWx1ZSA6IGZ1bmN0aW9uKHZhbHVlLCBvbGQp
IHsKICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7CiAgICAgICAgIHRoaXMuX3VwZGF0ZUtub2JQ
b3NpdGlvbigpOworICAgICAgICB2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgICAg
ICAgICAgICAgICAKKyAgICAgICAgLy8gbW9kZXJhdGUgIG91cnNlbGZlcyBpbiBmaXJlcmluZyBl
dmVudHMuIG9ubHkgc3BlbmQKKyAgICAgICAgLy8gYSBtYXhpbXVtIG9mIDUwJSBvZiB0aGUgdGlt
ZSBwcm9jZXNzaW5nIHRoZSBldmVudCBoYW5kbGVycyAgICAgICAgICAgCisgICAgICAgIGlmICh0
aGlzLl9fZHJhZ01vZGUgJiYgc3RhcnQgPCB0aGlzLl9fbmV4dFZhbHVlRXZlbnQpeworICAgICAg
ICAgIHRoaXMuX19ldmVudFZhbHVlU2tpcHBlZCA9IFt2YWx1ZSxvbGRdOworICAgICAgICAgIHRo
aXMuX192YWx1ZVRpbWVyLnN0b3AoKTsKKyAgICAgICAgICB0aGlzLl9fdmFsdWVUaW1lci5zZXRJ
bnRlcnZhbChwYXJzZUludCgodGhpcy5fX25leHRWYWx1ZUV2ZW50IC0gc3RhcnQpKjEuMikpOwor
ICAgICAgICAgIHRoaXMuX192YWx1ZVRpbWVyLnN0YXJ0KCk7CisgICAgICAgICAgcmV0dXJuOwor
ICAgICAgICB9CisgICAgICAgIGlmICh0aGlzLl9fZHJhZ01vZGUpeworCSAgdGhpcy5fX3ZhbHVl
VGltZXIuc3RvcCgpOworICAgICAgICAgIHRoaXMuX19ldmVudFZhbHVlU2tpcHBlZCA9IG51bGw7
CisgICAgICAgIH0KKyAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2NoYW5nZVZhbHVlJyxxeC5ldmVu
dC50eXBlLkRhdGEsW3ZhbHVlLCBvbGRdKTsKKyAgICAgICAgLy8gd2hlbiBkcmFnaW5nLCBtYWtl
IHN1cmUgYWxsIHNjcmVlbiB1cGRhdGVzIGFyZSBhcHBsaWVkIGJlZm9yZSBtZWFzdXJpbmcgY3lj
bGUgdGltZQorICAgICAgICBpZiAodGhpcy5fX2RyYWdNb2RlKXsKKyAgICAgICAgICBxeC51aS5j
b3JlLnF1ZXVlLk1hbmFnZXIuZmx1c2goKTsKKyAgICAgICAgICAvLyBtYWtlIGEgbm90ZSB3aGVu
IHJlYWR5IHRvIHNlbmQgdGhlIG5leHQgZXZlbnQKKyAgICAgICAgICB2YXIgZHVyYXRpb24gPSBu
ZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0OyAgICAgICAgCisgICAgICAgICAgdGhpcy5fX25l
eHRWYWx1ZUV2ZW50ID0gc3RhcnQgKyBkdXJhdGlvbiAqIDI7CisgICAgICAgIH0KICAgICAgIH0g
ZWxzZSB7CiAgICAgICAgIHRoaXMucmVzZXRWYWx1ZSgpOwogICAgICAgfQogICAgIH0sCiAKLQor
ICAgIF9maXJlVmFsdWU6IGZ1bmN0aW9uKGUpeworICAgICAgdGhpcy5fX3ZhbHVlVGltZXIuc3Rv
cCgpOworICAgICAgaWYgKHRoaXMuX19ldmVudFZhbHVlU2tpcHBlZCl7CisgICAgICAgIHRoaXMu
ZmlyZUV2ZW50KCdjaGFuZ2VWYWx1ZScscXguZXZlbnQudHlwZS5EYXRhLHRoaXMuX19ldmVudFZh
bHVlU2tpcHBlZCk7CisgICAgICAgIHRoaXMuX19ldmVudFZhbHVlU2tpcHBlZCA9IG51bGw7Cisg
ICAgICB9CisgICAgfSwKKyAgICAgICAgICAgICAgICAgICAgICAKICAgICAvLyBwcm9wZXJ0eSBh
cHBseQogICAgIF9hcHBseU1pbmltdW0gOiBmdW5jdGlvbih2YWx1ZSwgb2xkKQogICAgIHsK
</data>

          </attachment>
          <attachment isobsolete="0" ispatch="1" isprivate="0" isurl="0">
            <attachid>768</attachid>
            <date>2010-07-15 08:39:00 +0200</date>
            <delta_ts>2010-07-15 08:39:13 +0200</delta_ts>
            <desc>fully event based dragging ... alternate variant</desc>
            <filename>slider-patch-v3</filename>
            <type>text/plain</type>
            <size>2997</size>
            <attacher>tobi</attacher>
            
              <data encoding="base64">LS0tIFNsaWRlci5qcy5vcmlnCTIwMTAtMDQtMjIgMTU6MTM6MjkuMDAwMDAwMDAwICswMjAwCisr
KyBTbGlkZXIuanMJMjAxMC0wNy0xNSAwODozNjo0NS40MzY3Mjc5ODMgKzAyMDAKQEAgLTEwNSw3
ICsxMDUsOSBAQAogICB9LAogCiAKLQorICBldmVudHMgOiB7CisgICAgY2hhbmdlVmFsdWU6ICdx
eC5ldmVudC50eXBlLkRhdGEnCisgIH0sCiAKICAgLyoKICAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
QEAgLTE1Miw3ICsxNTQsNiBAQAogICAgICAgY2hlY2sgOiAidHlwZW9mIHZhbHVlPT09J251bWJl
cicmJnZhbHVlPj10aGlzLmdldE1pbmltdW0oKSYmdmFsdWU8PXRoaXMuZ2V0TWF4aW11bSgpIiwK
ICAgICAgIGluaXQgOiAwLAogICAgICAgYXBwbHkgOiAiX2FwcGx5VmFsdWUiLAotICAgICAgZXZl
bnQgOiAiY2hhbmdlVmFsdWUiLAogICAgICAgbnVsbGFibGU6IHRydWUKICAgICB9LAogCkBAIC0y
MzcsNyArMjM4LDkgQEAKICAgICBfX3RyYWNraW5nRGlyZWN0aW9uIDogbnVsbCwKICAgICBfX3Ry
YWNraW5nRW5kIDogbnVsbCwKICAgICBfX3RpbWVyIDogbnVsbCwKLQorICAgIF9fZHJhZ1RpbWVy
OiBudWxsLAorICAgIF9fbGFzdFZhbHVlRXZlbnQ6IG51bGwsCisgICAgX19kcmFnVmFsdWU6IG51
bGwsCiAKICAgICAvLyBvdmVycmlkZGVuCiAgICAgLyoqCkBAIC0zOTIsNyArMzk1LDEyIEBACiAg
ICAgICB7CiAgICAgICAgIC8vIFN3aXRjaCBpbnRvIGRyYWcgbW9kZQogICAgICAgICB0aGlzLl9f
ZHJhZ01vZGUgPSB0cnVlOwotCisgICAgICAgIGlmICghdGhpcy5fX2RyYWdUaW1lcil7CisgICAg
ICAgICAgLy8gY3JlYXRlIGEgdGltZXIgdG8gZmlyZSBkZWxheWVkIGRyYWdnaW5nIGV2ZW50cyBp
ZiBkcmFnZ2luZyBzdG9wcy4KKyAgICAgICAgICB0aGlzLl9fZHJhZ1RpbWVyID0gbmV3IHF4LmV2
ZW50LlRpbWVyKDEwMCk7IAorICAgICAgICAgIHRoaXMuX19kcmFnVGltZXIuYWRkTGlzdGVuZXIo
J2ludGVydmFsJyx0aGlzLl9maXJlVmFsdWUsdGhpcyk7CisgICAgICAgIH0KKyAgICAgICAgdGhp
cy5fX2RyYWdUaW1lci5zdGFydCgpOwogICAgICAgICAvLyBDb21wdXRlIGRyYWdPZmZzZXQgKGlu
Y2x1ZGVzIGJvdGg6IGlubmVyIHBvc2l0aW9uIG9mIHRoZSB3aWRnZXQgYW5kCiAgICAgICAgIC8v
IGN1cnNvciBwb3NpdGlvbiBvbiBrbm9iKQogICAgICAgICB0aGlzLl9fZHJhZ09mZnNldCA9IGN1
cnNvckxvY2F0aW9uICsgc2xpZGVyTG9jYXRpb24gLSBrbm9iTG9jYXRpb247CkBAIC00NTIsNiAr
NDYwLDE1IEBACiAKICAgICAgICAgLy8gQ2xlYW51cCBzdGF0dXMgZmxhZ3MKICAgICAgICAgZGVs
ZXRlIHRoaXMuX19kcmFnTW9kZTsKKyAgICAgICAgLy8gYXMgd2UgY29tZSBvdXQgb2YgZHJhZyBt
b2RlLCBtYWtlCisgICAgICAgIC8vIHN1cmUgY29udGVudCBnZXRzIHN5bmNlZAorCisgICAgICAg
IHRoaXMuX19kcmFnVGltZXIuc3RvcCgpOworICAgICAgICBpZiAodGhpcy5fX2RyYWdWYWx1ZSl7
CisgICAgICAgICAgdmFyIHRtcCA9IHRoaXMuX19kcmFnVmFsdWU7ICAgICAgICAKKyAgICAgICAg
ICB0aGlzLl9fZHJhZ1ZhbHVlID0gbnVsbDsKKyAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnY2hh
bmdlVmFsdWUnLHF4LmV2ZW50LnR5cGUuRGF0YSx0bXApOworICAgICAgICB9ICAgICAgICAKICAg
ICAgICAgZGVsZXRlIHRoaXMuX19kcmFnT2Zmc2V0OwogCiAgICAgICAgIC8vIHJlbW92ZSBzdGF0
ZQpAQCAtNDg1LDcgKzUwMiw3IEBACiAgICAgICAgICAgICB0aGlzLmdldENoaWxkQ29udHJvbCgi
a25vYiIpLnJlbW92ZVN0YXRlKCJob3ZlcmVkIik7CiAgICAgICAgICAgfQogICAgICAgICB9Ci0K
KyAgICAgICAgCiAgICAgICB9CiAgICAgICBlbHNlIGlmICh0aGlzLl9fdHJhY2tpbmdNb2RlKQog
ICAgICAgewpAQCAtOTc5LDEyICs5OTYsMzQgQEAKICAgICBfYXBwbHlWYWx1ZSA6IGZ1bmN0aW9u
KHZhbHVlLCBvbGQpIHsKICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7CiAgICAgICAgIHRoaXMu
X3VwZGF0ZUtub2JQb3NpdGlvbigpOworICAgICAgICBpZiAodGhpcy5fX2RyYWdNb2RlKXsKKyAg
ICAgICAgICB0aGlzLl9fZHJhZ1ZhbHVlID0gW3ZhbHVlLG9sZF07CisgICAgICAgIH0KKyAgICAg
ICAgZWxzZSB7CisgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2NoYW5nZVZhbHVlJyxxeC5ldmVu
dC50eXBlLkRhdGEsW3ZhbHVlLG9sZF0pOworICAgICAgICB9CiAgICAgICB9IGVsc2UgewogICAg
ICAgICB0aGlzLnJlc2V0VmFsdWUoKTsKICAgICAgIH0KICAgICB9LAogCi0KKyAgICBfZmlyZVZh
bHVlOiBmdW5jdGlvbihlKXsKKyAgICAgIGlmICghdGhpcy5fX2RyYWdWYWx1ZSl7CisgICAgICAg
IHJldHVybjsKKyAgICAgIH0KKy8vICAgIGNvdWxkIHVzZSB0aGlzIHRvIHNsb3cgbWFrZSBzdXJl
IHRoZXJlIGlzIGVub3VnaCB0aW1lIGluIGJldHdlZW4KKy8vICAgIGV2ZW50IGhhbmRsaW5nIHRp
bWUgdG8gcHJvY2VzcyBvdGhlciBzdHVmZgorLy8gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0
VGltZSgpOworLy8gICAgaWYgKG5vdyAtIHRoaXMuX19sYXN0VmFsdWVFdmVudCA8IDAuMiAqIDEw
MDApIHsKKy8vICAgICAgdGhpcy5kZWJ1Zyhub3cgLSB0aGlzLl9fbGFzdFZhbHVlRXZlbnQpOwor
Ly8gICAgICByZXR1cm47CisvLyAgICB9CisgICAgICB2YXIgdG1wID0gdGhpcy5fX2RyYWdWYWx1
ZTsKKyAgICAgIHRoaXMuX19kcmFnVmFsdWUgPSBudWxsOyAgICAgICAgCisgICAgICB0aGlzLmZp
cmVFdmVudCgnY2hhbmdlVmFsdWUnLHF4LmV2ZW50LnR5cGUuRGF0YSx0bXApOworLy8gICAgdGhp
cy5fX2xhc3RWYWx1ZUV2ZW50ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CisgICAgfSwKKyAgICAg
ICAgICAgICAgICAgICAgICAKICAgICAvLyBwcm9wZXJ0eSBhcHBseQogICAgIF9hcHBseU1pbmlt
dW0gOiBmdW5jdGlvbih2YWx1ZSwgb2xkKQogICAgIHsK
</data>

          </attachment>
      

    </bug>