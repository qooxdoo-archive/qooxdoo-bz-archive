<bug>
          <bug_id>5470</bug_id>
          
          <creation_ts>2011-08-01 15:08:00 +0200</creation_ts>
          <short_desc>qx.ui.table.cellrenderer.Date multi lingual</short_desc>
          <delta_ts>2014-03-03 15:20:46 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.table</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.0</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mustafa Sak">mustafa.sak</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>26352</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2011-08-01 15:08:45 +0200</bug_when>
            <thetext>Hi,

I made a solution to make date cellrenderer change locale able. So may be it&#39;s worth to take a look at: http://preview.tinyurl.com/3cj22la

Regards Mustafa Sak

If tinyurl is not working proper, here is the playground code:



qx.Class.define(&quot;sakDate&quot;,
{
  extend : qx.ui.table.cellrenderer.Date,

  construct : function(align, color, style, weight)
  {
    this.base(arguments, align, color, style, weight);
  	// listen for locale changes
    if (qx.core.Environment.get(&quot;qx.dynlocale&quot;))
    {
      this.__localeListenerId =
        qx.locale.Manager.getInstance().addListener(&quot;changeLocale&quot;, function() {
					if (this.__dynlocaleDateFormatFunc == null)
					{
						return;
					}
					console.log(this.getDateFormat());
          //this.getDateFormat().setLocale(qx.locale.Manager.getInstance().getLocale());
					this.setDateFormat(this.__dynlocaleDateFormatFunc());
					
					if (this.__table != null)
					{
						console.log(this.__table);
						this.__table.updateContent();
					}
       }, this);
    }
	},

  /*
  *****************************************************************************
     PROPERTIES
  *****************************************************************************
  */

  properties :
  {
		incommingDateFormat :
    {
      check : &quot;qx.util.format.DateFormat&quot;,
      init : null,
      nullable : true
    }
  },


  /*
  *****************************************************************************
     MEMBERS
  *****************************************************************************
  */

  members :
  {
		__table : null,

		__dynlocaleDateFormatFunc : null,
		
		createDataCellHtml : function(cellInfo, htmlArr)
    {
			this.__table = cellInfo.table;
			this.base(arguments, cellInfo, htmlArr);
		},

		setDynlocalDateFormat : function(dynFunc)
		{
			this.__dynlocaleDateFormatFunc = dynFunc;
			this.setDateFormat(this.__dynlocaleDateFormatFunc());
		},

    _getContentHtml : function(cellInfo)
    {
			var dfIncomming = this.getIncommingDateFormat();

      var df = this.getDateFormat();
			

      if (df &amp;&amp; dfIncomming)
      {
        if (cellInfo.value) {
					
					try
					{
						var date = dfIncomming.parse(cellInfo.value);
						return qx.bom.String.escape(df.format(date));
					}
					catch (e)
					{
						console.log(e);
						return cellInfo.value;
					}
        } else {
          return &quot;&quot;;
        }
      }
      else
      {
        return cellInfo.value || &quot;&quot;;
      }
    },

		destruct : function() {
    // listen for locale changes
    if (qx.core.Environment.get(&quot;qx.dynlocale&quot;))
    {
      if (this.__localeListenerId) {
        qx.locale.Manager.getInstance().removeListenerById(this.__localeListenerId);
      }
    }
  }
  }
});


function createRandomRows(rowCount) {
  var rowData = [];
  var now = new Date().getTime();
  var dateRange = 400 * 24 * 60 * 60 * 1000; // 400 days
  var nextId = 0;
  for (var row = 0; row &lt; rowCount; row++) {
    var date = new Date(now + Math.random() * dateRange - dateRange / 2);
    var dateString = date.getFullYear() + &quot;-&quot; + (date.getMonth()+1) + &quot;-&quot; + date.getDate() + &quot; &quot; + date.getHours() + &quot;:&quot; + date.getMinutes();
    rowData.push([ nextId++, Math.random() * 10000, dateString , (Math.random() &gt; 0.5) ]);
  }
  return rowData;
}

function setLocationMenu (mb)
    {
      
      var menu = new qx.ui.menu.Menu;

      var location = qx.locale.Manager.getInstance();
      var locs = location.getAvailableLocales();

      var i = 0;

      for (i=0; i&lt;locs.length; i++)
      {
        var bnt = new qx.ui.menu.Button(locs[i]);
        menu.add(bnt);

        bnt.addListener(&quot;execute&quot;, function(e) {
          mb.setLabel(this.getLabel());
        });
      }

      mb.setMenu(menu);
    }


// window
var win = new qx.ui.window.Window(&quot;Table&quot;).set({
  layout : new qx.ui.layout.VBox(),
  allowClose: false,
  allowMinimize: false,
  contentPadding: 0
});

this.getRoot().add(win);
win.moveTo(30, 40);
win.open();

var location = qx.locale.Manager.getInstance();
var btnHelpdesk = new qx.ui.form.MenuButton(qx.locale.Manager.getInstance().getLocale());
setLocationMenu(btnHelpdesk);

btnHelpdesk.addListener(&quot;changeLabel&quot;, function(e)
{
location.setLocale(e.getData());
//qx.bom.Cookie.set(&quot;location&quot;, e.getData(), 90);
});
      
win.add(btnHelpdesk);

// table model
var tableModel = new qx.ui.table.model.Simple();
tableModel.setColumns([ &quot;ID&quot;, &quot;A number&quot;, &quot;A date&quot;, &quot;Boolean&quot; ]);
tableModel.setData(createRandomRows(1000));

// make second column editable
tableModel.setColumnEditable(1, true);

// table
var table = new qx.ui.table.Table(tableModel).set({
  decorator: null
});
win.add(table);

var tcm = table.getTableColumnModel();

// Display a checkbox in column 3
tcm.setDataCellRenderer(3, new qx.ui.table.cellrenderer.Boolean());

var dateRenderer =  new sakDate(&quot;right&quot;);
dateRenderer.setIncommingDateFormat(new qx.util.format.DateFormat(&quot;yyyy-MM-dd HH:mm&quot;));
dateRenderer.setDynlocalDateFormat(function(){
 return new qx.util.format.DateFormat(qx.locale.Date.getDateFormat(&quot;medium&quot;).toString() + &quot; &quot; + qx.locale.Date.getTimeFormat(&quot;short&quot;).toString())  
});
  tcm.setDataCellRenderer(2, dateRenderer);
// use a different header renderer
tcm.setHeaderCellRenderer(2, new qx.ui.table.headerrenderer.Icon(&quot;icon/16/apps/office-calendar.png&quot;, &quot;A date&quot;));</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26361</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-08-02 08:34:11 +0200</bug_when>
            <thetext>Thanks for the report and the code. :) Will take a look at it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>31495</commentid>
            <who name="Mustafa Sak">mustafa.sak</who>
            <bug_when>2012-11-28 15:54:33 +0100</bug_when>
            <thetext>Should currently work, because the table is rebuilding all cells after &quot;changeLocale&quot; event was fired.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37018</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:20:46 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>