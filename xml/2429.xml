<bug>
          <bug_id>2429</bug_id>
          
          <creation_ts>2009-05-27 18:08:00 +0200</creation_ts>
          <short_desc>Correct and unify handling of Javascript identifiers in the tool chain</short_desc>
          <delta_ts>2014-03-03 15:21:40 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P5</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.0</target_milestone>
          <dependson>2455</dependson>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10162</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-05-27 18:08:25 +0200</bug_when>
            <thetext>Permissible JS identifiers can contain unicode characters (under some 
considerations, see the ecmascript ed.3 spec), but e.g. not &quot;-&quot;. Both aspects 
are not handled this way. E.g. both create-application.py as well as 
ecmascript/frontend/lang.py use non-unicode [a-zA-Z0-9_] character class to 
check for valid chars. lang.py even includes &quot;-&quot; as valid char.

All affected parts in the tool chain, including create-application.py, should 
use the then corrected settings in lang.py.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10259</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-02 19:15:56 +0200</bug_when>
            <thetext>A very good starting point to debug unicode handling in the tool chain is the 
application name space.

It appears when you create the app with a skeleton, using create-application.py 
-n &lt;namespace&gt;.

This name space string then shows up
- in the source files, like Application.js: 
qx.Class.define(&quot;&lt;namespace&gt;.Application&quot;)
- on the file system, in directory paths like 
&lt;namespace&gt;/source/class/&lt;namespace&gt;

The string in the source files is treated by the library scanning and compile 
routines.

The string in the directory path is treated by all kinds of routines that 
juggle in- and output-files, to copy resource files, open source files, create 
script output files ... it is all over the place.

In source files, utf-8 handling is applied, and has to be consistent wherever 
source files are read and written. This is the syntactic (encoding) level. On 
the semantic level, the name space string has to represent a valid JS 
identifier, since it is used as such when creating the class objects.

Concerning the file system, all relevant modules (os, robocopy, gzip, ...) have 
to be used in a way that treats path strings properly. os.listdir() returns 
unicode strings if called with a unicode argument. os.getcwd() always returns a 
string (aka byte buffer), which has to be decoded according to what the 
underlying OS uses. (On my Linux box, the encoding seems to be UTF-8; on 
Windows XP it actually looks like UCS-2, for which - funnily - there is no 
standard decoder in Python!). Luckily, there is a getcwdu() function that 
returns unicode :).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11951</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-08 09:41:23 +0200</bug_when>
            <thetext>moved from 0.8.3 to 0.9</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>13085</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-10-12 12:28:01 +0200</bug_when>
            <thetext>down prio; i think this need a concrete use case to bring it further</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14787</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:26:33 +0100</bug_when>
            <thetext>mass renaming of 0.9 target to 1.0 (for issues with status &quot;NEW&quot;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15021</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-11-27 11:07:18 +0100</bug_when>
            <thetext>I&#39;m closing this as we haven&#39;t had any issues in this realm for awhile. If new 
issues pop up, open a new bug for them.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37381</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:21:40 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>