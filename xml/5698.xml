<bug>
          <bug_id>5698</bug_id>
          
          <creation_ts>2011-10-10 22:48:00 +0200</creation_ts>
          <short_desc>Objects instances not disposed and overiden methods called multiple times</short_desc>
          <delta_ts>2011-10-12 10:07:34 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.lang</component>
          <version>1.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>INVALID</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tomek Kuprowski">tomekkuprowski</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>derrell.lipman</cc>
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>27166</commentid>
            <who name="Tomek Kuprowski">tomekkuprowski</who>
            <bug_when>2011-10-10 22:48:33 +0200</bug_when>
            <thetext>I found it crazy, maybe it&#39;s not easy to describe but I&#39;ll try. Please note that maybe it&#39;s not a  bug but my wrong understanding of qooxdoo object orientation.....

I&#39;ve a abstract class with member &quot;someval&quot; which value is assigned at declaration (not in class constructor). Class has a method foo().

In next step I&#39;m inheriting this class with classes &quot;b&quot; and &quot;c&quot;.

Next... I&#39;m doing in code:

var form = new b();
form.foo();
form = null;

var form2 = new c();
form2.foo();
form2 = null;

What happens ? Qooxdoo make calls in the following scenario: b.foo() -&gt; b.foo() -&gt; c.foo() . Looks like some bug with instances etc. When a move value assignment to constructor (I mean value &quot;someval&quot;) everything works ok.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27167</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2011-10-10 23:09:26 +0200</bug_when>
            <thetext>This is almost certainly an incorrect usage, but what you&#39;ve written is a bit too abstract to figure out what you&#39;re doing. I would suggest that you make a small example in the playground that demonstrates what you&#39;re seeing, and post the question and a link to the playground example to the mailing list. You&#39;re sure to get explanations as to what you&#39;re doing wrong.

The only thing I can think of related to what it seems you&#39;re describing, is that you are assigning a &quot;reference type&quot; to a member variable. If you initialize a member variable with an object or array, every instance of the class will have its own copy of the *reference* to the object or array, but all of them will reference the very same object or array. Any time you need to initialize a member variable with a reference type, it should be done in the constructor.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27178</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-10-12 10:07:01 +0200</bug_when>
            <thetext>Totally agree with Derrell. Another thing to mention is that setting an object reference to null does not dispose the object itself. But I also think that this is some misunderstand and could be solved on the mailing list. Thats why I close the bug. In case we find any undesired behavior during the discussion on the list, feel free to reopen that bug so we can get that fixed.</thetext>
          </long_desc>
      
      

    </bug>