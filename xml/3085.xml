<bug>
          <bug_id>3085</bug_id>
          
          <creation_ts>2009-11-20 15:09:00 +0100</creation_ts>
          <short_desc>translation: &quot;\n&quot; in keys does not work</short_desc>
          <delta_ts>2014-03-03 15:26:40 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>Windows</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P1</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>1.0.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Matthias Hellriegel">Matthias.Hellriegel</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>14255</commentid>
            <who name="Matthias Hellriegel">Matthias.Hellriegel</who>
            <bug_when>2009-11-20 15:09:18 +0100</bug_when>
            <thetext>If I use &quot;\n&quot; as a translation key, the generator removes the translation everytime I execute &quot;generator.py translation&quot;.

Before:
msgid &quot;jsdklfjlsdkjf \n sldkfjlsdkfj&quot;
msgstr &quot;jsdklfjlsdkjf \n sldkfjlsdkfj&quot;

After:
msgid &quot;jsdklfjlsdkjf \n sldkfjlsdkfj&quot;
msgstr &quot;&quot;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14357</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-23 22:54:29 +0100</bug_when>
            <thetext>to Thomas</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>15720</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-12-11 11:31:27 +0100</bug_when>
            <thetext>mass move to 1.0.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16444</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-27 16:30:16 +0100</bug_when>
            <thetext>moved to target 1.0.2</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17719</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-04-12 16:38:35 +0200</bug_when>
            <thetext>Fixed handling of keys that contain &#39;\n&#39;; the issue was due to different 
encoding of \n in the pot and po file, so identical keys were not recognized; 
this is fixed by using the pofile.unescape() function for pot entries in the 
generator.

NB: polib now breaks keys accross several lines if they contain &#39;\n&#39;. This is 
not required, but sort of recommended practice from the gettext manual. .Ie., 
rather than to have

msgid &quot;one \n two&quot;

in one line in the po file, it will transformed into the equivalent

msgid &quot;&quot;
&quot;one \n&quot;
&quot; two&quot;

ie. the key value is actually the concatenation of the three individual 
strings. &#39;\n&#39; is retained as an escape sequence. Editors, like poedit, treat 
both representations consistently.

NB-1: The whole escaping/unescaping of \escapes in polib is unnecessary for us, 
IMO. We collect translateable strings from .js files as they are, store them as 
the are, and retrieve them as they are. There is no reason for us to e.g. 
translate &quot;\&quot;+&quot;n&quot; (2 char) into &quot;\n&quot; (1 char). All those would be best left 
alone. Escaping is only interesting when you want to handle literal Python 
strings with po files (which we don&#39;t). But then you could just use &quot;raw&quot; 
strings (&quot;r&#39;one \n two&#39;&quot;), and everything would be fine. I&#39;ll try to find out 
with the polib maintainer.

With r21878.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39190</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:26:40 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>