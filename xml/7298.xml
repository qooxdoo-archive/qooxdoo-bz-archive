<bug>
          <bug_id>7298</bug_id>
          
          <creation_ts>2013-03-14 18:28:00 +0100</creation_ts>
          <short_desc>Allow to Exclude a List of Class.method Symbols from a Build</short_desc>
          <delta_ts>2014-03-31 08:59:20 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.compiler</component>
          <version>2.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>32461</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-03-14 18:28:54 +0100</bug_when>
            <thetext>In order to create code scripts that are independently build but depend on each 
other, it is necessary to exclude the symbols that are contained in one script 
from being included in the dependent script. This way you can create scripts 
that build on one another if they are loaded successively in a page, without 
overwriting symbols that are already loaded.

One way to achieve this is to create a list of exported symbols when creating 
the base script, and then using this list as an exclude list when creating the 
second. It is important that the list goes down to the method level, so methods 
pruned from a class in the first build can be added in the second.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32462</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-03-14 18:51:00 +0100</bug_when>
            <thetext>Approx. efforts to implement this:

- new config option:
  compile-options/files/sym_tab: &quot;path&quot;  (0md)

- build output: build/script/custom.sym_tab.json:
  {
    &quot;symbols&quot; :  {
      &quot;provides&quot; : [ &quot;classA.method1&quot;, ... ],
    }
  }

  (2md)

- read sym_tab when calculating exclude list (Generator.getExcludes): (0,5md)

- match dependencies against exclude list with method specs,
  during dependency exploration:             (1md)

- re-writing depenency handling to always consider methods:   
  (e.g. in &#39;statics&#39; optimization)                    (2md)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32509</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2013-03-25 11:10:53 +0100</bug_when>
            <thetext>You probably could also implement this as an optimization.

Given a list of class#method names, you could optimize a given build script by 
deleting the given features from the code base, if they are present. The list 
would be sort of a black list of features to exclude from the build. This would 
omit intervening with the dependency calclulation, but would just strip code 
after the script has been built. This could be done like the &#39;statics&#39; 
optimization, where the &#39;featureMap&#39; is used to guide code pruning, only that 
the featureMap is a white list of symbols to keep, not a black list of symbols 
to prune.

So you&#39;d still need the symbol list from the base build.

- new config option:
  compile-options/code/optimize: [&quot;statics-black-list&quot;]  (0md)

- build output: build/script/custom.sym_tab.json:
  {
    &quot;symbols&quot; :  {
      &quot;provides&quot; : [ &quot;classA.method1&quot;, ... ],
    }
  }
  (2md)

- new optimization:
   generator/action/CodeGenerator.py#blacklistoptimization()  (2md)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39822</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-31 08:59:20 +0200</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>