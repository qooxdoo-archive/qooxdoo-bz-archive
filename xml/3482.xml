<bug>
          <bug_id>3482</bug_id>
          
          <creation_ts>2010-02-26 18:10:00 +0100</creation_ts>
          <short_desc>strange &quot;generate translation&quot; behavior</short_desc>
          <delta_ts>2014-03-03 15:27:17 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>1.0.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>1.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Peter Schneider">schnepe2</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>17019</commentid>
            <who name="Peter Schneider">schnepe2</who>
            <bug_when>2010-02-26 18:10:24 +0100</bug_when>
            <thetext>After running a &quot;generate.py translation&quot;, every &quot;generate.py source&quot;-run fails!

The generator is then complaining about several unknown global symbols like e.g.:

&quot;! Unknown global symbol referenced: qx.ui.basic (infodesk.ui.info.WinAbout:68)&quot;

It seems, that after a &quot;translation run&quot; the qx namespace is unknown :-/

See also: http://n2.nabble.com/strange-generate-translation-behavior-tp4639682p4639682.html

-------- Work-around: -----------
run &quot;generate.py distclean&quot; before the next &quot;generate.py source&quot;

-------- Additional Info:------------
&lt;thron7&gt;
I could imagine that it has to do with dependency lists being calculated and cached during the &quot;translation&quot; job, which only uses the classes in the current library. If it cuts off dependencies outside the current library, this would explain why qx classes are complained about if the cached dependency list is used.
&lt;/thron7&gt;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17030</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-03-01 09:47:56 +0100</bug_when>
            <thetext>to Thomas</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17037</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-03-01 11:46:31 +0100</bug_when>
            <thetext>Fritz confirmed the issue, although it was erratic to him.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19213</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-07-09 11:39:48 +0200</bug_when>
            <thetext>working on</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19300</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-07-14 10:00:18 +0200</bug_when>
            <thetext>Jobs like &#39;translation&#39;, &#39;lint&#39;, etc. used to deploy dependency analysis 
although they are supposed to work on the classes of the local library only. 
The assumption is that they produced dependency information that marked classes 
outside the local lib as unknown. This can happen if you do a dependency 
analysis on classes of the local lib, but don&#39;t include used libraries to check 
these dependencies against, as those local jobs did. This unknown class 
information was cached, and if it was re-used on subsequent &#39;source&#39; or &#39;build&#39; 
runs the cache information was (wrongly) re-used *although* the other libraries 
were now available and dependendent classes could be checked against them.

Basically with r21601 jobs like &#39;translation&#39; and &#39;lint&#39; have been re-written 
to *not* use dependency information at all. A simple scan of the local lib is 
enough to iterate through its classes to extract message keys or check 
Javascript coding and such. This avoids costly dependency analysis where it is 
not necessary. At the same time no dependency information gets cached, so 
&#39;source&#39; and &#39;build&#39; jobs cannot be confused.

This change made it into the 1.1 release.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>19302</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-07-14 10:03:02 +0200</bug_when>
            <thetext>-&gt; 1.1</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39416</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:27:17 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>