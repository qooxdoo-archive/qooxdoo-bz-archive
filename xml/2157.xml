<bug>
          <bug_id>2157</bug_id>
          
          <creation_ts>2009-03-25 10:48:00 +0100</creation_ts>
          <short_desc>Ecmalint: Detect implicit use of undeclared private members not only in assignments</short_desc>
          <delta_ts>2014-03-03 15:27:01 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>0.8.3</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Ecker">qooxdoo</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>8902</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-03-25 10:48:52 +0100</bug_when>
            <thetext>There was an issue recently, that a build version didn&#39;t work while the source version did. This was caused by accessing private members of a superclass directly like in:

this.__containerElement.setStyle(&quot;foo&quot;, &quot;bar&quot;);

This is of course not supposed to work in the OO sense. In fact, the private variable optimization ensures on the build level that such an access breaks by intention. Unfortunately, this can not really be enforced on the JS level itself in qooxdoo, so Ecmalint is a development tool to point out such issues. This works great when having the private member of a superclass in an assignment like:

this.__containerElement.style.foo = &quot;bar&quot;;

Therefore the current lint should be extended to also detect this in non-assignments as in the first example.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8903</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-03-25 10:50:12 +0100</bug_when>
            <thetext>@Thomas, please see if this can be completed soon, as it might help to spot some other potential issues in the code base.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9056</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2009-04-01 11:50:47 +0200</bug_when>
            <thetext>first fix in rev. 18617</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9073</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-04-01 19:20:24 +0200</bug_when>
            <thetext>Use of privates is now flagged on all occurrences. This not only affects method 
invocations and assignments (as described in the bug description), but also in 
rval positions when their value is retrieved.

The corresponding checkFields() routine of ecmalint.py has undergone a major 
re-write, separating the checks for undeclared, private and protected fields, 
to allow for a better control of each independently.

Running lint on the framework now reports about 8,000 issues, which might be 
overgenerating, but class maintainers have to check their validity and prob. 
use the new @lint lint hints, recently introduced by Fabian (see bug#1824). If 
there are still issues remaining, please open a new bug.

Fixed with r18627.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39317</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:27:01 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>