<bug>
          <bug_id>8697</bug_id>
          
          <creation_ts>2014-11-17 10:05:00 +0100</creation_ts>
          <short_desc>Make super() calls of the constructor consistent with how other super() calls work</short_desc>
          <delta_ts>2014-11-21 16:36:23 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>next</product>
          <component>core</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andreas Parusel">andreas.parusel</reporter>
          <assigned_to name="Tobias Oberrauch">tobias.oberrauch</assigned_to>
          <cc>tobias.oberrauch</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>41585</commentid>
            <who name="Andreas Parusel">andreas.parusel</who>
            <bug_when>2014-11-17 10:05:45 +0100</bug_when>
            <thetext>The way super() works on constructors is not consistent with other super calls right now. Normally the pattern of using super() is like this:

methodName: function(arg1, arg2) {
  this.super(my.cool.SuperClass, &quot;methodName&quot;, arg1, arg2);
}

In the case of  the constructor, the method overridden method is named &quot;construct&quot; which is does not match the string-argument passed to super(), which is currently &quot;constructor&quot;:

construct: function(arg1, arg2) {
  this.super(my.cool.SuperClass, &quot;constructor&quot;, arg1, arg2);
}

In my opinion this is a unnecessary pitfall and should be harmonized. As a user, I would intuitively expect a super() on a constructor to work like this:

construct: function(arg1, arg2) {
  this.super(my.cool.SuperClass, &quot;construct&quot;, arg1, arg2);
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>41667</commentid>
            <who name="Tobias Oberrauch">tobias.oberrauch</who>
            <bug_when>2014-11-21 14:51:05 +0100</bug_when>
            <thetext>Changed to construct in next with 7f76ec7cee896a31df345cccf46bea31688e3aeb</thetext>
          </long_desc>
      
      

    </bug>