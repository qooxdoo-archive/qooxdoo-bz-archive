<bug>
          <bug_id>5916</bug_id>
          
          <creation_ts>2011-12-08 11:43:00 +0100</creation_ts>
          <short_desc>Exclude own api from apiviewer as it is in online version</short_desc>
          <delta_ts>2011-12-09 08:51:32 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>app.apiviewer.desktop</component>
          <version>1.5.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>INVALID</resolution>
          
          
          
          
          
          <priority>P4</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="saaj">id</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>27884</commentid>
            <who name="saaj">id</who>
            <bug_when>2011-12-08 11:43:22 +0100</bug_when>
            <thetext>Every single time I get newer qooxdoo I build apiviewer as it&#39;s most frequently accessed built-in application. And every single time a dig in config files to exclude own apiviewer api info as it&#39;s useless. The expected default configuration for apiviewer is that is used for builds of online version of api.

Changes in api.json:
        &quot;API_INCLUDE&quot;    : [&quot;qx.*&quot;],
        &quot;API_EXCLUDE&quot;    : [&quot;apiviewer.*&quot;],

Changes in config.json:
        &quot;API_INCLUDE&quot;  : []</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27888</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2011-12-08 12:56:36 +0100</bug_when>
            <thetext>I guess you&#39;re running either the &quot;build&quot; or &quot;api&quot; job in component/apiviewer, right? Those are supposed to generate only the api data for the current library, in this case the API Viewer itself. So they work as intended.

If you want to generate an APIViewer for the framework classes, just run the &quot;api&quot; job in the framework directory. In fact, if you downloaded an SDK it&#39;s already pre-built, just open framework/api/index.html</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27891</commentid>
            <who name="saaj">id</who>
            <bug_when>2011-12-08 13:35:40 +0100</bug_when>
            <thetext>Right, I used &quot;generate.py build&quot; for &quot;component/apiviewer&quot; as for any other application which I though &quot;component/apiviewer&quot; is. Didn&#39;t know of &quot;framework/api&quot;. Just getting used to these &quot;generate.py source&quot;, &quot;generate.py build&quot;, like there&#39;s no other. Sorry.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27893</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2011-12-08 13:54:25 +0100</bug_when>
            <thetext>No problem :) BTW, if you didn&#39;t know yet, you can generate customized versions of several of the framework components (API Viewer, Test Runner, Inspector and Simulator) for your own application. Might be worth looking into if you haven&#39;t already.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>27894</commentid>
            <who name="saaj">id</who>
            <bug_when>2011-12-08 14:21:10 +0100</bug_when>
            <thetext>Now, the purpose of contents of &quot;component&quot; folder and its name leave no doubt to me :-)
About them, Inspector is technically great, but used quite rarely, some layout debugging purpose, as I can remember. API Viewer, well... this glory day of documentation hasn&#39;t come, yet ;-) And testing, Test Runner is good, at least in 1.0 last time I used it, but UI/functional-testing is another story. It&#39;s usually cumbersome, it&#39;s based own infrastructure, and it&#39;s not easy to maintain. So I try to avoid it when I can.</thetext>
          </long_desc>
      
      

    </bug>