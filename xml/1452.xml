<bug>
          <bug_id>1452</bug_id>
          
          <creation_ts>2008-10-07 18:22:00 +0200</creation_ts>
          <short_desc>Tab key to navigate between widgets doesn&#39;t always work inside a TabView</short_desc>
          <delta_ts>2014-03-03 15:23:15 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop.core</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>0.8.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Gaëtan de Menten">ged</reporter>
          <assigned_to name="Jonathan Weiß">qooxdoo-bugs</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>5749</commentid>
            <who name="Gaëtan de Menten">ged</who>
            <bug_when>2008-10-07 18:22:50 +0200</bug_when>
            <thetext>I have a TabView with lots of widgets.

If I click on ony widget on the first page, then hit the &quot;tab key&quot;, it produces the traceback below. I couldn&#39;t find what in my code triggers this error (it systematically happens with my code, but doesn&#39;t happen in the demo). Some interesting facts:

The problem apparently lies in the fact that it tries to compute the position of a widget (so that it knows whether that widget is before or after a particular widget) which is not on the first page. This widget has never been shown so has no position (this is probably intended to create the pages lazily). The question is why are those widgets on the other pages included in the list?

Note that &quot;showing&quot; each and all pages (and thus all the form widgets they contain) before focusing one particular form widget and hitting &quot;tab&quot; makes it work.

∘ node is null
getDocument()(null)			Node.js (line 92)
gecko()(null)				Location.js (line 191)
get()(null, undefined)			Location.js (line 435)
__compareTabOrder()(qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.Spinner[dh] __containerElement=qx.html.Element[di])	FocusHandler.js (line 317)
__collectAllAfter()(qx.ui.container.Composite[db] __containerElement=qx.html.Element[dc], qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.PasswordField[ch],qx.ui.form.TextArea[cr] 0=qx.ui.form.PasswordField[ch])		FocusHandler.js (line 457)
__collectAllAfter()(qx.ui.container.Composite[d7] __containerElement=qx.html.Element[d8], qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.PasswordField[ch],qx.ui.form.TextArea[cr] 0=qx.ui.form.PasswordField[ch])		FocusHandler.js (line 461)
__collectAllAfter()(qx.ui.tabview.Page[cv] __containerElement=qx.html.Element[cw], qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.PasswordField[ch],qx.ui.form.TextArea[cr] 0=qx.ui.form.PasswordField[ch])		FocusHandler.js (line 461)
__collectAllAfter()(qx.ui.container.Stack[ay] __containerElement=qx.html.Element[az], qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.PasswordField[ch],qx.ui.form.TextArea[cr] 0=qx.ui.form.PasswordField[ch])		FocusHandler.js (line 461)
__collectAllAfter()(qx.ui.tabview.TabView[ah] __containerElement=qx.html.Element[ai], qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.PasswordField[ch],qx.ui.form.TextArea[cr] 0=qx.ui.form.PasswordField[ch])		FocusHandler.js (line 461)
__collectAllAfter()(qx.ui.container.Composite[ae] __containerElement=qx.html.Element[af], qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.PasswordField[ch],qx.ui.form.TextArea[cr] 0=qx.ui.form.PasswordField[ch])		FocusHandler.js (line 461)
__collectAllAfter()(qx.ui.container.Composite[96] __containerElement=qx.html.Element[97], qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.PasswordField[ch],qx.ui.form.TextArea[cr] 0=qx.ui.form.PasswordField[ch])		FocusHandler.js (line 461)
__collectAllAfter()(qx.ui.container.Composite[w] __containerElement=qx.html.Element[x], qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.PasswordField[ch],qx.ui.form.TextArea[cr] 0=qx.ui.form.PasswordField[ch])		FocusHandler.js (line 461)
__collectAllAfter()(qx.ui.root.Application[q] _window=window _doc=document, qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6], qx.ui.form.PasswordField[ch],qx.ui.form.TextArea[cr] 0=qx.ui.form.PasswordField[ch])	FocusHandler.js (line 461)
__getWidgetAfter()(qx.ui.form.TextField[c5] __containerElement=qx.html.Element[c6])	FocusHandler.js (line 383)
__onKeyPress()(qx.event.type.KeySequence[199] _type=keypress)	FocusHandler.js (line 236)
_dispatchEvent()(qx.event.type.KeySequence[198] _type=keypress _target=input)		EventHandler.js (line 264)
dispatchEvent()(input, qx.event.type.KeySequence[198] _type=keypress _target=input, &quot;keypress&quot;)	Abstract...bbling.js (line 211)
dispatchEvent()(input, qx.event.type.KeySequence[198] _type=keypress _target=input)		Manager.js (line 642)
_fireSequenceEvent()(keypress charCode=0, keyCode=9, &quot;keypress&quot;, &quot;Tab&quot;)	Keyboard.js (line 250)
_idealKeyHandler()(9, 0, &quot;keypress&quot;, keypress charCode=0, keyCode=9)	Keyboard.js (line 550)
gecko()(keypress charCode=0, keyCode=9)	Keyboard.js (line 469)
(?)()(keypress charCode=0, keyCode=9)	Function.js (line 367)

return node.ownerDocument || node.document || null;</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5766</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-10-08 12:01:09 +0200</bug_when>
            <thetext>to me</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>6222</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2008-11-10 21:48:36 +0100</bug_when>
            <thetext>@Johnny, please have a look. May be related to bug #1504.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>6229</commentid>
            <who name="Jonathan Weiß">qooxdoo-bugs</who>
            <bug_when>2008-11-11 09:49:55 +0100</bug_when>
            <thetext>Accepted.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>6246</commentid>
            <who name="Jonathan Weiß">qooxdoo-bugs</who>
            <bug_when>2008-11-11 14:39:48 +0100</bug_when>
            <thetext>Andreas mentioned bug #1504 (&quot;Tabbing to a hidden textfield occurs an error&quot;) 
which I fixed on 10/28/08 in r16560.

Gaëtan, since your call stack ends a call of 
qx.ui.core.FocusHandler.__compareTabOrder() with a qx.ui.form.TextField, this 
bug migt most likely be related to #1504.

Could you please test again with the qooxdoo trunk (at least with revision 
16560)?

Thank you in advance!</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>6272</commentid>
            <who name="Gaëtan de Menten">ged</who>
            <bug_when>2008-11-12 14:17:39 +0100</bug_when>
            <thetext>(In reply to comment #4)
 
&gt; Could you please test again with the qooxdoo trunk (at least with revision 
&gt; 16560)?

It seems to be fixed indeed, though I can&#39;t say for sure as I can&#39;t use my initial test case at the moment (for reasons unrelated to Qooxdoo). I&#39;m closing the bug for now and will reopen it if needed.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>37950</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:23:15 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>