<bug>
          <bug_id>1353</bug_id>
          
          <creation_ts>2008-09-02 13:16:00 +0200</creation_ts>
          <short_desc>Add a warning when initializing member-references outside constructor</short_desc>
          <delta_ts>2009-04-15 08:36:58 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>0.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>1823</dup_id>
          
          
          
          
          <priority>P2</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stefan Hansel">stefan.hansel</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>4970</commentid>
            <who name="Stefan Hansel">stefan.hansel</who>
            <bug_when>2008-09-02 13:16:19 +0200</bug_when>
            <thetext>It&#39;s very confusing and easy to forget, that members share their references when they are not initializied in the constructor.

http://qooxdoo.org/documentation/0.8/antipatterns#reference_tyes_in_members_section

This antipattern could be spotted in Class.define and a log.warn could be issued.

copied from mailing list:
---------------------------------

&gt;&gt;&gt; BTW there is a small problem in your code:
&gt;&gt;&gt;    /* current call-stack */
&gt;&gt;&gt;    __recursionInfo: *new* Array(), // &lt;-- this array will be shared
&gt;&gt;&gt;       

&gt; When thinking about it ... wouldn&#39;t it make sense to extend Class.define 
&gt; to issue warnings in the log if references on members are filled before 
&gt; calling the constructor ? 
&gt; Since the way I wrote it is very common in every other object-oriented 
&gt; language, but due to JS-limitations behaves totally different in qooxdoo I 
&gt; think it would make sense to enforce constructor initialization of 
&gt; members.
&gt;
&gt; Actually &#39;early&#39;-initializing references makes only sense on statics ?

Yes, statics are no problem because they are intended to be shared. 
Initializing member fields with references may make sense if you want 
the data to be shared but I would consider it bad practice because 
putting something in the members section expresses usually the intention 
that it is not shared. This may and will confuse others.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5336</commentid>
            <who name="Sebastian Werner">info</who>
            <bug_when>2008-09-06 15:44:14 +0200</bug_when>
            <thetext>Mark as enhancement.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9275</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-04-15 08:36:58 +0200</bug_when>
            <thetext>This was recently addressed in bug #1823 by extending qooxdoo&#39;s code validation feature. @Stefan, could you please verify this handles the cases you mentioned (using the ecmalint.py tool directly or calling generate.py lint on your project), if not, please reopen.

*** This bug has been marked as a duplicate of bug 1823 ***</thetext>
          </long_desc>
      
      

    </bug>