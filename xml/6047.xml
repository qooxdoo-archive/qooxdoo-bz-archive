<bug>
          <bug_id>6047</bug_id>
          
          <creation_ts>2012-01-16 18:55:00 +0100</creation_ts>
          <short_desc>Allow manipulation of build-options/uris/resource key at run-time</short_desc>
          <delta_ts>2013-12-16 12:45:12 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator.config</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>6046</dup_id>
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter>aditya.siram</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>28286</commentid>
            <who name="">aditya.siram</who>
            <bug_when>2012-01-16 18:55:28 +0100</bug_when>
            <thetext>I have a web application where a single qooxdoo application, myapplication, must be available from many different pages. Using relative URI&#39;s to reliably locate myapplication/build/script/myapplication.js and myapplication/build/resource is cumbersome and sometimes impossible because the web app uses Velocity which can autogenerate URIs. 

My present solution is always pass in the server root string to the window object using the templating mechanism and to override loader.tmpl.js to pick up that server root and append myapplication&#39;s paths to it. This way I am always giving the absolute path to myapplication. It looks something like this:
...
if (!qx.$$libraries) qx.$$libraries = {};
var libinfo = %{Libinfo};
   
/* &lt;------- Start Change ----------&gt; */
libinfo.qx.resourceUri=window.serverRoot + &quot;/scripts/qooxdoo/myapplication/build/resource&quot;;
/* &lt;------- End Change ----------&gt; */

...


This works but it would be far nicer to have the build-options/uris/resource also take a function like so:
  &quot;build-script&quot; :
    {
      &quot;compile-options&quot; :
      {
  	&quot;uris&quot; : {
	  &quot;resource&quot; : &quot;function () {
                          return window.serverRoot + &quot;/scripts/qooxdoo/myapplication/build/resource&quot;;
                        }&quot;
  	}
      }
    }</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28292</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-01-17 10:46:05 +0100</bug_when>
            <thetext>There will be a proper framework API for the qx.$$libraries structure (s. the 
duplicate bug).  Then you will be able to set properties of this structure to 
any value you desire, e.g. in the &#39;defer&#39; block of your main application class, 
before any resources are requested.

What you suggest might be more tedious (you can only provide strings in Json, 
and therefore need to escape all embedded strings), and also less generic (you 
cannot get at all $$libraries values through config entries).

*** This bug has been marked as a duplicate of bug 6046 ***</thetext>
          </long_desc>
      
      

    </bug>