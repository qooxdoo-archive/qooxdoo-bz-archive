<bug>
          <bug_id>5558</bug_id>
          
          <creation_ts>2011-08-25 10:07:00 +0200</creation_ts>
          <short_desc>Cannot overwrite inherited properties configs</short_desc>
          <delta_ts>2014-03-03 08:46:30 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>1.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          <bug_file_loc>http://tinyurl.com/3lj3cnz</bug_file_loc>
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          <blocked>2712</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Seldaiendil">seldaiendil2</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>seldaiendil2</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>26593</commentid>
            <who name="Seldaiendil">seldaiendil2</who>
            <bug_when>2011-08-25 10:07:10 +0200</bug_when>
            <thetext>I need to extend so many qooxdoo widgets, but I need them to have exactly the same interface than qooxdoo widgets, changing so little things, so the programmer can use BaseClass or SubClass the same way, thats what OOP is about.

So if a qooxdoo widget has a property &quot;middleColor&quot; I need to inherit from it and add some functionality.

Here is a example code than shows many ways we need to overwrite some properties configurations some times when we are inheriting:

Playground: http://tinyurl.com/3lj3cnz</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26707</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-09-07 17:16:38 +0200</bug_when>
            <thetext>Thanks for the report. I do see some problems with your proposed API. Here is my feedback:

Overriding the check
------------------
Not a good idea because the check is mostly used to validate the income of a property. This can only work if you reduce the set of values you can enter (like you did in your example). but this can not work in all other cases so the code will break most likely. 


Overriding the apply
------------------
Hm, don&#39;t know about that. This can work if no apply is given but can make some trouble if there already is one because you could also override the existing method.


Overriding the validate
-------------------
Somehow is the same issue like the already mentioned.


Overriding the themeable
---------------------
Seems also wrong because the base class should already have the themeable flag the property controls something which should be changed by the theme.


Overriding the event
-----------------
Adding an event ... don&#39;t know.


Overriding the nullable
--------------------
Seems to be wrong because the basic property assigned a meaning to that null value and the extending object should also have the same meaning.


In the end, I do have the opinion that a subclass should not change the meaning of a property into a different direction that it was originally intended. The only thing which could be good is to use a subset of values for the check but we can&#39;t check if its really a subset (see the color example) so I would not change anything here.

Btw. if you need to extend framework classes like the widgets, those properties should have the keys properly set like the themeable key. If not, either its a bug or there has been a good reason to do so.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26716</commentid>
            <who name="Seldaiendil">seldaiendil2</who>
            <bug_when>2011-09-07 17:45:07 +0200</bug_when>
            <thetext>I agree with you in many points:

Overriding the check
------------------
My idea was to apply a second check, not replace the existing one. So only values than could pass both checks will be valid.


Overriding the apply
------------------
It will be perfect the posibility to override the apply and have this.base(arguments), even if the parent class has apply or not. So I can implement my own apply and call the base one if exists if not code will not crash.


Overriding the validate
-------------------
Same as check


Overriding the themeable
---------------------
I agree with you, I can&#39;t imagine a property become suddently themeable.


Overriding the event
-----------------
Yes, the main point is to add a event if it is not thrown yet.


Overriding the nullable
--------------------
Well, I think it could be useful to have it, but I wouldn&#39;t call this option mandatory.


For now the only problem I found is that I need to specify more the type of the property and sometimes I would like to have a event than is not there, for debug proposses.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26723</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-09-08 08:11:00 +0200</bug_when>
            <thetext>Adding a check can be a good option because with that, we can ensure that only subsets are used. But on the other hand, this could make the property system even more complex.
In the end, I don&#39;t think we can take the time add those features to the current system. But I will keep that bug open and link it to the enhancement for reimplementing the property system. As soon as we start thinking about this, we should consider your suggestions.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26731</commentid>
            <who name="Seldaiendil">seldaiendil2</who>
            <bug_when>2011-09-08 09:39:33 +0200</bug_when>
            <thetext>Sorry, I thought it was a simpler task just re-building property setter with a check array, validation array and event.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26745</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2011-09-09 12:46:41 +0200</bug_when>
            <thetext>The property system is a complex thing with stubs, code generation on runtime and a lot of dependencies. Touching that is always a risk. ;)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35560</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:46:30 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>