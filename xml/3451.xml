<bug>
          <bug_id>3451</bug_id>
          
          <creation_ts>2010-02-18 16:32:00 +0100</creation_ts>
          <short_desc>Project named &#39;find&#39; causes errors.</short_desc>
          <delta_ts>2014-03-03 15:27:33 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>1.0</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P2</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>1.0.2</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martijn Evers">martijn4evers</reporter>
          <assigned_to name="Thomas Herchenroeder">thron7</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>16871</commentid>
            <who name="Martijn Evers">martijn4evers</who>
            <bug_when>2010-02-18 16:32:42 +0100</bug_when>
            <thetext>When a project named: &quot;find&quot; is generated with qooxdoo-1.0.* (I used &quot;source&quot; job but it also works with &quot;build&quot;). The file &quot;find.theme.Color&quot; is not included in the source build. This causes a &quot;find.theme is undefined&quot; error in my firebug console.

Steps to reproduce:
1. Create a new application with: &quot;tool/bin/create-application.py -n find -o &lt;project directory&gt;&quot;.
2. Cd into &quot;find&quot; and generate the app with the &quot;source&quot; job.
3. Open the &quot;source/index.html&quot; with firebug (or something similar) enabled.
4. See in the error occur.

When the same steps are used for the application named: &quot;findx&quot; everything works perfect.

NOTE: I found this bug when I was migrating a qooxdoo-0.8.3 application (named: &quot;find&quot; of-course) to qooxdoo 1.0.1.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16888</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-02-19 10:15:51 +0100</bug_when>
            <thetext>@Thomas
Can you imagine what the problem could be? Looks like something has changed in the generation of the app or in the class include.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16936</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-02-23 19:29:39 +0100</bug_when>
            <thetext>(In reply to comment #1)
&gt; @Thomas
&gt; Can you imagine what the problem could be? Looks like something has changed 
in the 
&gt; generation of the app or in the class include.

It might have changed since 0.8.x. The issue here is that during dependency 
analysis, pre-defined global symbols are skipped, as they are built-in. This 
includes the global &#39;window&#39; object and its attributes, one of which is &#39;find&#39;. 

If the generator finds such a symbol during parsing, it assumes it refers to 
the corresponding built-in. That means in this case, all identifiers starting 
with &quot;find.*&quot; are taken to refer to window.find.

As it is hard to make distinctions on this level, I&#39;d say we should leave it 
this way, although it would technically be possible on the JS level to shadow 
global symbols. Any objections? I wouldn&#39;t want to figure out whether a global 
symbol does *not* refer to the built-in. What would be the criterion?

But the create-application.py should already complain about such a top-level 
name space, to avoid later confusion.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16952</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-02-24 15:52:38 +0100</bug_when>
            <thetext>I added a check to create-application.py, to prohibit the use of a reserved 
word as name space. As already said, I don&#39;t want to modify the actual 
compiling and dependency resolving routines, as I don&#39;t see a clean way to 
handle it. Hope this finds everybody&#39;s consent. If not,  please re-open the bug.

With r21635.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>39511</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:27:33 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>