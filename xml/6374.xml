<bug>
          <bug_id>6374</bug_id>
          
          <creation_ts>2012-05-07 12:59:00 +0200</creation_ts>
          <short_desc>Allow Api-Data Generation for Builds (rather than Libraries)</short_desc>
          <delta_ts>2014-03-03 08:46:54 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.apidata</component>
          <version>1.6</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>29329</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-05-07 12:59:42 +0200</bug_when>
            <thetext>Currently, api-data generation is done on a library-level. That means, the api 
data is extracted from all classes of a library, independent of them being used 
in any application (or being used at all), or of any code-changing 
optimizations (variants, statics). Only for the sake of inheritance, ancestor 
classes from other libraries are included as well (e.g. qx.* classes).

This is nice for showing the broadest possible API a library provides. With the 
introduction of pre-build, low-level libraries, like qx.Website and qx.Server, 
it becomes interesting to generate API documentation that reflects the API of 
exactly those builds, meaning only the contained classes, and with only their 
optimized API (this is affected by variants and statics optimizations). This is 
especially true when entire sub-functionalities of classes are factored out 
into mixins, and then re-include over a guarded qx.core.Environment.filter() 
call.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29330</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-05-07 13:08:01 +0200</bug_when>
            <thetext>This affects two areas of api data generation:

- The proper class selection (&#39;classList&#39;) which is used for the corresponding 
build has also to be used for api data generation (like it used to be in 
earlier times).

- The optimized trees have to be used for api data extraction. This concerns 
Api-changing optimizations &#39;variants&#39; and &#39;statics&#39;.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29331</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-05-07 13:10:48 +0200</bug_when>
            <thetext>I&#39;ve implemented support for &#39;variants&#39; optimization in the api-data generation.

th_newast: 537f7f8</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35711</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:46:54 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>