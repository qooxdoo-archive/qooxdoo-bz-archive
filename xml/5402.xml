<bug>
          <bug_id>5402</bug_id>
          
          <creation_ts>2011-07-14 14:00:00 +0200</creation_ts>
          <short_desc>Add find function in qx.type.BaseArray</short_desc>
          <delta_ts>2012-09-03 10:04:36 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.oo</component>
          <version>1.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Benjamin Dreux">dreux.benjamin</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          <cc>tristan.koch</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>26006</commentid>
            <who name="Benjamin Dreux">dreux.benjamin</who>
            <bug_when>2011-07-14 14:00:33 +0200</bug_when>
            <thetext>Sometimes, i want to search throw an array for a specific item.
But i now that there is only one occurrence of the searched item.
And because my array could be big, i dont want to look into the whole array when i already found my item in the array.

So i would have a function wiht the following signature
 qx.type.BaseArray.find(func(item,index,array), context)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26019</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2011-07-15 13:17:16 +0200</bug_when>
            <thetext>I don&#39;t believe we need an extra #find. Consider using #some which seems to do exactly what you&#39;re looking for and is part of JavaScript 1.6. It works cross-browser since we provide a fall-back implementation for legacy browser. There is also #filter, #forEach, #every and #map. Note those methods are exposed in qx.type.BaseArray, but you can just as well use them on an ordinary array.

Speaking of enumerators, Underscore.JS includes a number of interesting additions that go beyond the native enumerators and might be worth considering. Of course, we should not extend or alter the native types.

http://demo.qooxdoo.org/current/apiviewer/#qx.lang.Core
http://demo.qooxdoo.org/current/apiviewer/#qx.type.BaseArray
https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array.
http://documentcloud.github.com/underscore/#each</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>26042</commentid>
            <who name="Benjamin Dreux">dreux.benjamin</who>
            <bug_when>2011-07-16 16:38:22 +0200</bug_when>
            <thetext>In fact some does something like find.
Some return a boolean saying, the element you are looking for is in the array.
Find return the element your are looking for.
And the idea of filter is to return all elements  your looking for</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30302</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-08-01 15:51:41 +0200</bug_when>
            <thetext>The BaseArray currently only provides methods also provided by the native array so we won&#39;t add a non standard method there. On top, we have qx.type.Array which contains already some convenience functions. But still, I don&#39;t see the reason why a filter should not be enough. With that, you can search for the object your looking for. I guess you are worried about performance? If we implement a separate find function, that would be plain JavaScript and I would guess that the native filter function could still be faster...
I close this bug as wontfix because I don&#39;t see a reason to add the find function. If you have some reasons I did not consider / know, please reopen and let me know. :)</thetext>
          </long_desc>
      
      

    </bug>