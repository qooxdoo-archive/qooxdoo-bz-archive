<bug>
          <bug_id>2482</bug_id>
          
          <creation_ts>2009-06-18 00:07:00 +0200</creation_ts>
          <short_desc>RFC: Demobrowser Hosting Skeleton Applications as Demos</short_desc>
          <delta_ts>2014-03-03 08:47:56 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>app.demobrowser</component>
          <version>0.8.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>alexander.steitz</cc>
    
    <cc>derrell.lipman</cc>
    
    <cc>fabian.jakobs</cc>
    
    <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>10444</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-06-18 00:07:22 +0200</bug_when>
            <thetext>This bug is a design proposal, and requests for comments so that the design can 
eventually be settled and implemented, or discarded.

INTRODUCTION

The Demobrowser is already a hosting application, similar to the Testrunner. 
Both provide a GUI run time environment for other, currently stand-alone, 
qooxdoo applications, the demo apps in case of the Demobrowser and the test 
application in case of the Testrunner. But the demo apps have a non-standard 
structure that deviates from the established skeleton structure which limits 
them in the way they can be developed and maintained (e.g. think of multiple 
classes, resources, individual config settings, etc.). It makes it also hard to 
integrate other applications into the Demobrowser, those that in fact are based 
on the standard skeleton. This is relevant e.g. for demos of qooxdoo-contrib 
contributions where it is desirable to integrate them with the Demobrowser.

The aim of this proposal is therefore to achieve an integration of skeleton 
based apps with the Demobrowser, such that those applications can run within 
the demobrowser, just as the demos do now. It makes the following assumptions:

- Demobrowser should be able to &quot;draw in&quot; skelton-based applications as demos.
- It is open whether the demo apps are used as stand-alone apps, or their 
classes as part of an overarching &quot;demo application&quot; (similar to the test 
application of the Testrunner). The latter could be desirable from a 
performance aspect, when switching between demos in the browser.
- It is left open whether the existing demos will have to be migrated to 
skeleton-based apps, or if they remain in their current form. This proposal 
discusses mainly the &quot;new&quot; form.

PROPOSAL

Demo Identification

The Demobrowser will be supplied with a config file that lists the demos to be 
hosted in the final app. The canonical way to identify qooxdoo applications is 
through their Manifest.json file, so I suggest using this as well, and since 
their class code is used in one way or another, I think it is fair to use the 
established &quot;library&quot; config key to list them:

        &quot;library&quot; : [
           { &quot;manifest&quot; : &quot;.../somedemo/Manifest.json&quot; },
           { &quot;manifest&quot; : &quot;.../someotherdemo/Manifest.json&quot; },
           ...
        ]

This way the demos that should be included are specified. (Needless to say that 
this listing could be generated by scanning directories or other resources). 
Default demos could still be maintained in the Demobrowser source tree, under 
source/demo, like we have now, but other paths are perfectly possible as well.

Demo Construction

A dedicated job will be available to build the listed demos.

- In the case of stand-alone demos, the build version of each demo is 
generated. (There should be no need for a source version as demo). A special 
BUILD_PATH macro in the config file will result in a directory structure 
underneath the Demobrowser where the built demos are stored, e.g.:

        ./demos/widget/label/{script, resource, index.html}
        ./demos/widget/flash/...
        ...

These directories will have standard build structure. In order to maintain the 
demo categories (like &quot;widget&quot; in the example), I suggest using standard 
qooxdoo name spaces for the demo apps, i.e. the above demos would have the name 
spaces

        widget.label
        widget.flash
        ...

This way, the demos themselves specify the category they want to be in, and 
there is no logic necessary on the side of the Demobrowser to maintain 
categories.

- In the case of an overarching demo application that subsumes all demos into 
one qooxdoo application, the main demo application is provided by the 
demobrowser (again, similar to the Testrunner). But to integrate the specific 
demo classes, it is not possible to just include the demo&#39;s main application 
class, since it might conflict with the overarching demo application. Rather, 
the demo has to provide a class pattern (like TEST_INCLUDE for the Testrunner) 
that will specify which top-level classes embody the individual demo. Maybe it 
will be necessary to have a single top-level class that e.g. extends a standard 
framework container class to which all the other demo classes are then added. 
This top-level class can then be instantiated by the overarching demo app, and 
managed within the runner window of the Demobrowser. Similar to the Testrunner, 
it might be beneficial if the qooxdoo framework provided a default demo class 
which concrete demos can extend, so that this protocol is enforced.


Demo Execution

This again depends whether there are several stand-alone demo apps, or a single 
demo app that subsumes all demos.

For stand-alone demos, the individual demos are loaded into the iframe of the 
runner window of Demobrowser through URL loading, much like it is today. The 
URLs go to the above listed subdirectories like 
./demos/&lt;category&gt;/&lt;name&gt;/index.html.

In the case of the single demo app, individual demos will just be complex parts 
of the demo application. Part loading might be applied to speed up start up 
time. Switching between demos would boil down to hiding/showing the 
corresponding parts. &quot;Unloading&quot; demos might become an issue, to not overload 
the browser with several hundred parts as various demos have been run.


Demo Source Viewing

Source code can be copied along when creating the demos in the ./demos 
subdirectory. Each demo will have its sources in its own subdirectory. Since an 
entire source tree (or a selection of classes from it) will be copied, viewing 
of multiple classes which make up the demo is possible. This can be achieved 
independently of the stand-alone or embedded demo decision.


With this setup it should be possible to create an entire Demobrowser 
application for the standard demos, for the demos of qooxdoo-contrib projects, 
or custom demo applications, or any combination thereof, just by providing the 
corresponding listing in a &quot;library&quot; config key and running a &quot;demo&quot; job in the 
Demobrowser home directory.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10450</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2009-06-18 15:12:32 +0200</bug_when>
            <thetext>This sounds like a great enhancement. I have just a few comments/suggestions:

1. You mention automatically generating the manifest entries in the library key by scanning a directory. A further enhancement to that would be to allow the manifest entry to include a wildcard, e.g. 

        &quot;library&quot; : [
           { &quot;manifest&quot; : &quot;.../somedemo/Manifest.json&quot; },
           { &quot;manifest&quot; : &quot;.../someotherdemo/Manifest.json&quot; },
           { &quot;manifest&quot; : &quot;.../qooxdoo-contrib/*&quot; },
           ...
        ]

thus allowing to scan for all Manifest.json files in the specified directory. (A better syntax might be to simply list the directory name with a trailing slash, excluding the asterisk.) This way, as new classes are created, e.g. for demobrowser as it scans qooxdoo-contrib, they can be automatically in a new build. For other applications (see #2, below), as development progresses and classes are added, the manifest need not be explicitly modified.

2. Although you&#39;re thinking of this in terms of the test runner and Demobrowser, I see this as a fabulously useful paradigm for many user applications as well. We&#39;ve had numerous queries on the ML for best practices for incremental and as-needed loading of application components. It would be very useful, I think, if the general design being discussed here were implemented as a set of generic classes in the qx namespace to enable easy use by users&#39; applications.

2a. The corollary is that this should be buildable in the normal fashion, calling the generator to create either a &quot;source&quot; or &quot;build&quot;. This differs from the original description of a &quot;build&quot; only, specifically for the demobrowser.

Otherwise, looks good!

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>11007</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-07-22 18:07:06 +0200</bug_when>
            <thetext>*** Bug 1491 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36077</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:56 +0100</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>