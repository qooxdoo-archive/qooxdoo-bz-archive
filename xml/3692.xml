<bug>
          <bug_id>3692</bug_id>
          
          <creation_ts>2010-05-07 13:55:00 +0200</creation_ts>
          <short_desc>Generator: Pluggable Action Keys</short_desc>
          <delta_ts>2014-03-03 08:47:14 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool.generator</component>
          <version>1.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          <keywords>Refactoring</keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Herchenroeder">thron7</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          <cc>daniel.wagner</cc>
    
    <cc>dev</cc>
    
    <cc>qooxdoo</cc>
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>18266</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-05-07 13:55:26 +0200</bug_when>
            <thetext>Re-write the job handling of the generator, so that the implementation for 
action keys (&quot;compile&quot;, &quot;api&quot;, &quot;slice-images&quot;,...) is drawn in from separate 
modules, so that custom modules can be easily added to add new, self defined 
action keys.

This design involves various aspects:
- discover and read the modules dynamically, when the generator starts up
- make the path where to look for those modules extensible through configuration
- define an API which the providing module has to provide, in order for the 
generator to register and use it</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>18267</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-05-07 14:02:19 +0200</bug_when>
            <thetext>Concerning action module API:

- each module has to provide a &#39;register()&#39; function top-level
- this function could return a map which is easily integrated with what 
listJobTriggers() returns:
{
  name : &quot;key-name&quot;,
  type   : &quot;JSimpleJob&quot;,
  func   : &lt;function_running_the_key&gt;
}

That would make the API narrow, yet leave maximum freedom as to how the module 
organizes itself internally. For the &lt;function_running_the_key&gt;, a standard 
call convention has to be set up, e.g. &lt;func&gt;(jobconf, context, classList), 
probably depending on the job.type.

Generator.py will then do the dispatching.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>21355</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2010-11-17 10:26:55 +0100</bug_when>
            <thetext>More notes on this, from the custom extension point of view:

    * Generator custom extensions:
          o customers should be able to provide generator (Python) code
          o this code will implement new config triggers
          o i.e. you will be able to use new action config keys in your job 
definitions (these new actions might need additional declarative keys, but you 
can already add as much new declarative keys to a job as your heart desires :)
          o use cases:
                + collect library resources in a novel directory structure 
(think provider)
                + dump dependency information in novel ways (think provider)
                + create custom compile files (think provider)
          o this should enable to implement the provider key as a custom 
extension
    * In order to achieve that you need an &quot;extension API&quot; and protocol:
          o custom extensions can be dynamically discovered (special path, 
naming conventions, etc.)
          o every extension provides a function that returns a map with config 
keys, their category, and the function being called when the key is encountered 
in a config
          o every action function will get the current job config
          o will have access to a script object (??)
          o will be able to use the generator modules (generator.*, 
ecmascript.*, misc.*, ...)
    * There will be extensive documentation documenting all of this :)
    * Existing functionality (source, build, ...) should be implemented using 
just the same API and protocol!
          o good proof-of-concept
          o improves architecture</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22834</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-02-21 11:16:21 +0100</bug_when>
            <thetext>*** Bug 4685 has been marked as a duplicate of this bug. ***</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22859</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2011-02-21 17:35:00 +0100</bug_when>
            <thetext>Completed with all attachments in Bug 4685 and can be tested now.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22860</commentid>
            <who name="Stefan Andersson">dev</who>
            <bug_when>2011-02-21 17:38:33 +0100</bug_when>
            <thetext>(In reply to comment #4)
&gt; Completed with all attachments in Bug 4685 and can be tested now.

We have not moved the core modules so far but prepared it by a ICorePlugin. Do you want us to do that?

How many and what categories do you want?

It seems like it implements most of what has been asked for above. the rest can be extended...</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>22864</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2011-02-21 17:50:53 +0100</bug_when>
            <thetext>(In reply to comment #5)
&gt; (In reply to comment #4)
&gt; &gt; Completed with all attachments in Bug 4685 and can be tested now.
&gt; 
&gt; We have not moved the core modules so far but prepared it by a ICorePlugin. Do
&gt; you want us to do that?

No, thanks. 

- I will not be able to look deeper into this at the moment, as other issues have higher prios currently.

- The license situation of the code attached to  bug#4685 is unclear to me, especially as it seems to include unattributed third-party code (yapsy).

- From first looks, though, I found the plugin system a bit overshooting; I&#39;m looking for something simpler.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35834</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:14 +0100</bug_when>
            <thetext>Move open issues to RESOLVED â€“ LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>