<bug>
          <bug_id>6426</bug_id>
          
          <creation_ts>2012-05-18 15:25:00 +0200</creation_ts>
          <short_desc>unused processed string caching in qx.lang.String.hyphenate and qx.lang.String.camelCase</short_desc>
          <delta_ts>2012-06-26 16:28:39 +0200</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>1.6.1</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dietrich Streifert">dietrich.streifert</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>29485</commentid>
              <attachid>1158</attachid>
            <who name="Dietrich Streifert">dietrich.streifert</who>
            <bug_when>2012-05-18 15:25:31 +0200</bug_when>
            <thetext>Created attachment 1158
Patch against qooxdoo/master qx.lang.String.js

I&#39;ve done some profiling under IE8 which revealed that the function qx.lang.String.hyphenate consumed a lot of time which lead brought me to take a look at the implementation.

It seemed that qx.lang.String uses a string map hash __stringsMap in order to cache repeated calls to method hyphenate and camelCase with the same parameter.

There is a check if the current string was already processed by calling:

  var result = this.__stringsMap[str];
  if(!result) {
    // do processing

but did never cache the processed result. So this would be the corrected code to let caching take place:

    hyphenate: function(str)
    {
      var result = this.__stringsMap[str];
      if (!result) {
        result = str.replace(/[A-Z]/g, function(match){
          return  (&#39;-&#39; + match.charAt(0).toLowerCase());
        });
        // !!!!! the following line was missing !!!!!
        this.__stringsMap[str] = result;
      }
      return result;
    },

I&#39;ve attached a git diff against qx.lang.String.hyphenate which adds the missing caching code line.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29488</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-05-21 08:14:15 +0200</bug_when>
            <thetext>Thats an interesting implementation of a cache. ;) Thanks for digging into that and attaching the patch. Applied it right away.

master: 8f62473f1548154b5b32d82ad8af193e2e00acaa
1.6.x: ac1f8239fdc69ce241ec8945fe912ee321ac8105</thetext>
          </long_desc>
      
          <attachment isobsolete="0" ispatch="0" isprivate="0" isurl="0">
            <attachid>1158</attachid>
            <date>2012-05-18 15:25:00 +0200</date>
            <delta_ts>2012-05-18 15:25:31 +0200</delta_ts>
            <desc>Patch against qooxdoo/master qx.lang.String.js</desc>
            <filename>qx-lang-String.js.patch</filename>
            <type>application/octet-stream</type>
            <size>767</size>
            <attacher>dietrich.streifert</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL2ZyYW1ld29yay9zb3VyY2UvY2xhc3MvcXgvbGFuZy9TdHJpbmcuanMgYi9m
cmFtZXdvcmsvc291cmNlL2NsYXNzL3F4L2xhbmcvU3RyaW5nLmpzCm9sZCBtb2RlIDEwMDY0NApu
ZXcgbW9kZSAxMDA3NTUKaW5kZXggOGNkOTE3ZS4uNGYwNzIxOQotLS0gYS9mcmFtZXdvcmsvc291
cmNlL2NsYXNzL3F4L2xhbmcvU3RyaW5nLmpzCisrKyBiL2ZyYW1ld29yay9zb3VyY2UvY2xhc3Mv
cXgvbGFuZy9TdHJpbmcuanMKQEAgLTk3LDYgKzk3LDcgQEAgcXguQm9vdHN0cmFwLmRlZmluZSgi
cXgubGFuZy5TdHJpbmciLAogICAgICAgICByZXN1bHQgPSBzdHIucmVwbGFjZSgvXC0oW2Etel0p
L2csIGZ1bmN0aW9uKG1hdGNoLCBjaHIpIHsKICAgICAgICAgICByZXR1cm4gY2hyLnRvVXBwZXJD
YXNlKCk7CiAgICAgICAgIH0pOworICAgICAgICB0aGlzLl9fc3RyaW5nc01hcFtzdHJdID0gcmVz
dWx0OwogICAgICAgfQogICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICB9LApAQCAtMTIxLDYgKzEy
Miw3IEBAIHF4LkJvb3RzdHJhcC5kZWZpbmUoInF4LmxhbmcuU3RyaW5nIiwKICAgICAgICAgcmVz
dWx0ID0gc3RyLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKG1hdGNoKXsKICAgICAgICAgICBy
ZXR1cm4gICgnLScgKyBtYXRjaC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSk7CiAgICAgICAgIH0p
OworICAgICAgICB0aGlzLl9fc3RyaW5nc01hcFtzdHJdID0gcmVzdWx0OwogICAgICAgfQogICAg
ICAgcmV0dXJuIHJlc3VsdDsKICAgICB9LAo=
</data>

          </attachment>
      

    </bug>