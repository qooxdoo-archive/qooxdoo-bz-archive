<bug>
          <bug_id>6064</bug_id>
          
          <creation_ts>2012-01-22 17:06:00 +0100</creation_ts>
          <short_desc>Replace io.ScriptLoader with bom.request.Script</short_desc>
          <delta_ts>2014-03-03 15:19:24 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io</component>
          <version>1.6</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.5</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Derrell Lipman">derrell.lipman</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          <cc>id</cc>
    
    <cc>thron7</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>28337</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2012-01-22 17:06:23 +0100</bug_when>
            <thetext>The ScriptLoader has been in use since about 2008 and is in use by non-experimental classes, e.g. qx.io.part.Package. Can the &quot;experimental&quot; notice in ScriptLoader be removed?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28457</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-02-08 17:10:53 +0100</bug_when>
            <thetext>Also see bug 5068.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>28459</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-02-08 17:24:15 +0100</bug_when>
            <thetext>Use bom.request.Script in io.part.Package.

With 463fdca.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29278</commentid>
            <who name="Tristan Koch">tristan.koch</who>
            <bug_when>2012-04-25 16:38:55 +0200</bug_when>
            <thetext>qx.io.ScriptLoader still in use by qx.bom.Collection.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29416</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2012-05-11 13:45:17 +0200</bug_when>
            <thetext>Replaced ScriptLoader with request.Script in qx.Collection with d71524a1 on master.

ScriptLoader is still used by ui.mobile.container.MIScroll and required by Part.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29417</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2012-05-11 14:03:25 +0200</bug_when>
            <thetext>AFAICT the part loading system already uses bom.request.Script. Removed the &quot;require&quot; hint from qx.Part with 8b879f3b.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29438</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2012-05-14 08:01:13 +0200</bug_when>
            <thetext>Who is taking care of that mobile class? Christopher maybe or do you plan to change it and?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>29641</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2012-06-01 14:35:56 +0200</bug_when>
            <thetext>All remaining occurrences of io.ScriptLoader have been replaced with bom.request.Script

master: 6c6762e9</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>30511</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2012-08-28 12:31:32 +0200</bug_when>
            <thetext>This issue is not finished. qx.io.ScriptLoader is still part of the framework, 
so people ask about it. It is marked &quot;EXPERIMENTAL - NOT READY FOR PRODUCTION&quot;, 
so people ask about that too. The class should either be deprecated or, as it 
is experimental, immediately be removed from the framework. (But as it is an 
old class, adding migration data for it might still be a good idea).

Furthermore, there is no mentioning of qx.bom.request.Script in the manual. 
This should be changed, so there is at least minimal documentation we can point 
people to when they ask about script loading.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33901</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2013-09-12 08:57:08 +0200</bug_when>
            <thetext>Removed the ScriptLoader and its tests and added a migration warning.
As for the docs, bom.request.Script is explained here:
http://manual.qooxdoo.org/3.0/pages/communication.html#low-level-requests

Fixed with 43baa6bd88c2ad0a (master)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33918</commentid>
            <who name="saaj">id</who>
            <bug_when>2013-09-15 19:18:55 +0200</bug_when>
            <thetext>Here must be a high context or an undertow as the original reporter asked for removing the experimental notice, not the class itself.

Given the task of dependency management, there are two cases:

  1) Internal:

      qx.io.PartLoader.require([&#39;myPart&#39;], function()
      {
        new myapp.SomethingFromMyPart();
      }, this);

  2) External:

      var url = &#39;http://openlayers.org/api/OpenLayers.js&#39;;
      new qx.io.ScriptLoader().load(url, function()
      {
        new OpenLayers.Map(&#39;map&#39;);
      }, this);

So both APIs were namespaced intuitively (qx.io.ImageLoader falls within as well) and used similarly. I don&#39;t know the intention behind removing the class, but as far as I see now, the removal will only complicate things.

Following the example from qx.bom.request.Script the #2 becomes:

  var req = new qx.bom.request.Script();
  req.onload = (function() 
  {
    new OpenLayers.Map(&#39;map&#39;);
  }).bind(this);
  req.open(&quot;GET&quot;, url);
  req.send();

As the result, the end-user task of dependency management gets spread across different namespaces, and API for external case becomes unfriendly low-level. 

The class was long-used, test-covered, it had some parts of the framework based on, proving that it was, in fact, stable. Maybe someone got Derrell&#39;s report wrong?

At least, guys, may I know the rationale behind? ;-)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33940</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-09-18 09:36:40 +0200</bug_when>
            <thetext>(In reply to comment #10)
&gt; At least, guys, may I know the rationale behind? ;-)

Thats easy: cleanup which is really necessary in the IO layer. If you see how many implementations we have for basic io, you could count more than 10 classes easily. Some of the classes are necessary and some do basically the same than others. So we decided to remove this experimental class. Still, we are open for enhancement request. :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33949</commentid>
            <who name="saaj">id</who>
            <bug_when>2013-09-18 12:14:28 +0200</bug_when>
            <thetext>(http://socrates.io/#apTKVDD/read)

There aren&#39;t of plenty, so let&#39;s look into ``qx.io.*`` as of 3.0.1.

qx.io.*
=======

root
----
``qx.io.ImageLoader``, ``qx.io.PartLoader``, ``qx.io.ScriptLoader``. Classes do exactly what they are supposed to, considering their names. APIs are similar and allow to easily accomplish each class&#39; single purpose. Thus good design. It could make sense to extract ``Loader`` part into ``qx.io.loader`` namespace and move ``qx.io.part`` there.

part
----
Internals of ``qx.io.PartLoader``.

remote
------
Namespace for ``qx.io.remote.Rpc``. Could make sense to rename to ``qx.io.rpc``.

request
-------
Qooxdoo-style high-level XHR-wrapper and JSONP-wrapper.

rest
----
HTTP methods&#39; requests. REST fashion ;-)


End-user qualities
==================
Peeping though the namespace I haven&#39;t encountered any (of alleged 10) redundant functionality. Every namespace has it&#39;s purpose serving specific end-user task of network communication.

Framework-developer qualities
=============================
Here&#39;s important separation. You shouldn&#39;t mix end-user qualities and internal code qualities. If ``qx.io.*`` isn&#39;t DRY, then some refactoring should be performed making classes designed for end-users, which re-implement some basics, operate on framework low-level internals. *Replace io.ScriptLoader with bom.request.Script* is pretty fair in that sense. But in no way it should reduce end-user tasks that could be accomplished with ``qx.io.*``. Thus, considering the title and text of the bugreport ``qx.io.ScriptLoader`` should be rewritten on ``qx.bom.request.Script`` without end-user API change, not removed.

Wrap-up
=======
I repeat, ``qx.bom`` is internals. It&#39;s not for end-user in most cases. ``qx.io`` is end-user namespace with concise and high-level qooxdoo API.

In prior message I showed one of usecases for ``qx.io.ScriptLoader``. With its removal and end-user downgrade to ``qx.bom.request.Script``, the end-user code turns from basing on high-level framework-quality API to basing on low-level W3C XHR-polyfill library API. What other replacement do you suggest?

  *&quot;Some of the classes are necessary and some do basically the same than others.&quot;*

Anything can be implemented with ``qx.bom.request``. But it doesn&#39;t mean all ``qx.io`` should be &quot;cleaned up&quot;. High-level single-purpose class is a virtue for a framework. And there&#39;s surly a task for loading a script, as a matter of dependency management. As well as RPC calls, JSONP class, part loading, etc.

  *&quot;Still, we are open for enhancement request.&quot;*

If this is a enchantment bugreport, then the enhancement request is not to enhance this way.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33952</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-09-19 09:35:05 +0200</bug_when>
            <thetext>Thanks for your detailed response. But there are a few things we need to check. The first thing is that qx.bom.request is not internal. This namespace contains classes which could be used by anyone and are included in qx.Website. So we can not simply skip those classes in our considerations.
The next thing is that the qx.io.remote namespace is not only for RPC. It contains a full stack transport layer. Considering both facts, we should check which options the developer has for doing either XHR or script loading:

XHR
---
qx.bom.request.XHR
qx.bom.request.SimpleXHR
qx.io.remote.Request
qx.io.request.Xhr

qx.io.rest.Resource (in case of a REST API)


Script
-----
qx.bom.request.Script
qx.io.remote.Request

qx.bom.request.Jsonp (in case of a JSON-p API)
qx.io.request.Jsonp (in case of a JSON-p API)

qx.io.PartLoader (in case of parts)


As you see, you have a huge amount of options to choose from depending on what you really want. This is the view a new developer has and what bother me about the whole io stuff.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33957</commentid>
            <who name="saaj">id</who>
            <bug_when>2013-09-19 16:00:04 +0200</bug_when>
            <thetext>(http://socrates.io/#UAk5tSR)

  *&quot;The first thing is that qx.bom.request is not internal. This namespace contains classes which could be used by anyone and are included in qx.Website. So we can not simply skip those classes in our considerations.&quot;*

What namespace an end-user will look into once he wants to perform a networking action and is looking for the doc, ``qx.io`` or ``qx.bom.request``? Novice user, you&#39;ve mentioned, Martin. Do qooxdoo-users like OO-goodness and effective high-level abstractions? For instance, I&#39;m delighted with it, and I guess many other are as well. 

So why would we want to provide non-qooxdoo-style polyfilled XHR API as qooxdoo end-user API? I find it at least counterintuitive. Anyone who has a will to deal with low-level stuff can, no doubt, use it. But it has no point with common networking tasks.

About ``qx.Website``. Just before 3.0 release I opened #7481, *Full-blown website builds, proof of concept and consideration* where I, among other things, showed that current networking API of ``qx.Website`` is unnecessary low-level, hard-to-deal-with, not concise, etc. ::

    q.io.xhr(&quot;script/qxWeb.json&quot;).send().on(&quot;loadend&quot;, function(xhr) 
    {
      if(xhr.readyState == 4 &amp;&amp; xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 400) 
      {
        var data = JSON.parse(xhr.responseText);
        // use data   
      } 
      else 
      {
        // handle error
      }
    });

Honestly, in the first place this is some sort of mess, which has zero relation to qooxdoo-style APIs. So I said in #7481, I see zero reason using it in place of: ::

    var request = new qx.io.request.Xhr(&#39;script/qxWeb.json&#39;);
    request.addListener(&#39;success&#39;, function(event)
    {
      var data = event.getTarget().getResponse();
      // use data   
    }, this);
    request.addListener(&#39;fail&#39;, function(event)
    {
      // handle error
    }, this);
    request.send();

If talking of #7481, I can say it&#39;s the main reason I argue for ``qx.io.ScriptLoader``. In the case of website development, asynchronous external code loading is very usual task. This is why it&#39;s necessary to have succinct API for the case. If you didn&#39;t at #7481 proof-of-concent, here (`one &lt;http://code.google.com/p/qooxdoo-website-skeleton/source/browse/source/class/website/controller/Geo.js?repo=frontend&gt;`_, `two &lt;http://code.google.com/p/qooxdoo-website-skeleton/source/browse/source/class/website/controller/Article.js?repo=frontend&gt;`_) are examples ``qx.io.ScriptLoader`` usage. The result is pretty concise so I strongly encourage you to keep high-level script loader.

Networking code
===============

  *&quot;As you see, you have a huge amount of options to choose from depending on what you really want. This is the view a new developer has and what bother me about the whole io stuff.&quot;*

I comment below, explaining my view on these classes. Also I&#39;ll show that dividing into *XHR* and *Script* doesn&#39;t help to find better arrangement for networking code.


XHR
---
qx.bom.request.Xhr – low-level, polyfill, not for end-user.

qx.bom.request.SimpleXhr – considering its description *This class is internal because it&#39;s tailored to qx.io.rest.Resource which needs more functionality than qx.bom.request.Xhr provides.* the name is misguiding as it&#39;s more a *ComplexXhr*. Also if it&#39;s purpose is solely a ``qx.io.rest.Resource``, then I can make sense to move it to ``qx.io.rest`` as internal class.

qx.io.remote.Request – redundant, I agree. Some implementation details, like ``fileUpload`` property, are misguiding. 

qx.io.request.Xhr – high-level end-user API.

qx.io.rest.Resource (in case of a REST API) - because REST as notion of utilizing other HTTP methods but GET and POST, has its downsides and is not something  de-facto standard, I wouldn&#39;t put it behind XHR. It&#39;s a separate fancy ;-)


Script
------
``qx.bom.request.Script`` – low-level, polyfill, not for end-user.

``qx.io.remote.Request`` – redundant, see above.

``qx.bom.request.Jsonp`` (in case of a JSON-p API) – misplaced, see last section.

``qx.io.request.Jsonp`` (in case of a JSON-p API) – high-level, end-user JSONP.

``qx.io.PartLoader`` (in case of parts) – high-level, qooxdoo partial build dependency-aware code loader. ``qx.io.ScriptLoader`` is external dependency-unaware code loader. But in the end, putting it under *Script* doesn&#39;t give us any benefit.

You must be looking at the issue bottom-up and missing important points. It&#39;s clear that, excluding exotic transports, any communication is either XHR or Script. But as an end-user shouldn&#39;t bother. It&#39;s an implementation detail, and the best framework is one that hides it from user.

As a matter of domain logic, there two major group of tasks related with networking: **Dependency management** and **Remote invocation**. And end-user shouldn&#39;t care what&#39;s beneath, unless it has any practical sense (usually zero). Let&#39;s try looking top-down, ``qx.io`` is all about it.


Proposed io namespace
=====================
I you&#39;re ready for backward-incompatible changes, I proposed an intuitive ``qx.io`` namespace structure. I omitted internal class and packages for clarity. They should be placed in related packages in the subtree. ::

    io
    └─loader
      ├─Image
      ├─Part
      └─Script    
    └─rpc
      └─Rpc
    └─request
      ├─Jsonp
      └─Xhr
    └─rest
      └─Resource

The purposes of classes are self-documented in names, but I&#39;d dub with a most obvious purpose group:

Dependency management:

  * load an image, act on load,
  * load a part and its dependencies, act on load,
  * load a script, act on load,

Internal server-side application API:

  * invoke a remote method by qooxdoo protocol,

External application API:

  * do generic JSONP request, 
  * do generic XHR request,
  * do REST request.

So when end-user, event novice, wants to solve a networking task, opening API viewer and double-clicking *io* he reveals all the possibilities the framework provides. 

That&#39;s intuitive, the odds are the most of end-users will look into ``qx.io`` first are very high. This is the good design I see. And the current state of affairs in ``qx.io`` is close to a good design, just some refactoring should be performed.


Issues with networking design
=============================
After you pointed that ``qx.io.remote`` wasn&#39;t only for RPC, I see some redundancy. Yes, ``qx.io.remote.Request`` seems superfluous as end-user class. It is already marked *This class will be deprecated in a future release*. For the moment I&#39;d consider everything under ``qx.io.remote`` an internal class, except ``qx.io.remote.Rpc`` itself. Then gradually refactor the subtree to make it DRY.

I looked onto ``qx.bom`` networking classes and I see some issues. ``qx.bom.request.Jsonp`` for instance. JSONP has nothing to do with *browser object model* because it&#39;s a trick above ordinary script tags. That&#39;s all browser knows. For the same reason ``qx.bom.rest.Resource`` is misplaced. Browser has nothing to do with REST.  

Both are abstractions build on top of *browser object model*. Their place is in ``qx.io`` as internals for corresponding end-user classes.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33968</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-09-24 09:28:10 +0200</bug_when>
            <thetext>I&#39;m sorry but I don&#39;t think its the right time and place to discuss the whole design of the IO layer. So lets get back to the topic of the script loader and the removal of it which means in the end only one thing: we don&#39;t maintain that piece of code anymore. All the rest is up to you as this code is under the default qooxdoo license, feel free to grab it, put it into your code base of even put it into a contribution. 
Having that in mind, there is only one thing left to argue about and thats if its necessary to have such a high level script loading class in the code base or not. Btw. as far as I see, thats only the load method which would be missing, right? And if we want to have it the qooxdoo way, event would be necessary instead of a callback.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33971</commentid>
            <who name="saaj">id</who>
            <bug_when>2013-09-24 11:25:40 +0200</bug_when>
            <thetext>&gt; I&#39;m sorry but I don&#39;t think its the right time and place to discuss the whole
&gt; design of the IO layer. 

It was you who started ;-) I just countered that ``qx.io`` as of 3.0.1 is good
enough, and particularly more consistent in aspect of dependency loading than 
master.


&gt; So lets get back to the topic of the script loader and
&gt; the removal of it which means in the end only one thing: we don&#39;t 
&gt; maintain that piece of code anymore. 

That sounds final. Sir, yes sir ;-)


&gt; All the rest is up to you as this code is under the
&gt; default qooxdoo license, feel free to grab it, put it into your code base of
&gt; even put it into a contribution. 

Yes, it&#39;s the long term fallback. Short term is to stay on 3.0.x.


&gt; Having that in mind, there is only one thing left to argue about and thats if
&gt; its necessary to have such a high level script loading class in the code base
&gt; or not. Btw. as far as I see, thats only the load method which would be
&gt; missing, right? And if we want to have it the qooxdoo way, event would be
&gt; necessary instead of a callback.

Yes, script loading is important in native apps for maintaining external code dependency.
It is also important to keep loaders&#39; API, ``qx.io.*Loader``, consistent. Either all based on events, or all based on callbacks. All three were callback based, i.e. loaders were API- and feature-consistent.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33977</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-09-25 08:05:40 +0200</bug_when>
            <thetext>(In reply to comment #16)
&gt; It was you who started ;-) I just countered that ``qx.io`` as of 3.0.1 is good
&gt; enough, and particularly more consistent in aspect of dependency loading than 
&gt; master.

:-)


&gt; Yes, script loading is important in native apps for maintaining external code
&gt; dependency.
&gt; It is also important to keep loaders&#39; API, ``qx.io.*Loader``, consistent.
&gt; Either all based on events, or all based on callbacks. All three were callback
&gt; based, i.e. loaders were API- and feature-consistent.

All the loaders did never fit into the whole qooxdoo system because of their callback usage. The reason for that is that these classes are left overs of the old io2 namespace [1] which has been a test container which never has been finished. So in the end, I have the opinion that all these classes need to be checked and updated.

[1] https://github.com/qooxdoo/qooxdoo/tree/0454017724248dd159861067b14f07feb5258d74/qooxdoo/framework/source/class/qx/io2</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>33979</commentid>
            <who name="saaj">id</who>
            <bug_when>2013-09-25 11:19:14 +0200</bug_when>
            <thetext>&gt; All the loaders did never fit into the whole qooxdoo system because of their
&gt; callback usage. The reason for that is that these classes are left overs of the
&gt; old io2 namespace [1] which has been a test container which never has been
&gt; finished. So in the end, I have the opinion that all these classes need to be
&gt; checked and updated.

I agree that the loaders aren&#39;t very qooxdoo-ish. As I don&#39;t see any potential of holding forth on the subject of ``qx.io.ScriptLoader`` removal as we both didn&#39;t change any of our initial views, though as a matter of keeping the effort put in the discussion practical I suggest following topics as separate bugreports:

  * BOM-unrelated functionality in qx.bom
  * Turning qx.io.remote into qx.io.rpc
  * Improvement of loaders in qx.io

If you wish I would report.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34000</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-09-30 08:51:53 +0200</bug_when>
            <thetext>(In reply to comment #18)
&gt; I agree that the loaders aren&#39;t very qooxdoo-ish. As I don&#39;t see any potential
&gt; of holding forth on the subject of ``qx.io.ScriptLoader`` removal as we both
&gt; didn&#39;t change any of our initial views, though as a matter of keeping the
&gt; effort put in the discussion practical I suggest following topics as separate
&gt; bugreports:
&gt; 
&gt;   * BOM-unrelated functionality in qx.bom
&gt;   * Turning qx.io.remote into qx.io.rpc
&gt;   * Improvement of loaders in qx.io
&gt; 
&gt; If you wish I would report.

Sure, thats all stuff we need to do and it would be good to have an issue open for it.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34005</commentid>
            <who name="saaj">id</who>
            <bug_when>2013-09-30 13:34:53 +0200</bug_when>
            <thetext>Done:

  * BOM-unrelated functionality in qx.bom – #7759
  * Turning qx.io.remote into qx.io.rpc – #7760
  * Improvement of loaders in qx.io - #7761</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>34012</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2013-10-01 07:43:04 +0200</bug_when>
            <thetext>(In reply to comment #20)
&gt; Done:
&gt; 
&gt;   * BOM-unrelated functionality in qx.bom – #7759
&gt;   * Turning qx.io.remote into qx.io.rpc – #7760
&gt;   * Improvement of loaders in qx.io - #7761

Thank you very much. :)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>36470</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:19:24 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>