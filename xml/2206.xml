<bug>
          <bug_id>2206</bug_id>
          
          <creation_ts>2009-04-03 15:49:00 +0200</creation_ts>
          <short_desc>Infinite loop when using wildcard operator</short_desc>
          <delta_ts>2013-12-16 12:45:40 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>contrib</product>
          <component>Simulator</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Wagner">daniel.wagner</reporter>
          <assigned_to name="Daniel Wagner">daniel.wagner</assigned_to>
          
          <qa_contact name="Daniel Wagner">daniel.wagner</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>9141</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-04-03 15:49:26 +0200</bug_when>
            <thetext>Using the wildcard operator (*) in a qxh locator pattern causes the script to enter an infinite loop if the pattern doesn&#39;t match a direct child of the root node.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9143</commentid>
            <who name="Thomas Herchenroeder">thron7</who>
            <bug_when>2009-04-03 16:05:30 +0200</bug_when>
            <thetext>Just being curious: How can a match-all wildcard *not* match something?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>9144</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-04-03 16:09:27 +0200</bug_when>
            <thetext>I should have been more clear: It happens whenever the wildcard is used as one part of a multi-part pattern, such as qxh=*/[@label=&quot;OK&quot;].</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10005</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-05-18 12:20:34 +0200</bug_when>
            <thetext>Fixed in r18604: Switching from public getChildren to protected getChildren solved the bigger issue of not being able to access all child widgets through qooxdoo locators since not all widgets have a public getChildren method in qx 0.8. This has gotten rid of the infinite recursion issue as well.
However, this means that locators will have to be rewritten since they now match against the direct child widgets instead of the &#39;logical&#39; children that some widgets have.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10019</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-05-18 18:10:44 +0200</bug_when>
            <thetext>After some discussion, we came to the conclusion that using the internal widget hierarchy would be too confusing for application/test developers. Locators should reflect the logical structure built by using the add method on widgets. Changes to the user extension and the Feedreader simulation have been reverted. Reopening this bug since the infinite recursion issue is back as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>10123</commentid>
            <who name="Daniel Wagner">daniel.wagner</who>
            <bug_when>2009-05-26 13:36:49 +0200</bug_when>
            <thetext>Child nodes are now retrieved using the external children API (see bug #2401), falling back to the internal structure and finally the JS object&#39;s properties.</thetext>
          </long_desc>
      
      

    </bug>