<bug>
          <bug_id>1332</bug_id>
          
          <creation_ts>2008-09-01 16:05:00 +0200</creation_ts>
          <short_desc>Document qooxdoo core concepts</short_desc>
          <delta_ts>2014-03-03 08:47:06 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>documentation.manual</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>LATER</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>unspecified</target_milestone>
          <dependson>1333</dependson>
    
    <dependson>1334</dependson>
    
    <dependson>1335</dependson>
    
    <dependson>1336</dependson>
    
    <dependson>1337</dependson>
    
    <dependson>1338</dependson>
    
    <dependson>1339</dependson>
    
    <dependson>1340</dependson>
    
    <dependson>1341</dependson>
    
    <dependson>1342</dependson>
    
    <dependson>1343</dependson>
    
    <dependson>1344</dependson>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Fabian Jakobs">fabian.jakobs</reporter>
          <assigned_to name="Martin Wittemann">martin.wittemann</assigned_to>
          
          <qa_contact name="qooxdoo bugs mailing list">qooxdoo-bugs</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>4890</commentid>
            <who name="Fabian Jakobs">fabian.jakobs</who>
            <bug_when>2008-09-01 16:05:16 +0200</bug_when>
            <thetext>The qooxdoo core concepts should be documented in the wiki

See depended bugs</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5220</commentid>
            <who name="Jonathan Weiß">qooxdoo-bugs</who>
            <bug_when>2008-09-04 10:33:58 +0200</bug_when>
            <thetext>I&#39;ll take this.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>5543</commentid>
            <who name="Jonathan Weiß">qooxdoo-bugs</who>
            <bug_when>2008-09-16 11:11:13 +0200</bug_when>
            <thetext>-&gt; Andreas</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>8376</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-03-09 10:11:49 +0100</bug_when>
            <thetext>to 0.8.3</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>12080</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-09-09 14:47:52 +0200</bug_when>
            <thetext>move documentation enhancements up to 0.9</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>14872</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2009-11-24 20:48:32 +0100</bug_when>
            <thetext>mass renaming of 0.9 target for documentation issues to 1.0</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>16123</commentid>
            <who name="Andreas Ecker">qooxdoo</who>
            <bug_when>2010-01-12 11:02:23 +0100</bug_when>
            <thetext>Fabian, I&#39;ll pass this on to you to identify and work on the technical concepts that need more documentation.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17244</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2010-03-15 15:11:42 +0100</bug_when>
            <thetext>There were requests to add this to the online documentation. I took a small amount of editorial liberty in my explanation so it should probably be checked for absolute accuracy when putting it in the wiki, but it applies to this bug so is included here...

On Fri, Mar 12, 2010 at 05:54, skar &lt;skar.karthikeyan@gmail.com&gt; wrote:

    Hi,

    I&#39;ve got a class like this:

    qx.Class.define(&quot;testproject.ArrayClass&quot;,
    {
     extend: qx.ui.basic.Atom,

     construct : function()
     {
       arguments.callee.base.apply(this);
       this.arr2 = new Array();
     },
     members : {
       arr : new Array()
      }
    });

    Now, I do the following:

    s1=new testproject.ArrayClass();
    s2=new testproject.ArrayClass();
    s1.arr==s2.arr -&gt; evaluates to true
    s1.arr2==s2.arr2 -&gt; evaluates to false

    Now pushing any object/value into s1.arr results in s2.arr also having
    the same values. Both the arrays point to the same array values. Why
    does arr2 result in per instance arrays while arr has the same array
    being shared across all the instances?

Derrell wrote:

Yes, this is a known issue, but one that is easy to resolve in your code. The problem is that if you provide an initial value to a member variable, and that initial value is a reference type (as is an array), then all instantiations of that object will share the reference.

To solve the problem, simply change your members section to read like this:

 members : {
   // arr : new Array()      can&#39;t do this because Array() provides a reference
  arr : null
  }

You&#39;re creating a new Array for each instance in the constructor, which is correct.

As a side note:

   arguments.callee.base.apply(this);
is typically in qooxdoo, these days, written as:
  this.base(arguments);

Cheers,

Derrell

Skar replied:

Is this a qooxdoo specific problem or a problem in JS in general?

Derrell answered:

 Hmmm... How to answer that...

What we&#39;re talking about here is a feature of the JavaScript language that is very useful. Objects (including Arrays) can become very large. Instead of passing copies of objects and arrays around, and taking the possibly large amount of time required to make those copies, only a single copy of each object is created, and when assigned to another variable or passed to a function or method, a reference to that object is passed. For function calls, this is typically referred to as &quot;call be reference&quot; instead of &quot;call by value.&quot; (Scaler types are passed by value.)

In the case of your question, you created a class like this (with a few changes by me):


qx.Class.define(&quot;testproject.ArrayClass&quot;,
{
 extend: qx.ui.basic.Atom,

 construct : function()
 {
   this.base(arguments);

   this.arr2 = new Array();
 },
 members :
 {
   elementsRemaining : 10,
   arr : new Array()
 }
});

What we have here is a JavaScript object (aka a &quot;map&quot;) being passed to a static function called qx.Class.define. The define() function creates a JavaScript object prototype, which creates a new class, and uses the provided map to initialize that class. The way that define() is implemented puts member initialization into the prototype, so each instance of the class gets initialized with the initial values from the members portion of the map. The initial values are evaluated at define() time and placed into the prototype.

Looking at the above example, you&#39;ll see this is very desirable to allow a new instance of testproject.ArrayClass to have its elementsRemaining member initialized to 10. This will occur automatically for each new instance of testproject.ArrayClass since the prototype of this class had an elementsRemaining member with a value of 10.

But what happened with the arr member? Its value, too, got evaluated at the time that qx.Class.define() was called, so the prototype contains a reference to that Array that was created. Each instantiation of testproject.ArrayClass gets the reference to that same array in its arr member, because the prototype had a reference to that array in the class&#39; arr member.

So is it a bug or a feature? It is certanly a JavaScript feature. I suppose that one might have designed qx.Class.define() a bit differently, and placed into the members portion of the map only a list of member variables (implicitly asking that they each be added to the prototype with a value of null), and requiring that all member variables be initialized in the constructor. This would have prevented the &quot;issue&quot; (I like that word better than &quot;problem&quot; in this context) that we&#39;re seeing here because there would be no opportunity to have a reference type added to the prototype. On the other hand, it would complicate the code (to a fairly large extent, with many classes with lots of scaler initialization) by forcing initialization of every member variable in the constructor, rather than in the much cleaner representation of the members: section of the map.

So there are the pros and cons. That should provide some food for thought.

Cheers,

Derrell
</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>17352</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2010-03-17 14:17:57 +0100</bug_when>
            <thetext>to Martin</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>35781</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 08:47:06 +0100</bug_when>
            <thetext>Move open issues to RESOLVED – LATER, whose last comment is older than a year.</thetext>
          </long_desc>
      
      

    </bug>