<bug>
          <bug_id>8536</bug_id>
          
          <creation_ts>2014-08-14 22:55:00 +0200</creation_ts>
          <short_desc>Support ECMAScript 5</short_desc>
          <delta_ts>2015-02-27 03:21:40 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>tool</component>
          <version>4.0.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>unspecified</target_milestone>
          <dependson>7810</dependson>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter>itkach</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>c4145780</cc>
          <qa_contact name="Richard Sternagel">richard.sternagel</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>40980</commentid>
            <who name="">itkach</who>
            <bug_when>2014-08-14 22:55:07 +0200</bug_when>
            <thetext>Using ECMAScript 5 syntax in a Qooxdoo application results in build errors. 

For example, using functions with names that match language keywords such as &quot;with&quot; or &quot;catch&quot; in when.js [https://github.com/cujojs/when], results in an error like this: 

$ ./generate.py
...
&gt;&gt;&gt; Collecting classes  /&lt;class &#39;ecmascript.frontend.SyntaxException.SyntaxException&#39;&gt; :
Expected an attribute name (pos (287, 9)).


Another example is using property get/set syntax. Having assignment like 

var param = {
      get a() {
        return 1;
    }};

Results in 
&gt;&gt;&gt; Collecting classes  /&lt;class &#39;ecmascript.frontend.SyntaxException.SyntaxException&#39;&gt; :
Syntax error: Expected &#39;:&#39; (pos (38, 11))

Generator should allow valid ECMAScript 5 syntax by default, with config options to turn on warnings for apps that target ancient browsers.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40981</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-08-15 08:13:54 +0200</bug_when>
            <thetext>Thanks for the report. This is basically one reason why we are switching to a JavaScript based toolchain. With that, we can use a open source parser (Esprima) which implements all those nice features for us. But this means, we don&#39;t plan to fix that in the python based code but as soon as the JavaScript based toolchain is ready, that problem should be gone as well.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>40984</commentid>
            <who name="">itkach</who>
            <bug_when>2014-08-15 16:02:33 +0200</bug_when>
            <thetext>I thought Python toolchain might be the limiting factor, so I looked for info on the new js tools, but I saw that they are still marked as experimental and my impression from the docs was that grunt is still using the same generator as generate.py, so I thought I&#39;d file this. Thank you, looking forward for the toolchain updates.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42657</commentid>
            <who name="Martin Schmidt">c4145780</who>
            <bug_when>2015-02-27 03:15:34 +0100</bug_when>
            <thetext>Second that. catch() is used in the Promise protocol [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise], and at the moment using catch() breaks build. Any progress on Grunt based toolchain, guys?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>42658</commentid>
            <who name="Martin Schmidt">c4145780</who>
            <bug_when>2015-02-27 03:21:40 +0100</bug_when>
            <thetext>As a temporary workaround, one can use:

new Promise(...).then(...)[&quot;catch&quot;](...);</thetext>
          </long_desc>
      
      

    </bug>