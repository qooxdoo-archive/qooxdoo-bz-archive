<bug>
          <bug_id>7353</bug_id>
          
          <creation_ts>2013-04-22 15:06:00 +0200</creation_ts>
          <short_desc>Provide a slightly more capable &quot;qx.bom.request.Xhr&quot; class</short_desc>
          <delta_ts>2014-03-03 15:23:52 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>core.io</component>
          <version>2.1.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>FIXED</resolution>
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.0</target_milestone>
          
          <blocked>7332</blocked>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Richard Sternagel">richard.sternagel</reporter>
          <assigned_to name="Richard Sternagel">richard.sternagel</assigned_to>
          <cc>qooxdoo</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>32597</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2013-04-22 15:06:27 +0200</bug_when>
            <thetext>With the introduction of REST to qx.Web we have to switch from the high-level &quot;qx.io.request.Xhr&quot; to the low level &quot;qx.bom.request.Xhr&quot;. Unfortunately &quot;qx.bom.request.Xhr&quot; doesn&#39;t offer very much because it aims to be compatible with the spec [1]. So we need bits and pieces from the implementation of &quot;qx.io.request.Xhr&quot; available at &quot;qx.Bootstrap&quot;-level. 

This more convenient Xhr class should simplify the usage of &quot;qx.bom.request.Xhr&quot; (by using it and adding on top) and should also be used/usable by other framework classes.

So:
* implement new class which uses &quot;qx.bom.request.Xhr&quot; as transport
* adapt Xhr website module
* use this new class within &quot;qx.io.request.Xhr&quot;

[1] http://www.w3.org/TR/XMLHttpRequest/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32598</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2013-04-22 15:10:33 +0200</bug_when>
            <thetext>&gt; * implement new class which uses &quot;qx.bom.request.Xhr&quot; as transport

SimpleXhr as starting point:

master: fae0487160aec3a96761a4c3ea01704117f508f5</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>32775</commentid>
            <who name="Richard Sternagel">richard.sternagel</who>
            <bug_when>2013-05-16 17:07:26 +0200</bug_when>
            <thetext>&gt; * adapt Xhr website module
&gt; * use this new class within &quot;qx.io.request.Xhr&quot;

Martin and I decided against that. 

SimpleXhr is now marked as internal (@internal), because it&#39;s main reason for existence is to bridge &quot;qx.io.rest.Resource&quot; with &quot;qx.bom.request.Xhr&quot;, i.e. it implements some convenience needed by &quot;qx.io.rest.Resource&quot; on top of &quot;qx.bom.request.Xhr&quot; (similar to the adapter pattern).

&gt; * use this new class within &quot;qx.io.request.Xhr&quot;

It can&#39;t be used by &quot;qx.io.request.Xhr&quot; (as transport) because it doesn&#39;t implement &quot;qx.bom.request.IRequest&quot;. And implementing this interface, makes no sense because &quot;qx.io.rest.Resource&quot; requires a higher request abstraction. While possible this would result in a class with a two-faced interface (low *and* high-level XHR) which is bad OO design.

&gt; * adapt Xhr website module

And because it&#39;s tailored for &quot;qx.io.rest.Resource&quot; exclusively (at the moment) exposing it as website module has no gains either. &quot;qx.bom.request.Xhr&quot; suits better (the current implementation), because it offers an interface web developers know already (see XHR spec mentioned in comment #1).</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>38178</commentid>
            <who name="Martin Wittemann">martin.wittemann</who>
            <bug_when>2014-03-03 15:23:52 +0100</bug_when>
            <thetext>Closed all bugs already shipped with a release.</thetext>
          </long_desc>
      
      

    </bug>