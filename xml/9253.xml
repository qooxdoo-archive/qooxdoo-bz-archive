<bug>
          <bug_id>9253</bug_id>
          
          <creation_ts>2016-02-22 17:58:00 +0100</creation_ts>
          <short_desc>get rid of arguments.callee calls in table stuff</short_desc>
          <delta_ts>2016-03-08 09:48:03 +0100</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>1</classification_id>
          <classification>Unclassified</classification>
          <product>framework</product>
          <component>desktop</component>
          <version>master</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>UNCONFIRMED</bug_status>
          
          
          
          
          
          
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>unspecified</target_milestone>
          
          
          
          
          <reporter name="Patrick Fischer">admin</reporter>
          <assigned_to name="Unassigned">none</assigned_to>
          <cc>derrell.lipman</cc>
    
    <cc>dietrich.streifert</cc>
          <qa_contact name="Martin Wittemann">martin.wittemann</qa_contact>
          <cf_browser>---</cf_browser>
          

      

      

      

          <long_desc isprivate="0">
            <commentid>43702</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2016-02-22 17:58:01 +0100</bug_when>
            <thetext>Working with sorting tables is painful. There are many arguments.callee call, which should be avioded.

I suggest to modify the qx.ui.model.Simple class method sortByColumn by using the basic bind method from

comparator.columnIndex = columnIndex;
this.__rowArr.sort(comparator);

to something simular to 

this.__rowArr.sort(comparator.bind(this, columnIndex));

. The &#39;this&#39; changes the scope inside the comparator function to the tablemodel, which could be more handy.

Now we have to modify all defined sort method from

... : function(row1, row2)
{
var obj1 = row1[arguments.callee.columnIndex];
var obj2 = row2[arguments.callee.columnIndex];
return ...
}

to

... : function(columnIndex, row1, row2)
{
var obj1 = row1[columnIndex];
var obj2 = row2[columnIndex];
return ...
}

, which looks more familiar.

What do you think?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43703</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2016-02-22 18:02:17 +0100</bug_when>
            <thetext>That&#39;s my (ancient) code. I have no objection to your proposal. If you&#39;d like to put together a pull request, including some tests that validate that it still works as before, I&#39;d be glad to review and commit.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43704</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2016-02-22 18:03:01 +0100</bug_when>
            <thetext>(Actually, that may even predate my work on Table, but I&#39;ll still be glad to review a pull request.)</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43705</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2016-02-23 10:13:28 +0100</bug_when>
            <thetext>I will prepare a pull request in a few days. Maybe at Friday. I hope you could help me writing tests.

May I ask you, what you are changing on table code base?</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43706</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2016-02-23 13:40:11 +0100</bug_when>
            <thetext>During code review I found an other good solution in the code of the qx.ui.list.List (L695):

this.__lookupTable.sort(function(a, b)
{
return sorter(model.getItem(a), model.getItem(b));
});


This could may help in tablemodel too:

this.__rowArr.sort(function(row1, row2)
{
return comparator(row1[columnIndex], row1[columnIndex]);
}););

The sort method functions declarations then could looks like:

... : function(obj1, obj2)
{
return ...
}</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43707</commentid>
            <who name="Derrell Lipman">derrell.lipman</who>
            <bug_when>2016-02-23 13:48:47 +0100</bug_when>
            <thetext>(In reply to comment #3)
&gt; May I ask you, what you are changing on table code base?

There are no significant changes currently planned, AFAIK, on Table. There has been long-term discussion to obsolete it in favor of something that benefits from the improvements in qooxdoo over the past 10 years. (Table is really, really old, and was a fabulous improvement to qooxdoo at the time, but has had its share of hindsight issues.) I don&#39;t know of anyone currently working on a replacement, however. Any replacement would have to either be backward compatible, or we&#39;d have to continue to maintain Table anyway because there&#39;s so much code that relies on it and TreeVirtual which is based on it.

Derrell</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43709</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2016-03-07 10:29:09 +0100</bug_when>
            <thetext>Just a sign of life... work in progress. I had some unexpected issues.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43710</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2016-03-07 21:17:44 +0100</bug_when>
            <thetext>I have created a PR but I&#39;m not able to test the changes in demobrowser and could not write test cases. I hope someone could do this for me.

I will try go create my qooxdoo enviroment (Raspberry Pi 2) soon. I don&#39;t want to &quot;pollute&quot; my private windows 7 pc with stuff like npm and so on. Even python feels wrong there.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43711</commentid>
            <who name="Dietrich Streifert">dietrich.streifert</who>
            <bug_when>2016-03-08 08:05:10 +0100</bug_when>
            <thetext>Hi Patrick

Thank you for the PR.

Regarding the pollution of windows with unix stuff: we use virtualization to avoid this. I&#39;m currently running vmware workstation where a centos7 guest is running which exposes directories via samba to the windows host and is the place where the qooxdoo stuff is on. There are other virtualization platforms like virtualbox which you may use without additional license costs.</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43712</commentid>
            <who name="Dietrich Streifert">dietrich.streifert</who>
            <bug_when>2016-03-08 08:14:36 +0100</bug_when>
            <thetext>Yu may even use pre configured virtual machines like those from http://virtualboxes.org/images/</thetext>
          </long_desc>
          <long_desc isprivate="0">
            <commentid>43713</commentid>
            <who name="Patrick Fischer">admin</who>
            <bug_when>2016-03-08 09:48:03 +0100</bug_when>
            <thetext>You are welcome. You are right. I never thought about virtual machines but I know them. On the ohter side I&#39;m distracted by windows &quot;functions&quot;, so I prefer physical isolation of private windows and development stuff.

I stay tuned!</thetext>
          </long_desc>
      
      

    </bug>